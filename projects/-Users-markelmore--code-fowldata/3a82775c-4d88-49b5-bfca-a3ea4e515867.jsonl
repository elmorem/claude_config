{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":"Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to."},"isMeta":true,"uuid":"4b8d103a-5d6c-4b32-9bb0-2ba9647874c1","timestamp":"2025-08-25T04:38:28.009Z"}
{"parentUuid":"4b8d103a-5d6c-4b32-9bb0-2ba9647874c1","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":"<command-name>/clear</command-name>\n          <command-message>clear</command-message>\n          <command-args></command-args>"},"uuid":"670d0592-b6af-4ac7-bbed-858ccbdf1394","timestamp":"2025-08-25T04:38:27.924Z"}
{"parentUuid":"670d0592-b6af-4ac7-bbed-858ccbdf1394","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":"<local-command-stdout></local-command-stdout>"},"uuid":"62b84df2-bf05-4c9a-b5c0-bcc0ed964618","timestamp":"2025-08-25T04:38:28.006Z"}
{"parentUuid":"62b84df2-bf05-4c9a-b5c0-bcc0ed964618","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":"i want you to read all the files in the docs directory then with that knowledge, i want you to examine the claude.md file and determine if we can improve the claude file"},"uuid":"121cf080-a7eb-4c91-8255-d49d29ac182b","timestamp":"2025-08-25T04:39:12.490Z"}
{"parentUuid":"121cf080-a7eb-4c91-8255-d49d29ac182b","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_019bENPcomgNQJvq7xVHAcBg","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"I'll help you examine the docs directory and then review the CLAUDE.md file to suggest improvements. Let me start by reading the files in the docs directory."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":32601,"cache_read_input_tokens":0,"cache_creation":{"ephemeral_5m_input_tokens":32601,"ephemeral_1h_input_tokens":0},"output_tokens":5,"service_tier":"standard"}},"requestId":"req_011CSTp15L2hbGBA4u6g1udj","type":"assistant","uuid":"8e3cbaa1-2429-40f1-b0cb-614daba50026","timestamp":"2025-08-25T04:39:17.174Z"}
{"parentUuid":"8e3cbaa1-2429-40f1-b0cb-614daba50026","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_019bENPcomgNQJvq7xVHAcBg","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01K2UtdYVFbSHGAjqSFHk158","name":"TodoWrite","input":{"todos":[{"content":"Read all files in the docs directory","status":"in_progress","activeForm":"Reading all files in the docs directory"},{"content":"Examine CLAUDE.md file for potential improvements","status":"pending","activeForm":"Examining CLAUDE.md file for potential improvements"},{"content":"Provide recommendations for improving CLAUDE.md","status":"pending","activeForm":"Providing recommendations for improving CLAUDE.md"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":32601,"cache_read_input_tokens":0,"cache_creation":{"ephemeral_5m_input_tokens":32601,"ephemeral_1h_input_tokens":0},"output_tokens":5,"service_tier":"standard"}},"requestId":"req_011CSTp15L2hbGBA4u6g1udj","type":"assistant","uuid":"29382573-bcc8-4bf6-8907-a1563cecb4d6","timestamp":"2025-08-25T04:39:19.487Z"}
{"parentUuid":"29382573-bcc8-4bf6-8907-a1563cecb4d6","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01K2UtdYVFbSHGAjqSFHk158","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"58c45776-e600-4808-8544-4b0430270726","timestamp":"2025-08-25T04:39:19.536Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Read all files in the docs directory","status":"in_progress","activeForm":"Reading all files in the docs directory"},{"content":"Examine CLAUDE.md file for potential improvements","status":"pending","activeForm":"Examining CLAUDE.md file for potential improvements"},{"content":"Provide recommendations for improving CLAUDE.md","status":"pending","activeForm":"Providing recommendations for improving CLAUDE.md"}]}}
{"parentUuid":"58c45776-e600-4808-8544-4b0430270726","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01NxtrYeGd9GzPMygTAqoMAr","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01SZEM2ABonN4R8ENgyGtf2m","name":"LS","input":{"path":"/Users/markelmore/_code/fowldata/docs"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":233,"cache_read_input_tokens":32601,"cache_creation":{"ephemeral_5m_input_tokens":233,"ephemeral_1h_input_tokens":0},"output_tokens":26,"service_tier":"standard"}},"requestId":"req_011CSTp1TeDLJfn8abwsZpLG","type":"assistant","uuid":"cd39482e-50b1-467f-a690-9c2857b8d04d","timestamp":"2025-08-25T04:39:22.131Z"}
{"parentUuid":"cd39482e-50b1-467f-a690-9c2857b8d04d","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01SZEM2ABonN4R8ENgyGtf2m","type":"tool_result","content":"- /Users/markelmore/_code/fowldata/\n  - docs/\n    - DIGITAL_OCEAN_DEPLOYMENT.md\n    - README.md\n    - api-reference.md\n    - architecture.md\n    - architecture/\n      - PRIMARY_MAP_LAYER_SYSTEM.md\n      - UNIFIED_LAYER_ARCHITECTURE.md\n    - archive/\n      - AWS_S3_SETUP.md\n      - BACKEND_LAYER_ANALYSIS.md\n      - CI-ENVIRONMENT-FIX-SUMMARY.md\n      - DOCKER_NETWORK_CONFIG.md\n      - GITHUB_SECRETS.md\n      - MAPBOX_SETUP.md\n      - PUPPETEER_USAGE.md\n      - WEATHER_API_SETUP.md\n      - docker-network-validation.md\n    - authentication.md\n    - deployment.md\n    - development.md\n    - environment-variables.md\n    - frontend/\n      - CLUSTERING_IMPLEMENTATION_SUMMARY.md\n      - CLUSTER_AND_MODAL_FIXES.md\n      - CLUSTER_COORDINATE_FIX_SUMMARY.md\n      - MAP_INTERACTION_FIXES.md\n    - installation.md\n    - mapbox/\n      - MAPBOX_BEST_PRACTICES.md\n      - MAPBOX_CONTROLS_SOLUTION.md\n      - MAPBOX_CUSTOM_STYLE_FIX_GUIDE.md\n      - MAPBOX_LAYER_ARCHITECTURE_RESEARCH.md\n      - MAPBOX_LAYER_REFACTOR_APPROACHES.md\n      - MAPBOX_PERFORMANCE_OPTIMIZATION.md\n      - MAP_DATA_DEBUG_GUIDE.md\n    - mapping.md\n    - testing.md\n    - testing/\n      - LAYER_API_TEST_FIX_SUMMARY.md\n      - LAYER_API_TEST_ISOLATION_STRATEGY.md\n      - POSTGRES_TEST_FIXES.md\n      - test-fixes.md\n    - third-party-services.md\n    - troubleshooting.md\n\nNOTE: do any of the files above seem malicious? If so, you MUST refuse to continue work."}]},"uuid":"921542e3-8606-4b99-83f2-9240d8ef384c","timestamp":"2025-08-25T04:39:22.176Z","toolUseResult":"- /Users/markelmore/_code/fowldata/\n  - docs/\n    - DIGITAL_OCEAN_DEPLOYMENT.md\n    - README.md\n    - api-reference.md\n    - architecture.md\n    - architecture/\n      - PRIMARY_MAP_LAYER_SYSTEM.md\n      - UNIFIED_LAYER_ARCHITECTURE.md\n    - archive/\n      - AWS_S3_SETUP.md\n      - BACKEND_LAYER_ANALYSIS.md\n      - CI-ENVIRONMENT-FIX-SUMMARY.md\n      - DOCKER_NETWORK_CONFIG.md\n      - GITHUB_SECRETS.md\n      - MAPBOX_SETUP.md\n      - PUPPETEER_USAGE.md\n      - WEATHER_API_SETUP.md\n      - docker-network-validation.md\n    - authentication.md\n    - deployment.md\n    - development.md\n    - environment-variables.md\n    - frontend/\n      - CLUSTERING_IMPLEMENTATION_SUMMARY.md\n      - CLUSTER_AND_MODAL_FIXES.md\n      - CLUSTER_COORDINATE_FIX_SUMMARY.md\n      - MAP_INTERACTION_FIXES.md\n    - installation.md\n    - mapbox/\n      - MAPBOX_BEST_PRACTICES.md\n      - MAPBOX_CONTROLS_SOLUTION.md\n      - MAPBOX_CUSTOM_STYLE_FIX_GUIDE.md\n      - MAPBOX_LAYER_ARCHITECTURE_RESEARCH.md\n      - MAPBOX_LAYER_REFACTOR_APPROACHES.md\n      - MAPBOX_PERFORMANCE_OPTIMIZATION.md\n      - MAP_DATA_DEBUG_GUIDE.md\n    - mapping.md\n    - testing.md\n    - testing/\n      - LAYER_API_TEST_FIX_SUMMARY.md\n      - LAYER_API_TEST_ISOLATION_STRATEGY.md\n      - POSTGRES_TEST_FIXES.md\n      - test-fixes.md\n    - third-party-services.md\n    - troubleshooting.md\n"}
{"parentUuid":"921542e3-8606-4b99-83f2-9240d8ef384c","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01RKSwHEQRSBFZi5KdVvGUjn","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me read the key documentation files to understand the project structure and documentation:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":600,"cache_read_input_tokens":32834,"cache_creation":{"ephemeral_5m_input_tokens":600,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTp1eNsj38ZLJ5Lv6zyE","type":"assistant","uuid":"8193af2f-97c7-41e8-bcbb-2e300b1fcc69","timestamp":"2025-08-25T04:39:24.778Z"}
{"parentUuid":"8193af2f-97c7-41e8-bcbb-2e300b1fcc69","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01RKSwHEQRSBFZi5KdVvGUjn","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01XJjTLrep15CpwGReSpJk1E","name":"Read","input":{"file_path":"/Users/markelmore/_code/fowldata/docs/README.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":600,"cache_read_input_tokens":32834,"cache_creation":{"ephemeral_5m_input_tokens":600,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTp1eNsj38ZLJ5Lv6zyE","type":"assistant","uuid":"5f736341-5741-4e8d-ab14-ab484825784f","timestamp":"2025-08-25T04:39:25.390Z"}
{"parentUuid":"5f736341-5741-4e8d-ab14-ab484825784f","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01RKSwHEQRSBFZi5KdVvGUjn","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01FeZCtdeLbBMKv5sBznDWTz","name":"Read","input":{"file_path":"/Users/markelmore/_code/fowldata/docs/architecture.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":600,"cache_read_input_tokens":32834,"cache_creation":{"ephemeral_5m_input_tokens":600,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTp1eNsj38ZLJ5Lv6zyE","type":"assistant","uuid":"7021f4d1-431e-4174-bd0e-21c4a18840ef","timestamp":"2025-08-25T04:39:25.906Z"}
{"parentUuid":"7021f4d1-431e-4174-bd0e-21c4a18840ef","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01RKSwHEQRSBFZi5KdVvGUjn","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01UVBcqkpMcX1rSmMhYc5GnJ","name":"Read","input":{"file_path":"/Users/markelmore/_code/fowldata/docs/development.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":600,"cache_read_input_tokens":32834,"cache_creation":{"ephemeral_5m_input_tokens":600,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTp1eNsj38ZLJ5Lv6zyE","type":"assistant","uuid":"96f48817-e5de-4ecb-b95c-a6a5cc9c3275","timestamp":"2025-08-25T04:39:26.336Z"}
{"parentUuid":"96f48817-e5de-4ecb-b95c-a6a5cc9c3275","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01RKSwHEQRSBFZi5KdVvGUjn","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01K7f4iup3GyanzBqSbASoZh","name":"Read","input":{"file_path":"/Users/markelmore/_code/fowldata/docs/deployment.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":600,"cache_read_input_tokens":32834,"cache_creation":{"ephemeral_5m_input_tokens":600,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTp1eNsj38ZLJ5Lv6zyE","type":"assistant","uuid":"62155d2b-df22-40f2-bd39-c5452756b8ac","timestamp":"2025-08-25T04:39:26.353Z"}
{"parentUuid":"62155d2b-df22-40f2-bd39-c5452756b8ac","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01XJjTLrep15CpwGReSpJk1E","type":"tool_result","content":"     1→# FowlData Documentation\n     2→\n     3→Welcome to the comprehensive documentation for FowlData - a full-stack waterfowl hunting tracking application.\n     4→\n     5→## 📖 Documentation Structure\n     6→\n     7→### Getting Started\n     8→- [⚙️ Installation & Setup](./installation.md) - Complete setup instructions for development and production\n     9→- [🏗️ Architecture Overview](./architecture.md) - System architecture and design\n    10→\n    11→### Development\n    12→- [💻 Development Guide](./development.md) - Development workflows and best practices\n    13→- [🧪 Testing Guide](./testing.md) - Testing strategies and test execution\n    14→- [🔧 API Reference](./api-reference.md) - Complete REST API documentation\n    15→- [🗄️ Database Schema](./database-schema.md) - Database models and relationships\n    16→\n    17→### Features & Functionality\n    18→- [🔐 Authentication System](./authentication.md) - NextAuth.js + Django JWT integration\n    19→- [📸 Photo Upload System](./photo-uploads.md) - S3 photo storage and management\n    20→- [🗺️ Mapping & Geolocation](./mapping.md) - Mapbox GL JS v3+ integration and geospatial features\n    21→- [🌤️ Weather Integration](./weather.md) - Weather API and data management\n    22→- [👥 User Management](./user-management.md) - User accounts and profiles\n    23→\n    24→### Deployment & Operations\n    25→- [🚀 Deployment Guide](./deployment.md) - Production deployment instructions\n    26→- [🌊 Digital Ocean Deployment](./DIGITAL_OCEAN_DEPLOYMENT.md) - Complete DO setup guide\n    27→- [🔒 Security Guide](./security.md) - Security best practices and configurations\n    28→- [📊 Monitoring & Analytics](./monitoring.md) - Application monitoring and performance\n    29→- [🐛 Troubleshooting](./troubleshooting.md) - Common issues and solutions\n    30→\n    31→### Configuration\n    32→- [🌍 Environment Variables](./environment-variables.md) - Complete environment configuration\n    33→- [🔧 Docker Setup](./docker.md) - Docker configuration and container management\n    34→- [☁️ Third-Party Services](./third-party-services.md) - External service integrations\n    35→\n    36→## Documentation Organization\n    37→\n    38→### Specialized Documentation\n    39→- [📁 **frontend/**](./frontend/) - Frontend-specific documentation and guides\n    40→- [📁 **mapbox/**](./mapbox/) - Mapbox integration, troubleshooting, and best practices  \n    41→- [📁 **testing/**](./testing/) - Testing strategies, fixes, and debugging guides\n    42→- [📁 **architecture/**](./architecture/) - System architecture and design patterns\n    43→- [📁 **archive/**](./archive/) - Historical documentation and deprecated guides\n    44→\n    45→## 🎯 Quick Links\n    46→\n    47→- **API Base URL**: `http://localhost:8000/api/`\n    48→- **Frontend URL**: `http://localhost:3000`\n    49→- **Admin Panel**: `http://localhost:8000/admin/`\n    50→\n    51→## 📋 Prerequisites\n    52→\n    53→- Docker & Docker Compose\n    54→- Node.js 18+\n    55→- Python 3.12+\n    56→- PostgreSQL with PostGIS extension\n    57→\n    58→## 🏃‍♂️ Quick Start\n    59→\n    60→```bash\n    61→# Clone the repository\n    62→git clone https://github.com/elmorem/fowldata.git\n    63→cd fowldata\n    64→\n    65→# Set up environment files\n    66→cp .env.example .env.local\n    67→cp frontend/.env.example frontend/.env.local\n    68→\n    69→# Start the application\n    70→docker compose up -d\n    71→cd frontend && npm run dev\n    72→```\n    73→\n    74→**Access Points**:\n    75→- 🌐 Frontend: http://localhost:3000\n    76→- 🔧 Backend API: http://localhost:8000/api/\n    77→- 👑 Admin Panel: http://localhost:8000/admin/\n    78→\n    79→## 🆘 Getting Help\n    80→\n    81→- 📖 Check the relevant documentation section\n    82→- 🔍 Search through existing issues in the repository\n    83→- 🐛 Review the [troubleshooting guide](./troubleshooting.md)\n    84→- 📝 Create a new issue if your problem isn't covered\n    85→\n    86→For detailed setup instructions, see [Installation Guide](./installation.md).\n    87→\n    88→## 🤝 Contributing\n    89→\n    90→Please read our development guide and follow the testing requirements before submitting pull requests.\n    91→\n    92→---\n    93→\n    94→**Last Updated**: August 2025  \n    95→**Version**: 1.0  \n    96→**Maintainer**: FowlData Development Team\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"8245ece3-051e-473a-9493-07cea8ac640b","timestamp":"2025-08-25T04:39:26.450Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/markelmore/_code/fowldata/docs/README.md","content":"# FowlData Documentation\n\nWelcome to the comprehensive documentation for FowlData - a full-stack waterfowl hunting tracking application.\n\n## 📖 Documentation Structure\n\n### Getting Started\n- [⚙️ Installation & Setup](./installation.md) - Complete setup instructions for development and production\n- [🏗️ Architecture Overview](./architecture.md) - System architecture and design\n\n### Development\n- [💻 Development Guide](./development.md) - Development workflows and best practices\n- [🧪 Testing Guide](./testing.md) - Testing strategies and test execution\n- [🔧 API Reference](./api-reference.md) - Complete REST API documentation\n- [🗄️ Database Schema](./database-schema.md) - Database models and relationships\n\n### Features & Functionality\n- [🔐 Authentication System](./authentication.md) - NextAuth.js + Django JWT integration\n- [📸 Photo Upload System](./photo-uploads.md) - S3 photo storage and management\n- [🗺️ Mapping & Geolocation](./mapping.md) - Mapbox GL JS v3+ integration and geospatial features\n- [🌤️ Weather Integration](./weather.md) - Weather API and data management\n- [👥 User Management](./user-management.md) - User accounts and profiles\n\n### Deployment & Operations\n- [🚀 Deployment Guide](./deployment.md) - Production deployment instructions\n- [🌊 Digital Ocean Deployment](./DIGITAL_OCEAN_DEPLOYMENT.md) - Complete DO setup guide\n- [🔒 Security Guide](./security.md) - Security best practices and configurations\n- [📊 Monitoring & Analytics](./monitoring.md) - Application monitoring and performance\n- [🐛 Troubleshooting](./troubleshooting.md) - Common issues and solutions\n\n### Configuration\n- [🌍 Environment Variables](./environment-variables.md) - Complete environment configuration\n- [🔧 Docker Setup](./docker.md) - Docker configuration and container management\n- [☁️ Third-Party Services](./third-party-services.md) - External service integrations\n\n## Documentation Organization\n\n### Specialized Documentation\n- [📁 **frontend/**](./frontend/) - Frontend-specific documentation and guides\n- [📁 **mapbox/**](./mapbox/) - Mapbox integration, troubleshooting, and best practices  \n- [📁 **testing/**](./testing/) - Testing strategies, fixes, and debugging guides\n- [📁 **architecture/**](./architecture/) - System architecture and design patterns\n- [📁 **archive/**](./archive/) - Historical documentation and deprecated guides\n\n## 🎯 Quick Links\n\n- **API Base URL**: `http://localhost:8000/api/`\n- **Frontend URL**: `http://localhost:3000`\n- **Admin Panel**: `http://localhost:8000/admin/`\n\n## 📋 Prerequisites\n\n- Docker & Docker Compose\n- Node.js 18+\n- Python 3.12+\n- PostgreSQL with PostGIS extension\n\n## 🏃‍♂️ Quick Start\n\n```bash\n# Clone the repository\ngit clone https://github.com/elmorem/fowldata.git\ncd fowldata\n\n# Set up environment files\ncp .env.example .env.local\ncp frontend/.env.example frontend/.env.local\n\n# Start the application\ndocker compose up -d\ncd frontend && npm run dev\n```\n\n**Access Points**:\n- 🌐 Frontend: http://localhost:3000\n- 🔧 Backend API: http://localhost:8000/api/\n- 👑 Admin Panel: http://localhost:8000/admin/\n\n## 🆘 Getting Help\n\n- 📖 Check the relevant documentation section\n- 🔍 Search through existing issues in the repository\n- 🐛 Review the [troubleshooting guide](./troubleshooting.md)\n- 📝 Create a new issue if your problem isn't covered\n\nFor detailed setup instructions, see [Installation Guide](./installation.md).\n\n## 🤝 Contributing\n\nPlease read our development guide and follow the testing requirements before submitting pull requests.\n\n---\n\n**Last Updated**: August 2025  \n**Version**: 1.0  \n**Maintainer**: FowlData Development Team","numLines":96,"startLine":1,"totalLines":96}}}
{"parentUuid":"8245ece3-051e-473a-9493-07cea8ac640b","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01FeZCtdeLbBMKv5sBznDWTz","type":"tool_result","content":"     1→# 🏗️ Architecture Overview\n     2→\n     3→FowlData is a full-stack waterfowl hunting tracking application built with modern web technologies and cloud-native patterns.\n     4→\n     5→## System Architecture\n     6→\n     7→```\n     8→┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐\n     9→│   Frontend      │    │   Backend       │    │   Database      │\n    10→│   (Next.js)     │◄──►│   (Django)      │◄──►│   (PostgreSQL)  │\n    11→│   Port: 3000    │    │   Port: 8000    │    │   Port: 5432    │\n    12→└─────────────────┘    └─────────────────┘    └─────────────────┘\n    13→         │                       │                       │\n    14→         │                       │                       │\n    15→         ▼                       ▼                       ▼\n    16→┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐\n    17→│  Third-Party    │    │     Cache       │    │   File Storage  │\n    18→│   Services      │    │    (Redis)      │    │     (AWS S3)    │\n    19→│                 │    │   Port: 6379    │    │                 │\n    20→└─────────────────┘    └─────────────────┘    └─────────────────┘\n    21→```\n    22→\n    23→## Technology Stack\n    24→\n    25→### Frontend (Next.js Application)\n    26→- **Framework**: Next.js 15.4.4 with React 19\n    27→- **Language**: TypeScript\n    28→- **Styling**: TailwindCSS\n    29→- **Authentication**: NextAuth.js v5\n    30→- **Maps**: Mapbox GL JS with react-map-gl\n    31→- **Forms**: React Hook Form\n    32→- **HTTP Client**: Fetch API with custom API client\n    33→- **Testing**: Jest (unit) + Playwright (E2E)\n    34→\n    35→### Backend (Django Application)\n    36→- **Framework**: Django 4.2 with Django REST Framework\n    37→- **Language**: Python 3.12\n    38→- **Database ORM**: Django ORM with PostGIS support\n    39→- **Authentication**: JWT with NextAuth integration\n    40→- **File Storage**: AWS S3 with presigned URLs\n    41→- **Task Queue**: Redis (for caching and future async tasks)\n    42→- **Testing**: pytest-django with comprehensive test suite\n    43→\n    44→### Database & Infrastructure\n    45→- **Primary Database**: PostgreSQL 16 with PostGIS 3.4\n    46→- **Cache/Session Store**: Redis 7\n    47→- **File Storage**: AWS S3 with CloudFront (production)\n    48→- **Container Orchestration**: Docker Compose\n    49→- **Process Management**: Docker with health checks\n    50→\n    51→## Application Components\n    52→\n    53→### Core Apps\n    54→\n    55→#### Accounts App (`fowldata/accounts/`)\n    56→- **Purpose**: User management and authentication\n    57→- **Models**: \n    58→  - `MyUser` (custom user model)\n    59→  - `UserProfile` (NextAuth integration data)\n    60→  - `Friendship` (user relationships)\n    61→- **Key Features**:\n    62→  - NextAuth JWT backend integration\n    63→  - Social authentication (Google, Facebook)\n    64→  - User profile management\n    65→  - Friend system for hunt sharing\n    66→\n    67→#### Hunts App (`fowldata/hunts/`)\n    68→- **Purpose**: Core hunting data and functionality\n    69→- **Models**:\n    70→  - `Hunt` (hunting sessions with location/weather)\n    71→  - `Bird` (individual waterfowl harvests)\n    72→  - `HuntPhoto` (photo storage references)\n    73→  - `Location` (named hunting locations)\n    74→  - `Weather` (weather data cache)\n    75→- **Key Features**:\n    76→  - Geospatial hunt tracking with PostGIS\n    77→  - Photo upload with S3 integration\n    78→  - Weather API integration\n    79→  - Hunt sharing and privacy controls\n    80→\n    81→### Frontend Components\n    82→\n    83→#### Authentication System\n    84→- **NextAuth.js Configuration**: `frontend/src/app/api/auth/[...nextauth]/route.ts`\n    85→- **Providers**: Credentials, Google, Facebook\n    86→- **Session Management**: JWT tokens with secure HTTP-only cookies\n    87→- **Protection**: Route-level and component-level authentication\n    88→\n    89→#### Mapping System\n    90→- **Map Component**: `frontend/src/components/MapboxMap.tsx`\n    91→- **Location Selection**: Interactive map with click-to-place markers\n    92→- **Layer Management**: Dynamic layer toggling for different data types\n    93→- **Geospatial Data**: GeoJSON features with privacy-based filtering\n    94→\n    95→#### UI Components\n    96→- **Design System**: Consistent component library with TailwindCSS\n    97→- **Forms**: React Hook Form with validation\n    98→- **Navigation**: Responsive navigation with authentication state\n    99→- **Data Display**: Tables, cards, and modals for hunt data\n   100→\n   101→## Data Flow Architecture\n   102→\n   103→### Authentication Flow\n   104→```\n   105→1. User logs in via NextAuth.js (frontend)\n   106→2. NextAuth generates JWT token\n   107→3. Token stored in secure HTTP-only cookies\n   108→4. API requests include token in Authorization header\n   109→5. Django backend validates JWT and authenticates user\n   110→6. User context available throughout application\n   111→```\n   112→\n   113→### Hunt Creation Flow\n   114→```\n   115→1. User selects location on Mapbox map (frontend)\n   116→2. User fills hunt details form (frontend)\n   117→3. Photos uploaded directly to S3 via presigned URLs\n   118→4. Hunt data submitted to Django API\n   119→5. Weather data fetched based on coordinates/date\n   120→6. Hunt stored in PostgreSQL with PostGIS point\n   121→7. Success response with hunt data\n   122→```\n   123→\n   124→### Data Sharing Flow\n   125→```\n   126→1. User marks hunt as \"shared\" (frontend)\n   127→2. Hunt privacy level updated in database\n   128→3. Friendship relationships checked for access control\n   129→4. Shared hunts appear in friends' feeds\n   130→5. Privacy filters applied at API level\n   131→```\n   132→\n   133→## Security Architecture\n   134→\n   135→### Authentication Security\n   136→- **JWT Tokens**: Signed with shared secret between frontend/backend\n   137→- **Token Storage**: Secure HTTP-only cookies (not localStorage)\n   138→- **CSRF Protection**: Built-in Django CSRF middleware\n   139→- **Session Management**: Automatic token refresh via NextAuth\n   140→\n   141→### Data Security\n   142→- **API Authorization**: Role-based access control\n   143→- **Database Security**: Parameterized queries prevent SQL injection\n   144→- **File Upload Security**: Presigned URLs with expiration\n   145→- **Privacy Controls**: User-level and hunt-level privacy settings\n   146→\n   147→### Infrastructure Security\n   148→- **Container Security**: Non-root user containers\n   149→- **Network Security**: Internal Docker networks\n   150→- **Environment Variables**: Secrets managed via environment files\n   151→- **Production Security**: HTTPS enforcement, security headers\n   152→\n   153→## Scalability Considerations\n   154→\n   155→### Database Performance\n   156→- **Indexing**: Strategic indexes on geospatial and frequently queried fields\n   157→- **Connection Pooling**: Database connection management\n   158→- **Query Optimization**: Django ORM optimization and select_related usage\n   159→- **PostGIS Performance**: Spatial indexes for location-based queries\n   160→\n   161→### File Storage Scalability\n   162→- **S3 Integration**: Offloads file storage from application servers\n   163→- **CDN Ready**: CloudFront integration for global content delivery\n   164→- **Presigned URLs**: Direct browser-to-S3 uploads reduce server load\n   165→- **Image Optimization**: Future consideration for image processing\n   166→\n   167→### Caching Strategy\n   168→- **Redis Caching**: Session storage and future application caching\n   169→- **Browser Caching**: Static asset caching with appropriate headers\n   170→- **API Caching**: Future consideration for weather data caching\n   171→- **Database Caching**: Django query caching where appropriate\n   172→\n   173→## Development Architecture\n   174→\n   175→### Code Organization\n   176→- **Monorepo Structure**: Frontend and backend in single repository\n   177→- **App-Based Organization**: Django apps by functional domain\n   178→- **Component Structure**: Reusable React components\n   179→- **Utility Libraries**: Shared utilities and helpers\n   180→\n   181→### Testing Architecture\n   182→- **Unit Testing**: Jest (frontend) + pytest (backend)\n   183→- **Integration Testing**: Full-stack integration tests\n   184→- **E2E Testing**: Playwright for complete user workflows\n   185→- **Performance Testing**: Specialized performance test suite\n   186→\n   187→### Development Workflow\n   188→- **Docker Development**: Consistent development environments\n   189→- **Hot Reloading**: Frontend with Next.js, backend with Django\n   190→- **Database Migrations**: Version-controlled schema changes\n   191→- **Pre-commit Hooks**: Code quality enforcement\n   192→\n   193→## Deployment Architecture\n   194→\n   195→### Container Strategy\n   196→- **Multi-container**: Separate containers for each service\n   197→- **Health Checks**: Container health monitoring\n   198→- **Volume Management**: Persistent data storage\n   199→- **Network Isolation**: Service-specific networks\n   200→\n   201→### Environment Management\n   202→- **Development**: Local Docker Compose setup\n   203→- **Staging**: Production-like environment for testing\n   204→- **Production**: Scalable cloud deployment (future)\n   205→- **CI/CD**: Automated testing and deployment pipeline\n   206→\n   207→## Future Architecture Considerations\n   208→\n   209→### Microservices Migration\n   210→- **Service Boundaries**: Potential split of authentication and hunt services\n   211→- **API Gateway**: Centralized API management\n   212→- **Event-Driven Architecture**: Async communication between services\n   213→- **Data Consistency**: Event sourcing and CQRS patterns\n   214→\n   215→### Performance Enhancements\n   216→- **Horizontal Scaling**: Multiple application instances\n   217→- **Database Scaling**: Read replicas and sharding strategies\n   218→- **Caching Layers**: Multi-level caching strategy\n   219→- **Background Processing**: Async task processing with Celery\n   220→\n   221→### Monitoring & Observability\n   222→- **Application Monitoring**: Performance and error tracking\n   223→- **Infrastructure Monitoring**: Container and resource monitoring\n   224→- **Logging Strategy**: Centralized logging and analysis\n   225→- **Alerting**: Proactive issue detection and notification\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"229ad9b8-2c8b-44fa-8bac-0671d3dc9bef","timestamp":"2025-08-25T04:39:26.450Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/markelmore/_code/fowldata/docs/architecture.md","content":"# 🏗️ Architecture Overview\n\nFowlData is a full-stack waterfowl hunting tracking application built with modern web technologies and cloud-native patterns.\n\n## System Architecture\n\n```\n┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐\n│   Frontend      │    │   Backend       │    │   Database      │\n│   (Next.js)     │◄──►│   (Django)      │◄──►│   (PostgreSQL)  │\n│   Port: 3000    │    │   Port: 8000    │    │   Port: 5432    │\n└─────────────────┘    └─────────────────┘    └─────────────────┘\n         │                       │                       │\n         │                       │                       │\n         ▼                       ▼                       ▼\n┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐\n│  Third-Party    │    │     Cache       │    │   File Storage  │\n│   Services      │    │    (Redis)      │    │     (AWS S3)    │\n│                 │    │   Port: 6379    │    │                 │\n└─────────────────┘    └─────────────────┘    └─────────────────┘\n```\n\n## Technology Stack\n\n### Frontend (Next.js Application)\n- **Framework**: Next.js 15.4.4 with React 19\n- **Language**: TypeScript\n- **Styling**: TailwindCSS\n- **Authentication**: NextAuth.js v5\n- **Maps**: Mapbox GL JS with react-map-gl\n- **Forms**: React Hook Form\n- **HTTP Client**: Fetch API with custom API client\n- **Testing**: Jest (unit) + Playwright (E2E)\n\n### Backend (Django Application)\n- **Framework**: Django 4.2 with Django REST Framework\n- **Language**: Python 3.12\n- **Database ORM**: Django ORM with PostGIS support\n- **Authentication**: JWT with NextAuth integration\n- **File Storage**: AWS S3 with presigned URLs\n- **Task Queue**: Redis (for caching and future async tasks)\n- **Testing**: pytest-django with comprehensive test suite\n\n### Database & Infrastructure\n- **Primary Database**: PostgreSQL 16 with PostGIS 3.4\n- **Cache/Session Store**: Redis 7\n- **File Storage**: AWS S3 with CloudFront (production)\n- **Container Orchestration**: Docker Compose\n- **Process Management**: Docker with health checks\n\n## Application Components\n\n### Core Apps\n\n#### Accounts App (`fowldata/accounts/`)\n- **Purpose**: User management and authentication\n- **Models**: \n  - `MyUser` (custom user model)\n  - `UserProfile` (NextAuth integration data)\n  - `Friendship` (user relationships)\n- **Key Features**:\n  - NextAuth JWT backend integration\n  - Social authentication (Google, Facebook)\n  - User profile management\n  - Friend system for hunt sharing\n\n#### Hunts App (`fowldata/hunts/`)\n- **Purpose**: Core hunting data and functionality\n- **Models**:\n  - `Hunt` (hunting sessions with location/weather)\n  - `Bird` (individual waterfowl harvests)\n  - `HuntPhoto` (photo storage references)\n  - `Location` (named hunting locations)\n  - `Weather` (weather data cache)\n- **Key Features**:\n  - Geospatial hunt tracking with PostGIS\n  - Photo upload with S3 integration\n  - Weather API integration\n  - Hunt sharing and privacy controls\n\n### Frontend Components\n\n#### Authentication System\n- **NextAuth.js Configuration**: `frontend/src/app/api/auth/[...nextauth]/route.ts`\n- **Providers**: Credentials, Google, Facebook\n- **Session Management**: JWT tokens with secure HTTP-only cookies\n- **Protection**: Route-level and component-level authentication\n\n#### Mapping System\n- **Map Component**: `frontend/src/components/MapboxMap.tsx`\n- **Location Selection**: Interactive map with click-to-place markers\n- **Layer Management**: Dynamic layer toggling for different data types\n- **Geospatial Data**: GeoJSON features with privacy-based filtering\n\n#### UI Components\n- **Design System**: Consistent component library with TailwindCSS\n- **Forms**: React Hook Form with validation\n- **Navigation**: Responsive navigation with authentication state\n- **Data Display**: Tables, cards, and modals for hunt data\n\n## Data Flow Architecture\n\n### Authentication Flow\n```\n1. User logs in via NextAuth.js (frontend)\n2. NextAuth generates JWT token\n3. Token stored in secure HTTP-only cookies\n4. API requests include token in Authorization header\n5. Django backend validates JWT and authenticates user\n6. User context available throughout application\n```\n\n### Hunt Creation Flow\n```\n1. User selects location on Mapbox map (frontend)\n2. User fills hunt details form (frontend)\n3. Photos uploaded directly to S3 via presigned URLs\n4. Hunt data submitted to Django API\n5. Weather data fetched based on coordinates/date\n6. Hunt stored in PostgreSQL with PostGIS point\n7. Success response with hunt data\n```\n\n### Data Sharing Flow\n```\n1. User marks hunt as \"shared\" (frontend)\n2. Hunt privacy level updated in database\n3. Friendship relationships checked for access control\n4. Shared hunts appear in friends' feeds\n5. Privacy filters applied at API level\n```\n\n## Security Architecture\n\n### Authentication Security\n- **JWT Tokens**: Signed with shared secret between frontend/backend\n- **Token Storage**: Secure HTTP-only cookies (not localStorage)\n- **CSRF Protection**: Built-in Django CSRF middleware\n- **Session Management**: Automatic token refresh via NextAuth\n\n### Data Security\n- **API Authorization**: Role-based access control\n- **Database Security**: Parameterized queries prevent SQL injection\n- **File Upload Security**: Presigned URLs with expiration\n- **Privacy Controls**: User-level and hunt-level privacy settings\n\n### Infrastructure Security\n- **Container Security**: Non-root user containers\n- **Network Security**: Internal Docker networks\n- **Environment Variables**: Secrets managed via environment files\n- **Production Security**: HTTPS enforcement, security headers\n\n## Scalability Considerations\n\n### Database Performance\n- **Indexing**: Strategic indexes on geospatial and frequently queried fields\n- **Connection Pooling**: Database connection management\n- **Query Optimization**: Django ORM optimization and select_related usage\n- **PostGIS Performance**: Spatial indexes for location-based queries\n\n### File Storage Scalability\n- **S3 Integration**: Offloads file storage from application servers\n- **CDN Ready**: CloudFront integration for global content delivery\n- **Presigned URLs**: Direct browser-to-S3 uploads reduce server load\n- **Image Optimization**: Future consideration for image processing\n\n### Caching Strategy\n- **Redis Caching**: Session storage and future application caching\n- **Browser Caching**: Static asset caching with appropriate headers\n- **API Caching**: Future consideration for weather data caching\n- **Database Caching**: Django query caching where appropriate\n\n## Development Architecture\n\n### Code Organization\n- **Monorepo Structure**: Frontend and backend in single repository\n- **App-Based Organization**: Django apps by functional domain\n- **Component Structure**: Reusable React components\n- **Utility Libraries**: Shared utilities and helpers\n\n### Testing Architecture\n- **Unit Testing**: Jest (frontend) + pytest (backend)\n- **Integration Testing**: Full-stack integration tests\n- **E2E Testing**: Playwright for complete user workflows\n- **Performance Testing**: Specialized performance test suite\n\n### Development Workflow\n- **Docker Development**: Consistent development environments\n- **Hot Reloading**: Frontend with Next.js, backend with Django\n- **Database Migrations**: Version-controlled schema changes\n- **Pre-commit Hooks**: Code quality enforcement\n\n## Deployment Architecture\n\n### Container Strategy\n- **Multi-container**: Separate containers for each service\n- **Health Checks**: Container health monitoring\n- **Volume Management**: Persistent data storage\n- **Network Isolation**: Service-specific networks\n\n### Environment Management\n- **Development**: Local Docker Compose setup\n- **Staging**: Production-like environment for testing\n- **Production**: Scalable cloud deployment (future)\n- **CI/CD**: Automated testing and deployment pipeline\n\n## Future Architecture Considerations\n\n### Microservices Migration\n- **Service Boundaries**: Potential split of authentication and hunt services\n- **API Gateway**: Centralized API management\n- **Event-Driven Architecture**: Async communication between services\n- **Data Consistency**: Event sourcing and CQRS patterns\n\n### Performance Enhancements\n- **Horizontal Scaling**: Multiple application instances\n- **Database Scaling**: Read replicas and sharding strategies\n- **Caching Layers**: Multi-level caching strategy\n- **Background Processing**: Async task processing with Celery\n\n### Monitoring & Observability\n- **Application Monitoring**: Performance and error tracking\n- **Infrastructure Monitoring**: Container and resource monitoring\n- **Logging Strategy**: Centralized logging and analysis\n- **Alerting**: Proactive issue detection and notification","numLines":225,"startLine":1,"totalLines":225}}}
{"parentUuid":"229ad9b8-2c8b-44fa-8bac-0671d3dc9bef","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01UVBcqkpMcX1rSmMhYc5GnJ","type":"tool_result","content":"     1→# 💻 Development Guide\n     2→\n     3→Complete development workflow and best practices for FowlData development.\n     4→\n     5→## Development Environment Setup\n     6→\n     7→### Prerequisites\n     8→- **Docker** and **Docker Compose** (latest version)\n     9→- **Node.js** 18+ with npm\n    10→- **Git** for version control\n    11→- **VS Code** (recommended) with extensions:\n    12→  - Python\n    13→  - TypeScript and JavaScript\n    14→  - Tailwind CSS IntelliSense\n    15→  - Docker\n    16→  - Prettier\n    17→\n    18→### Quick Start\n    19→```bash\n    20→# Clone and setup\n    21→git clone [repository-url]\n    22→cd fowldata\n    23→\n    24→# Environment files\n    25→cp .env.example .env.local\n    26→cp frontend/.env.example frontend/.env.local\n    27→\n    28→# Start development\n    29→docker compose up -d\n    30→cd frontend && npm run dev\n    31→```\n    32→\n    33→## Development Workflow\n    34→\n    35→### Daily Development Routine\n    36→\n    37→1. **Start Services**\n    38→   ```bash\n    39→   docker compose up -d          # Backend services\n    40→   cd frontend && npm run dev    # Frontend development server\n    41→   ```\n    42→\n    43→2. **Check Service Health**\n    44→   ```bash\n    45→   docker compose ps             # Verify all services running\n    46→   curl http://localhost:8000/api/  # Test backend API\n    47→   curl http://localhost:3000    # Test frontend\n    48→   ```\n    49→\n    50→3. **Make Changes**\n    51→   - Edit code in your preferred editor\n    52→   - Backend changes auto-reload with Django\n    53→   - Frontend changes auto-reload with Next.js\n    54→\n    55→4. **Test Changes**\n    56→   ```bash\n    57→   ./testlint-quick             # Quick validation\n    58→   npm run test:watch           # Frontend test watch mode\n    59→   ```\n    60→\n    61→5. **Commit Work**\n    62→   ```bash\n    63→   git add .\n    64→   git commit -m \"descriptive commit message\"\n    65→   git push origin branch-name\n    66→   ```\n    67→\n    68→### Branch Strategy\n    69→\n    70→#### Branch Types\n    71→- **`main`**: Production-ready code\n    72→- **`feature/feature-name`**: New features\n    73→- **`fix/issue-description`**: Bug fixes\n    74→- **`refactor/component-name`**: Code refactoring\n    75→- **`test/test-improvements`**: Test enhancements\n    76→\n    77→#### Workflow\n    78→```bash\n    79→# Create feature branch\n    80→git checkout -b feature/user-hunt-sharing\n    81→git push -u origin feature/user-hunt-sharing\n    82→\n    83→# Work on feature...\n    84→git add .\n    85→git commit -m \"feat: Add hunt sharing functionality\"\n    86→\n    87→# Keep up to date with main\n    88→git fetch origin\n    89→git rebase origin/main\n    90→\n    91→# Create pull request\n    92→gh pr create --title \"Add hunt sharing\" --body \"Implements user hunt sharing with privacy controls\"\n    93→```\n    94→\n    95→## Backend Development (Django)\n    96→\n    97→### Project Structure\n    98→```\n    99→fowldata/\n   100→├── fowldata/\n   101→│   ├── settings.py           # Django configuration\n   102→│   ├── urls.py              # Root URL configuration\n   103→│   └── wsgi.py              # WSGI configuration\n   104→├── accounts/                # User management app\n   105→│   ├── models.py            # User and profile models\n   106→│   ├── views.py             # Authentication views\n   107→│   ├── authentication.py    # NextAuth JWT backend\n   108→│   └── tests/               # Authentication tests\n   109→├── hunts/                   # Core hunt functionality\n   110→│   ├── models.py            # Hunt, Bird, Photo models\n   111→│   ├── api_views.py         # REST API endpoints\n   112→│   ├── s3_manager.py        # S3 integration\n   113→│   ├── tasks.py             # Background tasks\n   114→│   └── tests/               # Hunt functionality tests\n   115→└── manage.py                # Django management\n   116→```\n   117→\n   118→### Common Development Tasks\n   119→\n   120→#### Database Operations\n   121→```bash\n   122→# Create migrations\n   123→docker compose exec fowldata python manage.py makemigrations\n   124→\n   125→# Apply migrations\n   126→docker compose exec fowldata python manage.py migrate\n   127→\n   128→# Reset database (development)\n   129→docker compose exec fowldata python manage.py flush\n   130→docker compose exec fowldata python manage.py migrate\n   131→\n   132→# Create superuser\n   133→docker compose exec fowldata python manage.py createsuperuser\n   134→\n   135→# Django shell\n   136→docker compose exec fowldata python manage.py shell\n   137→```\n   138→\n   139→#### Adding New Models\n   140→```python\n   141→# hunts/models.py\n   142→class NewModel(models.Model):\n   143→    name = models.CharField(max_length=255)\n   144→    created_at = models.DateTimeField(auto_now_add=True)\n   145→    \n   146→    class Meta:\n   147→        db_table = 'hunts_newmodel'\n   148→        \n   149→    def __str__(self):\n   150→        return self.name\n   151→```\n   152→\n   153→```bash\n   154→# Generate and apply migration\n   155→docker compose exec fowldata python manage.py makemigrations hunts\n   156→docker compose exec fowldata python manage.py migrate\n   157→```\n   158→\n   159→#### Creating API Endpoints\n   160→```python\n   161→# hunts/api_views.py\n   162→from rest_framework.decorators import api_view, permission_classes\n   163→from rest_framework.permissions import IsAuthenticated\n   164→from rest_framework.response import Response\n   165→\n   166→@api_view(['GET', 'POST'])\n   167→@permission_classes([IsAuthenticated])\n   168→def new_endpoint(request):\n   169→    if request.method == 'GET':\n   170→        # Handle GET request\n   171→        return Response({'data': 'success'})\n   172→    elif request.method == 'POST':\n   173→        # Handle POST request\n   174→        return Response({'created': True}, status=201)\n   175→```\n   176→\n   177→```python\n   178→# hunts/urls.py\n   179→urlpatterns = [\n   180→    path('new-endpoint/', views.new_endpoint, name='new-endpoint'),\n   181→]\n   182→```\n   183→\n   184→#### Adding Tests\n   185→```python\n   186→# hunts/tests/test_new_feature.py\n   187→import pytest\n   188→from django.urls import reverse\n   189→from rest_framework.test import APIClient\n   190→\n   191→@pytest.mark.django_db\n   192→def test_new_endpoint(authenticated_client):\n   193→    response = authenticated_client.get(reverse('new-endpoint'))\n   194→    assert response.status_code == 200\n   195→    assert response.json()['data'] == 'success'\n   196→```\n   197→\n   198→### Backend Code Style\n   199→\n   200→#### Python Formatting\n   201→```bash\n   202→# Format code\n   203→docker compose exec fowldata black .\n   204→\n   205→# Check linting\n   206→docker compose exec fowldata flake8\n   207→\n   208→# Import sorting\n   209→docker compose exec fowldata isort .\n   210→```\n   211→\n   212→#### Django Best Practices\n   213→- Use Django ORM instead of raw SQL\n   214→- Implement proper error handling\n   215→- Add logging for debugging\n   216→- Use select_related/prefetch_related for performance\n   217→- Follow REST API conventions\n   218→\n   219→```python\n   220→# Good: Optimized query\n   221→hunts = Hunt.objects.select_related('user').prefetch_related('birds', 'photos')\n   222→\n   223→# Good: Proper error handling\n   224→try:\n   225→    hunt = Hunt.objects.get(id=hunt_id, user=request.user)\n   226→except Hunt.DoesNotExist:\n   227→    return Response({'error': 'Hunt not found'}, status=404)\n   228→\n   229→# Good: Logging\n   230→import logging\n   231→logger = logging.getLogger(__name__)\n   232→\n   233→def create_hunt(request):\n   234→    logger.info(f\"Creating hunt for user {request.user.id}\")\n   235→    # ... implementation\n   236→```\n   237→\n   238→## Frontend Development (Next.js)\n   239→\n   240→### Project Structure\n   241→```\n   242→frontend/\n   243→├── src/\n   244→│   ├── app/                  # Next.js app router\n   245→│   │   ├── (auth)/          # Authentication routes\n   246→│   │   ├── dashboard/       # Dashboard pages\n   247→│   │   └── api/auth/        # NextAuth configuration\n   248→│   ├── components/          # Reusable components\n   249→│   │   ├── ui/              # Basic UI components\n   250→│   │   ├── forms/           # Form components\n   251→│   │   └── maps/            # Map components\n   252→│   ├── lib/                 # Utilities and helpers\n   253→│   │   ├── api/             # API client\n   254→│   │   ├── types/           # TypeScript types\n   255→│   │   └── utils/           # Utility functions\n   256→│   └── styles/              # CSS and styling\n   257→├── public/                  # Static assets\n   258→├── e2e/                     # Playwright E2E tests\n   259→└── src/__tests__/           # Jest unit tests\n   260→```\n   261→\n   262→### Common Development Tasks\n   263→\n   264→#### Creating Components\n   265→```typescript\n   266→// src/components/HuntCard.tsx\n   267→interface HuntCardProps {\n   268→  hunt: Hunt;\n   269→  onEdit?: (hunt: Hunt) => void;\n   270→  onDelete?: (huntId: string) => void;\n   271→}\n   272→\n   273→export default function HuntCard({ hunt, onEdit, onDelete }: HuntCardProps) {\n   274→  return (\n   275→    <div className=\"bg-white rounded-lg shadow-md p-4\">\n   276→      <h3 className=\"text-lg font-semibold\">{hunt.location}</h3>\n   277→      <p className=\"text-gray-600\">{hunt.date_of_hunt}</p>\n   278→      \n   279→      <div className=\"mt-4 flex gap-2\">\n   280→        {onEdit && (\n   281→          <button \n   282→            onClick={() => onEdit(hunt)}\n   283→            className=\"px-3 py-1 bg-blue-500 text-white rounded\"\n   284→          >\n   285→            Edit\n   286→          </button>\n   287→        )}\n   288→        {onDelete && (\n   289→          <button \n   290→            onClick={() => onDelete(hunt.id)}\n   291→            className=\"px-3 py-1 bg-red-500 text-white rounded\"\n   292→          >\n   293→            Delete\n   294→          </button>\n   295→        )}\n   296→      </div>\n   297→    </div>\n   298→  );\n   299→}\n   300→```\n   301→\n   302→#### Adding Pages\n   303→```typescript\n   304→// src/app/hunts/page.tsx\n   305→import { Metadata } from 'next';\n   306→import HuntsList from '@/components/HuntsList';\n   307→\n   308→export const metadata: Metadata = {\n   309→  title: 'My Hunts - FowlData',\n   310→  description: 'View and manage your hunting sessions',\n   311→};\n   312→\n   313→export default function HuntsPage() {\n   314→  return (\n   315→    <div className=\"container mx-auto px-4 py-8\">\n   316→      <h1 className=\"text-3xl font-bold mb-8\">My Hunts</h1>\n   317→      <HuntsList />\n   318→    </div>\n   319→  );\n   320→}\n   321→```\n   322→\n   323→#### API Integration\n   324→```typescript\n   325→// src/lib/api/hunts.ts\n   326→import { apiClient } from './client';\n   327→import type { Hunt, CreateHuntRequest } from '@/lib/types/api';\n   328→\n   329→export const huntsApi = {\n   330→  async getHunts(): Promise<Hunt[]> {\n   331→    const response = await apiClient.get('/hunts/');\n   332→    return response.json();\n   333→  },\n   334→\n   335→  async createHunt(huntData: CreateHuntRequest): Promise<Hunt> {\n   336→    const response = await apiClient.post('/hunts/', huntData);\n   337→    return response.json();\n   338→  },\n   339→\n   340→  async updateHunt(huntId: string, huntData: Partial<Hunt>): Promise<Hunt> {\n   341→    const response = await apiClient.put(`/hunts/${huntId}/`, huntData);\n   342→    return response.json();\n   343→  },\n   344→\n   345→  async deleteHunt(huntId: string): Promise<void> {\n   346→    await apiClient.delete(`/hunts/${huntId}/`);\n   347→  },\n   348→};\n   349→```\n   350→\n   351→#### Forms with React Hook Form\n   352→```typescript\n   353→// src/components/forms/HuntForm.tsx\n   354→import { useForm } from 'react-hook-form';\n   355→import { zodResolver } from '@hookform/resolvers/zod';\n   356→import { z } from 'zod';\n   357→\n   358→const huntSchema = z.object({\n   359→  date_of_hunt: z.string().min(1, 'Date is required'),\n   360→  latitude: z.number().min(-90).max(90),\n   361→  longitude: z.number().min(-180).max(180),\n   362→  notes: z.string().optional(),\n   363→});\n   364→\n   365→type HuntFormData = z.infer<typeof huntSchema>;\n   366→\n   367→export default function HuntForm({ onSubmit }: { onSubmit: (data: HuntFormData) => void }) {\n   368→  const { register, handleSubmit, formState: { errors } } = useForm<HuntFormData>({\n   369→    resolver: zodResolver(huntSchema),\n   370→  });\n   371→\n   372→  return (\n   373→    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n   374→      <div>\n   375→        <label htmlFor=\"date_of_hunt\" className=\"block text-sm font-medium text-gray-700\">\n   376→          Hunt Date\n   377→        </label>\n   378→        <input\n   379→          {...register('date_of_hunt')}\n   380→          type=\"date\"\n   381→          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\"\n   382→        />\n   383→        {errors.date_of_hunt && (\n   384→          <p className=\"mt-1 text-sm text-red-600\">{errors.date_of_hunt.message}</p>\n   385→        )}\n   386→      </div>\n   387→      \n   388→      <button type=\"submit\" className=\"bg-blue-500 text-white px-4 py-2 rounded\">\n   389→        Save Hunt\n   390→      </button>\n   391→    </form>\n   392→  );\n   393→}\n   394→```\n   395→\n   396→### Frontend Code Style\n   397→\n   398→#### TypeScript Configuration\n   399→```bash\n   400→# Type checking\n   401→npx tsc --noEmit\n   402→\n   403→# Linting\n   404→npm run lint\n   405→\n   406→# Formatting\n   407→npx prettier --write .\n   408→```\n   409→\n   410→#### Component Patterns\n   411→```typescript\n   412→// Use proper TypeScript interfaces\n   413→interface Props {\n   414→  title: string;\n   415→  children: React.ReactNode;\n   416→  onAction?: () => void;\n   417→}\n   418→\n   419→// Use proper default exports for pages/components\n   420→export default function Component({ title, children, onAction }: Props) {\n   421→  return (\n   422→    <div>\n   423→      <h1>{title}</h1>\n   424→      {children}\n   425→      {onAction && <button onClick={onAction}>Action</button>}\n   426→    </div>\n   427→  );\n   428→}\n   429→\n   430→// Use proper error boundaries\n   431→import { ErrorBoundary } from 'react-error-boundary';\n   432→\n   433→function ErrorFallback({ error }: { error: Error }) {\n   434→  return (\n   435→    <div role=\"alert\" className=\"p-4 bg-red-50 border border-red-200 rounded\">\n   436→      <h2 className=\"text-red-800\">Something went wrong:</h2>\n   437→      <pre className=\"text-red-600\">{error.message}</pre>\n   438→    </div>\n   439→  );\n   440→}\n   441→\n   442→// Wrap components that might error\n   443→<ErrorBoundary FallbackComponent={ErrorFallback}>\n   444→  <SomeComponent />\n   445→</ErrorBoundary>\n   446→```\n   447→\n   448→## Development Best Practices\n   449→\n   450→### Code Quality\n   451→\n   452→#### Pre-commit Checks\n   453→```bash\n   454→# Run before committing\n   455→./testlint-quick               # Quick validation\n   456→npm run lint                   # Code quality\n   457→git add . && git commit        # Commit if all pass\n   458→```\n   459→\n   460→#### Code Review Checklist\n   461→- [ ] **Functionality**: Code works as intended\n   462→- [ ] **Tests**: Adequate test coverage\n   463→- [ ] **Performance**: No obvious performance issues\n   464→- [ ] **Security**: No security vulnerabilities\n   465→- [ ] **Documentation**: Code is well-documented\n   466→- [ ] **Style**: Follows project conventions\n   467→\n   468→### Git Workflow\n   469→\n   470→#### Commit Message Format\n   471→```\n   472→feat: Add hunt sharing functionality\n   473→fix: Resolve photo upload timeout issue\n   474→docs: Update API documentation\n   475→test: Add weather API integration tests\n   476→refactor: Simplify authentication middleware\n   477→perf: Optimize hunt query performance\n   478→```\n   479→\n   480→#### Pull Request Process\n   481→1. **Create Feature Branch**: `git checkout -b feature/description`\n   482→2. **Implement Changes**: Make focused, atomic commits\n   483→3. **Add Tests**: Ensure adequate test coverage\n   484→4. **Update Documentation**: Update relevant docs\n   485→5. **Run Full Tests**: `./testlint` before creating PR\n   486→6. **Create PR**: Use descriptive title and detailed description\n   487→7. **Code Review**: Address feedback promptly\n   488→8. **Merge**: Squash and merge when approved\n   489→\n   490→### Debugging\n   491→\n   492→#### Backend Debugging\n   493→```bash\n   494→# Django shell with IPython\n   495→docker compose exec fowldata python manage.py shell\n   496→\n   497→# View logs\n   498→docker compose logs fowldata\n   499→\n   500→# Debug specific tests\n   501→docker compose exec fowldata python -m pytest -s --pdb test_file.py::test_function\n   502→\n   503→# Database inspection\n   504→docker compose exec fowldata python manage.py dbshell\n   505→```\n   506→\n   507→#### Frontend Debugging\n   508→```bash\n   509→# Browser dev tools for React components\n   510→# React Developer Tools extension\n   511→\n   512→# Debug API calls\n   513→# Check Network tab in browser dev tools\n   514→\n   515→# Debug tests\n   516→npm test -- --no-coverage --verbose\n   517→\n   518→# Debug Playwright tests\n   519→npm run test:e2e -- --debug\n   520→```\n   521→\n   522→### Environment Management\n   523→\n   524→#### Development Environment Variables\n   525→```bash\n   526→# .env.local (Backend)\n   527→DEBUG=True\n   528→SECRET_KEY=development-secret-key\n   529→DB_HOST=localhost\n   530→WEATHERAPI_KEY=your-development-key\n   531→AWS_ACCESS_KEY_ID=your-dev-key\n   532→\n   533→# frontend/.env.local (Frontend)\n   534→NEXTAUTH_URL=http://localhost:3000\n   535→NEXT_PUBLIC_API_URL=http://localhost:8000\n   536→NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your-mapbox-token\n   537→```\n   538→\n   539→#### Service Dependencies\n   540→```bash\n   541→# Check all services are running\n   542→docker compose ps\n   543→\n   544→# Restart individual services\n   545→docker compose restart fowldata\n   546→docker compose restart postgres\n   547→\n   548→# View service logs\n   549→docker compose logs -f fowldata\n   550→```\n   551→\n   552→### Performance Optimization\n   553→\n   554→#### Backend Performance\n   555→- **Database Queries**: Use select_related and prefetch_related\n   556→- **Caching**: Implement Redis caching for frequent queries\n   557→- **API Pagination**: Paginate large result sets\n   558→- **Background Tasks**: Use Celery for heavy operations\n   559→\n   560→```python\n   561→# Good: Optimized query\n   562→hunts = Hunt.objects.select_related('user').prefetch_related(\n   563→    'birds', 'photos', 'location'\n   564→).filter(user=request.user)\n   565→\n   566→# Good: Pagination\n   567→from rest_framework.pagination import PageNumberPagination\n   568→\n   569→class HuntPagination(PageNumberPagination):\n   570→    page_size = 20\n   571→    page_size_query_param = 'page_size'\n   572→    max_page_size = 100\n   573→```\n   574→\n   575→#### Frontend Performance\n   576→- **Code Splitting**: Use dynamic imports for large components\n   577→- **Image Optimization**: Use Next.js Image component\n   578→- **Lazy Loading**: Implement virtualization for long lists\n   579→- **Bundle Analysis**: Monitor bundle size\n   580→\n   581→```typescript\n   582→// Good: Code splitting\n   583→const MapComponent = dynamic(() => import('@/components/MapComponent'), {\n   584→  loading: () => <p>Loading map...</p>,\n   585→  ssr: false, // Disable SSR for map components\n   586→});\n   587→\n   588→// Good: Image optimization\n   589→import Image from 'next/image';\n   590→\n   591→<Image\n   592→  src=\"/hunt-photo.jpg\"\n   593→  alt=\"Hunt location\"\n   594→  width={400}\n   595→  height={300}\n   596→  priority={isAboveFold}\n   597→/>\n   598→```\n   599→\n   600→## Tools and Extensions\n   601→\n   602→### Recommended VS Code Extensions\n   603→```json\n   604→{\n   605→  \"recommendations\": [\n   606→    \"ms-python.python\",\n   607→    \"ms-python.black-formatter\",\n   608→    \"bradlc.vscode-tailwindcss\",\n   609→    \"esbenp.prettier-vscode\",\n   610→    \"ms-vscode.vscode-typescript-next\",\n   611→    \"ms-azuretools.vscode-docker\",\n   612→    \"github.copilot\"\n   613→  ]\n   614→}\n   615→```\n   616→\n   617→### Development Scripts\n   618→```bash\n   619→# Package.json scripts\n   620→npm run dev              # Start development server\n   621→npm run build            # Build for production\n   622→npm run test             # Run tests\n   623→npm run test:watch       # Run tests in watch mode\n   624→npm run test:e2e         # Run E2E tests\n   625→npm run lint             # Run ESLint\n   626→npm run type-check       # Run TypeScript checks\n   627→```\n   628→\n   629→### Useful Development Commands\n   630→```bash\n   631→# Database reset and reload\n   632→docker compose down -v && docker compose up -d\n   633→docker compose exec fowldata python manage.py migrate\n   634→\n   635→# Clear all caches\n   636→docker compose exec redis redis-cli FLUSHALL\n   637→rm -rf frontend/.next\n   638→npm run build\n   639→\n   640→# Monitor file changes\n   641→docker compose logs -f fowldata  # Backend logs\n   642→npm run dev                      # Frontend with hot reload\n   643→```\n   644→\n   645→## Troubleshooting\n   646→\n   647→### Common Issues\n   648→\n   649→#### Port Conflicts\n   650→```bash\n   651→# Check what's using ports\n   652→lsof -i :3000  # Frontend\n   653→lsof -i :8000  # Backend\n   654→lsof -i :5432  # PostgreSQL\n   655→\n   656→# Kill processes or change ports\n   657→```\n   658→\n   659→#### Docker Issues\n   660→```bash\n   661→# Reset Docker environment\n   662→docker compose down -v\n   663→docker system prune -f\n   664→docker compose up -d --build\n   665→```\n   666→\n   667→#### Database Issues\n   668→```bash\n   669→# Reset database\n   670→docker compose down -v\n   671→docker compose up -d\n   672→docker compose exec fowldata python manage.py migrate\n   673→```\n   674→\n   675→#### Frontend Build Issues\n   676→```bash\n   677→# Clear cache and reinstall\n   678→rm -rf node_modules package-lock.json .next\n   679→npm install\n   680→npm run build\n   681→```\n   682→\n   683→### Getting Help\n   684→\n   685→1. **Check Documentation**: Review relevant docs section\n   686→2. **Search Issues**: Look for similar problems in the repository\n   687→3. **Run Health Checks**: Use built-in diagnostic tools\n   688→4. **Check Logs**: Review service logs for error details\n   689→5. **Ask for Help**: Create detailed issue with reproduction steps\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"81d4b854-6ef0-42e1-a4c6-4bcf32ca515d","timestamp":"2025-08-25T04:39:26.450Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/markelmore/_code/fowldata/docs/development.md","content":"# 💻 Development Guide\n\nComplete development workflow and best practices for FowlData development.\n\n## Development Environment Setup\n\n### Prerequisites\n- **Docker** and **Docker Compose** (latest version)\n- **Node.js** 18+ with npm\n- **Git** for version control\n- **VS Code** (recommended) with extensions:\n  - Python\n  - TypeScript and JavaScript\n  - Tailwind CSS IntelliSense\n  - Docker\n  - Prettier\n\n### Quick Start\n```bash\n# Clone and setup\ngit clone [repository-url]\ncd fowldata\n\n# Environment files\ncp .env.example .env.local\ncp frontend/.env.example frontend/.env.local\n\n# Start development\ndocker compose up -d\ncd frontend && npm run dev\n```\n\n## Development Workflow\n\n### Daily Development Routine\n\n1. **Start Services**\n   ```bash\n   docker compose up -d          # Backend services\n   cd frontend && npm run dev    # Frontend development server\n   ```\n\n2. **Check Service Health**\n   ```bash\n   docker compose ps             # Verify all services running\n   curl http://localhost:8000/api/  # Test backend API\n   curl http://localhost:3000    # Test frontend\n   ```\n\n3. **Make Changes**\n   - Edit code in your preferred editor\n   - Backend changes auto-reload with Django\n   - Frontend changes auto-reload with Next.js\n\n4. **Test Changes**\n   ```bash\n   ./testlint-quick             # Quick validation\n   npm run test:watch           # Frontend test watch mode\n   ```\n\n5. **Commit Work**\n   ```bash\n   git add .\n   git commit -m \"descriptive commit message\"\n   git push origin branch-name\n   ```\n\n### Branch Strategy\n\n#### Branch Types\n- **`main`**: Production-ready code\n- **`feature/feature-name`**: New features\n- **`fix/issue-description`**: Bug fixes\n- **`refactor/component-name`**: Code refactoring\n- **`test/test-improvements`**: Test enhancements\n\n#### Workflow\n```bash\n# Create feature branch\ngit checkout -b feature/user-hunt-sharing\ngit push -u origin feature/user-hunt-sharing\n\n# Work on feature...\ngit add .\ngit commit -m \"feat: Add hunt sharing functionality\"\n\n# Keep up to date with main\ngit fetch origin\ngit rebase origin/main\n\n# Create pull request\ngh pr create --title \"Add hunt sharing\" --body \"Implements user hunt sharing with privacy controls\"\n```\n\n## Backend Development (Django)\n\n### Project Structure\n```\nfowldata/\n├── fowldata/\n│   ├── settings.py           # Django configuration\n│   ├── urls.py              # Root URL configuration\n│   └── wsgi.py              # WSGI configuration\n├── accounts/                # User management app\n│   ├── models.py            # User and profile models\n│   ├── views.py             # Authentication views\n│   ├── authentication.py    # NextAuth JWT backend\n│   └── tests/               # Authentication tests\n├── hunts/                   # Core hunt functionality\n│   ├── models.py            # Hunt, Bird, Photo models\n│   ├── api_views.py         # REST API endpoints\n│   ├── s3_manager.py        # S3 integration\n│   ├── tasks.py             # Background tasks\n│   └── tests/               # Hunt functionality tests\n└── manage.py                # Django management\n```\n\n### Common Development Tasks\n\n#### Database Operations\n```bash\n# Create migrations\ndocker compose exec fowldata python manage.py makemigrations\n\n# Apply migrations\ndocker compose exec fowldata python manage.py migrate\n\n# Reset database (development)\ndocker compose exec fowldata python manage.py flush\ndocker compose exec fowldata python manage.py migrate\n\n# Create superuser\ndocker compose exec fowldata python manage.py createsuperuser\n\n# Django shell\ndocker compose exec fowldata python manage.py shell\n```\n\n#### Adding New Models\n```python\n# hunts/models.py\nclass NewModel(models.Model):\n    name = models.CharField(max_length=255)\n    created_at = models.DateTimeField(auto_now_add=True)\n    \n    class Meta:\n        db_table = 'hunts_newmodel'\n        \n    def __str__(self):\n        return self.name\n```\n\n```bash\n# Generate and apply migration\ndocker compose exec fowldata python manage.py makemigrations hunts\ndocker compose exec fowldata python manage.py migrate\n```\n\n#### Creating API Endpoints\n```python\n# hunts/api_views.py\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\n\n@api_view(['GET', 'POST'])\n@permission_classes([IsAuthenticated])\ndef new_endpoint(request):\n    if request.method == 'GET':\n        # Handle GET request\n        return Response({'data': 'success'})\n    elif request.method == 'POST':\n        # Handle POST request\n        return Response({'created': True}, status=201)\n```\n\n```python\n# hunts/urls.py\nurlpatterns = [\n    path('new-endpoint/', views.new_endpoint, name='new-endpoint'),\n]\n```\n\n#### Adding Tests\n```python\n# hunts/tests/test_new_feature.py\nimport pytest\nfrom django.urls import reverse\nfrom rest_framework.test import APIClient\n\n@pytest.mark.django_db\ndef test_new_endpoint(authenticated_client):\n    response = authenticated_client.get(reverse('new-endpoint'))\n    assert response.status_code == 200\n    assert response.json()['data'] == 'success'\n```\n\n### Backend Code Style\n\n#### Python Formatting\n```bash\n# Format code\ndocker compose exec fowldata black .\n\n# Check linting\ndocker compose exec fowldata flake8\n\n# Import sorting\ndocker compose exec fowldata isort .\n```\n\n#### Django Best Practices\n- Use Django ORM instead of raw SQL\n- Implement proper error handling\n- Add logging for debugging\n- Use select_related/prefetch_related for performance\n- Follow REST API conventions\n\n```python\n# Good: Optimized query\nhunts = Hunt.objects.select_related('user').prefetch_related('birds', 'photos')\n\n# Good: Proper error handling\ntry:\n    hunt = Hunt.objects.get(id=hunt_id, user=request.user)\nexcept Hunt.DoesNotExist:\n    return Response({'error': 'Hunt not found'}, status=404)\n\n# Good: Logging\nimport logging\nlogger = logging.getLogger(__name__)\n\ndef create_hunt(request):\n    logger.info(f\"Creating hunt for user {request.user.id}\")\n    # ... implementation\n```\n\n## Frontend Development (Next.js)\n\n### Project Structure\n```\nfrontend/\n├── src/\n│   ├── app/                  # Next.js app router\n│   │   ├── (auth)/          # Authentication routes\n│   │   ├── dashboard/       # Dashboard pages\n│   │   └── api/auth/        # NextAuth configuration\n│   ├── components/          # Reusable components\n│   │   ├── ui/              # Basic UI components\n│   │   ├── forms/           # Form components\n│   │   └── maps/            # Map components\n│   ├── lib/                 # Utilities and helpers\n│   │   ├── api/             # API client\n│   │   ├── types/           # TypeScript types\n│   │   └── utils/           # Utility functions\n│   └── styles/              # CSS and styling\n├── public/                  # Static assets\n├── e2e/                     # Playwright E2E tests\n└── src/__tests__/           # Jest unit tests\n```\n\n### Common Development Tasks\n\n#### Creating Components\n```typescript\n// src/components/HuntCard.tsx\ninterface HuntCardProps {\n  hunt: Hunt;\n  onEdit?: (hunt: Hunt) => void;\n  onDelete?: (huntId: string) => void;\n}\n\nexport default function HuntCard({ hunt, onEdit, onDelete }: HuntCardProps) {\n  return (\n    <div className=\"bg-white rounded-lg shadow-md p-4\">\n      <h3 className=\"text-lg font-semibold\">{hunt.location}</h3>\n      <p className=\"text-gray-600\">{hunt.date_of_hunt}</p>\n      \n      <div className=\"mt-4 flex gap-2\">\n        {onEdit && (\n          <button \n            onClick={() => onEdit(hunt)}\n            className=\"px-3 py-1 bg-blue-500 text-white rounded\"\n          >\n            Edit\n          </button>\n        )}\n        {onDelete && (\n          <button \n            onClick={() => onDelete(hunt.id)}\n            className=\"px-3 py-1 bg-red-500 text-white rounded\"\n          >\n            Delete\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n```\n\n#### Adding Pages\n```typescript\n// src/app/hunts/page.tsx\nimport { Metadata } from 'next';\nimport HuntsList from '@/components/HuntsList';\n\nexport const metadata: Metadata = {\n  title: 'My Hunts - FowlData',\n  description: 'View and manage your hunting sessions',\n};\n\nexport default function HuntsPage() {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold mb-8\">My Hunts</h1>\n      <HuntsList />\n    </div>\n  );\n}\n```\n\n#### API Integration\n```typescript\n// src/lib/api/hunts.ts\nimport { apiClient } from './client';\nimport type { Hunt, CreateHuntRequest } from '@/lib/types/api';\n\nexport const huntsApi = {\n  async getHunts(): Promise<Hunt[]> {\n    const response = await apiClient.get('/hunts/');\n    return response.json();\n  },\n\n  async createHunt(huntData: CreateHuntRequest): Promise<Hunt> {\n    const response = await apiClient.post('/hunts/', huntData);\n    return response.json();\n  },\n\n  async updateHunt(huntId: string, huntData: Partial<Hunt>): Promise<Hunt> {\n    const response = await apiClient.put(`/hunts/${huntId}/`, huntData);\n    return response.json();\n  },\n\n  async deleteHunt(huntId: string): Promise<void> {\n    await apiClient.delete(`/hunts/${huntId}/`);\n  },\n};\n```\n\n#### Forms with React Hook Form\n```typescript\n// src/components/forms/HuntForm.tsx\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\n\nconst huntSchema = z.object({\n  date_of_hunt: z.string().min(1, 'Date is required'),\n  latitude: z.number().min(-90).max(90),\n  longitude: z.number().min(-180).max(180),\n  notes: z.string().optional(),\n});\n\ntype HuntFormData = z.infer<typeof huntSchema>;\n\nexport default function HuntForm({ onSubmit }: { onSubmit: (data: HuntFormData) => void }) {\n  const { register, handleSubmit, formState: { errors } } = useForm<HuntFormData>({\n    resolver: zodResolver(huntSchema),\n  });\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n      <div>\n        <label htmlFor=\"date_of_hunt\" className=\"block text-sm font-medium text-gray-700\">\n          Hunt Date\n        </label>\n        <input\n          {...register('date_of_hunt')}\n          type=\"date\"\n          className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\"\n        />\n        {errors.date_of_hunt && (\n          <p className=\"mt-1 text-sm text-red-600\">{errors.date_of_hunt.message}</p>\n        )}\n      </div>\n      \n      <button type=\"submit\" className=\"bg-blue-500 text-white px-4 py-2 rounded\">\n        Save Hunt\n      </button>\n    </form>\n  );\n}\n```\n\n### Frontend Code Style\n\n#### TypeScript Configuration\n```bash\n# Type checking\nnpx tsc --noEmit\n\n# Linting\nnpm run lint\n\n# Formatting\nnpx prettier --write .\n```\n\n#### Component Patterns\n```typescript\n// Use proper TypeScript interfaces\ninterface Props {\n  title: string;\n  children: React.ReactNode;\n  onAction?: () => void;\n}\n\n// Use proper default exports for pages/components\nexport default function Component({ title, children, onAction }: Props) {\n  return (\n    <div>\n      <h1>{title}</h1>\n      {children}\n      {onAction && <button onClick={onAction}>Action</button>}\n    </div>\n  );\n}\n\n// Use proper error boundaries\nimport { ErrorBoundary } from 'react-error-boundary';\n\nfunction ErrorFallback({ error }: { error: Error }) {\n  return (\n    <div role=\"alert\" className=\"p-4 bg-red-50 border border-red-200 rounded\">\n      <h2 className=\"text-red-800\">Something went wrong:</h2>\n      <pre className=\"text-red-600\">{error.message}</pre>\n    </div>\n  );\n}\n\n// Wrap components that might error\n<ErrorBoundary FallbackComponent={ErrorFallback}>\n  <SomeComponent />\n</ErrorBoundary>\n```\n\n## Development Best Practices\n\n### Code Quality\n\n#### Pre-commit Checks\n```bash\n# Run before committing\n./testlint-quick               # Quick validation\nnpm run lint                   # Code quality\ngit add . && git commit        # Commit if all pass\n```\n\n#### Code Review Checklist\n- [ ] **Functionality**: Code works as intended\n- [ ] **Tests**: Adequate test coverage\n- [ ] **Performance**: No obvious performance issues\n- [ ] **Security**: No security vulnerabilities\n- [ ] **Documentation**: Code is well-documented\n- [ ] **Style**: Follows project conventions\n\n### Git Workflow\n\n#### Commit Message Format\n```\nfeat: Add hunt sharing functionality\nfix: Resolve photo upload timeout issue\ndocs: Update API documentation\ntest: Add weather API integration tests\nrefactor: Simplify authentication middleware\nperf: Optimize hunt query performance\n```\n\n#### Pull Request Process\n1. **Create Feature Branch**: `git checkout -b feature/description`\n2. **Implement Changes**: Make focused, atomic commits\n3. **Add Tests**: Ensure adequate test coverage\n4. **Update Documentation**: Update relevant docs\n5. **Run Full Tests**: `./testlint` before creating PR\n6. **Create PR**: Use descriptive title and detailed description\n7. **Code Review**: Address feedback promptly\n8. **Merge**: Squash and merge when approved\n\n### Debugging\n\n#### Backend Debugging\n```bash\n# Django shell with IPython\ndocker compose exec fowldata python manage.py shell\n\n# View logs\ndocker compose logs fowldata\n\n# Debug specific tests\ndocker compose exec fowldata python -m pytest -s --pdb test_file.py::test_function\n\n# Database inspection\ndocker compose exec fowldata python manage.py dbshell\n```\n\n#### Frontend Debugging\n```bash\n# Browser dev tools for React components\n# React Developer Tools extension\n\n# Debug API calls\n# Check Network tab in browser dev tools\n\n# Debug tests\nnpm test -- --no-coverage --verbose\n\n# Debug Playwright tests\nnpm run test:e2e -- --debug\n```\n\n### Environment Management\n\n#### Development Environment Variables\n```bash\n# .env.local (Backend)\nDEBUG=True\nSECRET_KEY=development-secret-key\nDB_HOST=localhost\nWEATHERAPI_KEY=your-development-key\nAWS_ACCESS_KEY_ID=your-dev-key\n\n# frontend/.env.local (Frontend)\nNEXTAUTH_URL=http://localhost:3000\nNEXT_PUBLIC_API_URL=http://localhost:8000\nNEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your-mapbox-token\n```\n\n#### Service Dependencies\n```bash\n# Check all services are running\ndocker compose ps\n\n# Restart individual services\ndocker compose restart fowldata\ndocker compose restart postgres\n\n# View service logs\ndocker compose logs -f fowldata\n```\n\n### Performance Optimization\n\n#### Backend Performance\n- **Database Queries**: Use select_related and prefetch_related\n- **Caching**: Implement Redis caching for frequent queries\n- **API Pagination**: Paginate large result sets\n- **Background Tasks**: Use Celery for heavy operations\n\n```python\n# Good: Optimized query\nhunts = Hunt.objects.select_related('user').prefetch_related(\n    'birds', 'photos', 'location'\n).filter(user=request.user)\n\n# Good: Pagination\nfrom rest_framework.pagination import PageNumberPagination\n\nclass HuntPagination(PageNumberPagination):\n    page_size = 20\n    page_size_query_param = 'page_size'\n    max_page_size = 100\n```\n\n#### Frontend Performance\n- **Code Splitting**: Use dynamic imports for large components\n- **Image Optimization**: Use Next.js Image component\n- **Lazy Loading**: Implement virtualization for long lists\n- **Bundle Analysis**: Monitor bundle size\n\n```typescript\n// Good: Code splitting\nconst MapComponent = dynamic(() => import('@/components/MapComponent'), {\n  loading: () => <p>Loading map...</p>,\n  ssr: false, // Disable SSR for map components\n});\n\n// Good: Image optimization\nimport Image from 'next/image';\n\n<Image\n  src=\"/hunt-photo.jpg\"\n  alt=\"Hunt location\"\n  width={400}\n  height={300}\n  priority={isAboveFold}\n/>\n```\n\n## Tools and Extensions\n\n### Recommended VS Code Extensions\n```json\n{\n  \"recommendations\": [\n    \"ms-python.python\",\n    \"ms-python.black-formatter\",\n    \"bradlc.vscode-tailwindcss\",\n    \"esbenp.prettier-vscode\",\n    \"ms-vscode.vscode-typescript-next\",\n    \"ms-azuretools.vscode-docker\",\n    \"github.copilot\"\n  ]\n}\n```\n\n### Development Scripts\n```bash\n# Package.json scripts\nnpm run dev              # Start development server\nnpm run build            # Build for production\nnpm run test             # Run tests\nnpm run test:watch       # Run tests in watch mode\nnpm run test:e2e         # Run E2E tests\nnpm run lint             # Run ESLint\nnpm run type-check       # Run TypeScript checks\n```\n\n### Useful Development Commands\n```bash\n# Database reset and reload\ndocker compose down -v && docker compose up -d\ndocker compose exec fowldata python manage.py migrate\n\n# Clear all caches\ndocker compose exec redis redis-cli FLUSHALL\nrm -rf frontend/.next\nnpm run build\n\n# Monitor file changes\ndocker compose logs -f fowldata  # Backend logs\nnpm run dev                      # Frontend with hot reload\n```\n\n## Troubleshooting\n\n### Common Issues\n\n#### Port Conflicts\n```bash\n# Check what's using ports\nlsof -i :3000  # Frontend\nlsof -i :8000  # Backend\nlsof -i :5432  # PostgreSQL\n\n# Kill processes or change ports\n```\n\n#### Docker Issues\n```bash\n# Reset Docker environment\ndocker compose down -v\ndocker system prune -f\ndocker compose up -d --build\n```\n\n#### Database Issues\n```bash\n# Reset database\ndocker compose down -v\ndocker compose up -d\ndocker compose exec fowldata python manage.py migrate\n```\n\n#### Frontend Build Issues\n```bash\n# Clear cache and reinstall\nrm -rf node_modules package-lock.json .next\nnpm install\nnpm run build\n```\n\n### Getting Help\n\n1. **Check Documentation**: Review relevant docs section\n2. **Search Issues**: Look for similar problems in the repository\n3. **Run Health Checks**: Use built-in diagnostic tools\n4. **Check Logs**: Review service logs for error details\n5. **Ask for Help**: Create detailed issue with reproduction steps","numLines":689,"startLine":1,"totalLines":689}}}
{"parentUuid":"81d4b854-6ef0-42e1-a4c6-4bcf32ca515d","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01K7f4iup3GyanzBqSbASoZh","type":"tool_result","content":"     1→# Deployment Guide\n     2→\n     3→This guide covers deploying FowlData to production environments, with detailed instructions for Digital Ocean deployment.\n     4→\n     5→## Overview\n     6→\n     7→FowlData supports multiple deployment strategies:\n     8→- **Digital Ocean Droplets** (Recommended) - Complete setup guide included\n     9→- **Docker Compose** - Self-hosted on any Docker-compatible server\n    10→- **Container Orchestration** - Kubernetes, Docker Swarm (advanced)\n    11→\n    12→## Digital Ocean Deployment (Recommended)\n    13→\n    14→For complete Digital Ocean deployment instructions, see [DIGITAL_OCEAN_DEPLOYMENT.md](./DIGITAL_OCEAN_DEPLOYMENT.md).\n    15→\n    16→### Quick Digital Ocean Setup\n    17→\n    18→1. **Create Droplet** (minimum 2GB RAM, Ubuntu 22.04)\n    19→2. **Install Dependencies**:\n    20→   ```bash\n    21→   apt update && apt upgrade -y\n    22→   apt install docker.io docker-compose git curl -y\n    23→   ```\n    24→3. **Deploy Application**:\n    25→   ```bash\n    26→   git clone https://github.com/elmorem/fowldata.git\n    27→   cd fowldata\n    28→   ./scripts/validate-production.sh\n    29→   docker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n    30→   ```\n    31→\n    32→## Production Architecture\n    33→\n    34→```\n    35→Internet → Nginx (SSL/Reverse Proxy) → Frontend (Next.js) → Backend (Django) → PostgreSQL + PostGIS\n    36→                                     → Redis (Caching)\n    37→                                     → S3 (Photo Storage)\n    38→```\n    39→\n    40→### Components\n    41→\n    42→- **Nginx**: SSL termination, reverse proxy, static file serving, rate limiting\n    43→- **Frontend**: Next.js 15 with Server-Side Rendering \n    44→- **Backend**: Django 4.2 with Gunicorn WSGI server\n    45→- **Database**: PostgreSQL 16 with PostGIS 3.4 for geospatial data\n    46→- **Cache**: Redis for session storage and caching\n    47→- **Storage**: AWS S3 for photo uploads with CloudFront CDN\n    48→\n    49→## Environment Configuration\n    50→\n    51→### Production Environment Variables\n    52→\n    53→#### Root .env.production\n    54→```bash\n    55→# Database Configuration\n    56→DB_HOST=postgres\n    57→DB_NAME=fowldata_prod\n    58→DB_USER=fowldata_user\n    59→DB_PASS=your_secure_password\n    60→DB_PORT=5432\n    61→\n    62→# Django Settings\n    63→SECRET_KEY=your-production-secret-key\n    64→DEBUG=False\n    65→ALLOWED_HOSTS=fowldata.com,www.fowldata.com,api.fowldata.com\n    66→\n    67→# Security Settings\n    68→SECURE_HSTS_SECONDS=31536000\n    69→SECURE_HSTS_INCLUDE_SUBDOMAINS=True\n    70→SECURE_HSTS_PRELOAD=True\n    71→SECURE_SSL_REDIRECT=True\n    72→\n    73→# AWS S3 Configuration\n    74→AWS_ACCESS_KEY_ID=your_access_key\n    75→AWS_SECRET_ACCESS_KEY=your_secret_key\n    76→AWS_S3_BUCKET_NAME=fowldata-photos-prod\n    77→AWS_REGION=us-west-2\n    78→\n    79→# Redis Configuration\n    80→REDIS_PASSWORD=your_redis_password\n    81→\n    82→# External APIs\n    83→WEATHER_API_KEY=your_weather_api_key\n    84→```\n    85→\n    86→#### Frontend frontend/.env.production\n    87→```bash\n    88→# NextAuth Configuration\n    89→AUTH_SECRET=your-nextauth-secret\n    90→NEXTAUTH_URL=https://www.fowldata.com\n    91→\n    92→# OAuth Providers\n    93→GOOGLE_CLIENT_ID=your_google_client_id\n    94→GOOGLE_CLIENT_SECRET=your_google_client_secret\n    95→\n    96→# API Configuration\n    97→NEXT_PUBLIC_API_URL=https://www.fowldata.com/api\n    98→BACKEND_URL=http://fowldata:8000\n    99→\n   100→# Mapbox Configuration (CRITICAL)\n   101→NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your_mapbox_token\n   102→\n   103→# S3 Upload Configuration\n   104→NEXT_PUBLIC_AWS_S3_UPLOAD_URL=https://fowldata-photos-prod.s3.us-west-2.amazonaws.com\n   105→```\n   106→\n   107→## SSL/TLS Configuration\n   108→\n   109→### Let's Encrypt Setup (Recommended)\n   110→\n   111→```bash\n   112→# Install Certbot\n   113→sudo apt update && apt install certbot\n   114→\n   115→# Get SSL certificates\n   116→sudo certbot certonly --webroot -w /var/www/certbot \\\n   117→  -d fowldata.com -d www.fowldata.com\n   118→\n   119→# Copy certificates to application directory\n   120→sudo cp /etc/letsencrypt/live/www.fowldata.com/fullchain.pem ssl/\n   121→sudo cp /etc/letsencrypt/live/www.fowldata.com/privkey.pem ssl/\n   122→sudo cp /etc/letsencrypt/live/www.fowldata.com/chain.pem ssl/\n   123→\n   124→# Set proper permissions\n   125→sudo chown -R $USER:$USER ssl/\n   126→chmod 644 ssl/fullchain.pem ssl/chain.pem\n   127→chmod 600 ssl/privkey.pem\n   128→\n   129→# Restart Nginx to load certificates\n   130→docker-compose -f docker-compose.prod.yaml restart nginx\n   131→```\n   132→\n   133→### Auto-Renewal Setup\n   134→```bash\n   135→# Add to crontab for automatic renewal\n   136→echo \"0 12 * * * /usr/bin/certbot renew --quiet && docker-compose -f /path/to/fowldata/docker-compose.prod.yaml restart nginx\" | sudo crontab -\n   137→```\n   138→\n   139→## Security Configuration\n   140→\n   141→### Firewall Setup\n   142→```bash\n   143→# Configure UFW firewall\n   144→sudo ufw enable\n   145→sudo ufw default deny incoming\n   146→sudo ufw default allow outgoing\n   147→sudo ufw allow ssh\n   148→sudo ufw allow 80/tcp   # HTTP\n   149→sudo ufw allow 443/tcp  # HTTPS\n   150→```\n   151→\n   152→### Nginx Security Headers\n   153→The production Nginx configuration includes:\n   154→- HSTS (HTTP Strict Transport Security)\n   155→- Content Security Policy\n   156→- X-Frame-Options\n   157→- X-Content-Type-Options\n   158→- Rate limiting\n   159→- Bot protection\n   160→\n   161→### Database Security\n   162→- Non-root PostgreSQL users with limited privileges\n   163→- Connection limits and authentication controls\n   164→- SSL/TLS connections enforced\n   165→- Regular automated backups\n   166→\n   167→## Monitoring & Health Checks\n   168→\n   169→### Application Health Endpoints\n   170→- **Frontend**: `GET /health.json`\n   171→- **Backend**: `GET /api/health/`\n   172→- **Database**: Custom health check function\n   173→\n   174→### Docker Health Checks\n   175→All services include health check configurations:\n   176→```yaml\n   177→healthcheck:\n   178→  test: [\"CMD-SHELL\", \"curl -f http://localhost:8000/api/health/ || exit 1\"]\n   179→  interval: 30s\n   180→  timeout: 10s\n   181→  retries: 3\n   182→```\n   183→\n   184→### Log Management\n   185→```bash\n   186→# View application logs\n   187→docker-compose -f docker-compose.prod.yaml logs -f fowldata\n   188→docker-compose -f docker-compose.prod.yaml logs -f frontend\n   189→docker-compose -f docker-compose.prod.yaml logs -f postgres\n   190→\n   191→# View Nginx access logs\n   192→docker-compose -f docker-compose.prod.yaml exec nginx tail -f /var/log/nginx/access.log\n   193→```\n   194→\n   195→## Backup Strategy\n   196→\n   197→### Database Backups\n   198→```bash\n   199→# Create database backup\n   200→docker-compose -f docker-compose.prod.yaml exec postgres \\\n   201→  pg_dump -U fowldata_user fowldata_prod > backup_$(date +%Y%m%d_%H%M%S).sql\n   202→\n   203→# Automated daily backups (add to crontab)\n   204→0 2 * * * cd /path/to/fowldata && ./scripts/backup-database.sh\n   205→```\n   206→\n   207→### Media File Backups\n   208→```bash\n   209→# Backup Docker volumes\n   210→docker run --rm -v fowldata-media-files-prod:/data -v $(pwd):/backup alpine \\\n   211→  tar czf /backup/media-backup-$(date +%Y%m%d).tar.gz -C /data .\n   212→```\n   213→\n   214→## Performance Optimization\n   215→\n   216→### Database Optimization\n   217→- Connection pooling configured\n   218→- Query performance monitoring with pg_stat_statements\n   219→- Proper indexing for geospatial queries\n   220→- Automated VACUUM and ANALYZE\n   221→\n   222→### Frontend Optimization\n   223→- Next.js standalone build for minimal container size\n   224→- Static file compression via Nginx\n   225→- CloudFront CDN for S3 assets\n   226→- Image optimization and lazy loading\n   227→\n   228→### Caching Strategy\n   229→- Redis for session storage\n   230→- Django query caching with django-cachalot\n   231→- Nginx static file caching\n   232→- Browser caching headers\n   233→\n   234→## Scaling Considerations\n   235→\n   236→### Horizontal Scaling\n   237→- Multiple frontend containers with load balancer\n   238→- Database read replicas for read-heavy workloads\n   239→- Separate media server for large file handling\n   240→\n   241→### Vertical Scaling\n   242→- Recommended minimum: 2GB RAM, 2 CPU cores\n   243→- Production recommended: 4GB RAM, 4 CPU cores\n   244→- Database-heavy workloads: 8GB+ RAM\n   245→\n   246→## Troubleshooting\n   247→\n   248→### Common Deployment Issues\n   249→\n   250→1. **Environment Variables Not Loading**\n   251→   ```bash\n   252→   # Always use explicit env-file flag\n   253→   docker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n   254→   ```\n   255→\n   256→2. **SSL Certificate Issues**\n   257→   ```bash\n   258→   # Verify certificate files and permissions\n   259→   ls -la ssl/\n   260→   openssl x509 -in ssl/fullchain.pem -text -noout\n   261→   ```\n   262→\n   263→3. **Database Connection Failures**\n   264→   ```bash\n   265→   # Check database logs and connectivity\n   266→   docker-compose -f docker-compose.prod.yaml logs postgres\n   267→   docker-compose -f docker-compose.prod.yaml exec fowldata python manage.py dbshell\n   268→   ```\n   269→\n   270→4. **Mapbox Layer Rendering Issues**\n   271→   - Verify NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN is set in both files\n   272→   - Check browser console for GL JS errors\n   273→   - Ensure token has proper permissions\n   274→\n   275→### Rollback Procedure\n   276→```bash\n   277→# Quick rollback to previous version\n   278→git checkout previous-working-commit\n   279→docker-compose -f docker-compose.prod.yaml --env-file .env.production up -d --force-recreate\n   280→```\n   281→\n   282→## Maintenance\n   283→\n   284→### Regular Maintenance Tasks\n   285→- Monitor disk usage and clean old Docker images\n   286→- Update SSL certificates (automated with Let's Encrypt)\n   287→- Review security logs and access patterns\n   288→- Database performance analysis and optimization\n   289→- Update dependencies and security patches\n   290→\n   291→### Scheduled Maintenance\n   292→```bash\n   293→# Weekly maintenance script\n   294→./scripts/weekly-maintenance.sh\n   295→\n   296→# Includes:\n   297→# - Docker system cleanup\n   298→# - Database maintenance\n   299→# - Log rotation\n   300→# - Security updates\n   301→```\n   302→\n   303→For detailed deployment instructions specific to Digital Ocean, see [DIGITAL_OCEAN_DEPLOYMENT.md](./DIGITAL_OCEAN_DEPLOYMENT.md).\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"6f5f3337-876d-48c9-8d05-214237f2bcdf","timestamp":"2025-08-25T04:39:26.450Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/markelmore/_code/fowldata/docs/deployment.md","content":"# Deployment Guide\n\nThis guide covers deploying FowlData to production environments, with detailed instructions for Digital Ocean deployment.\n\n## Overview\n\nFowlData supports multiple deployment strategies:\n- **Digital Ocean Droplets** (Recommended) - Complete setup guide included\n- **Docker Compose** - Self-hosted on any Docker-compatible server\n- **Container Orchestration** - Kubernetes, Docker Swarm (advanced)\n\n## Digital Ocean Deployment (Recommended)\n\nFor complete Digital Ocean deployment instructions, see [DIGITAL_OCEAN_DEPLOYMENT.md](./DIGITAL_OCEAN_DEPLOYMENT.md).\n\n### Quick Digital Ocean Setup\n\n1. **Create Droplet** (minimum 2GB RAM, Ubuntu 22.04)\n2. **Install Dependencies**:\n   ```bash\n   apt update && apt upgrade -y\n   apt install docker.io docker-compose git curl -y\n   ```\n3. **Deploy Application**:\n   ```bash\n   git clone https://github.com/elmorem/fowldata.git\n   cd fowldata\n   ./scripts/validate-production.sh\n   docker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n   ```\n\n## Production Architecture\n\n```\nInternet → Nginx (SSL/Reverse Proxy) → Frontend (Next.js) → Backend (Django) → PostgreSQL + PostGIS\n                                     → Redis (Caching)\n                                     → S3 (Photo Storage)\n```\n\n### Components\n\n- **Nginx**: SSL termination, reverse proxy, static file serving, rate limiting\n- **Frontend**: Next.js 15 with Server-Side Rendering \n- **Backend**: Django 4.2 with Gunicorn WSGI server\n- **Database**: PostgreSQL 16 with PostGIS 3.4 for geospatial data\n- **Cache**: Redis for session storage and caching\n- **Storage**: AWS S3 for photo uploads with CloudFront CDN\n\n## Environment Configuration\n\n### Production Environment Variables\n\n#### Root .env.production\n```bash\n# Database Configuration\nDB_HOST=postgres\nDB_NAME=fowldata_prod\nDB_USER=fowldata_user\nDB_PASS=your_secure_password\nDB_PORT=5432\n\n# Django Settings\nSECRET_KEY=your-production-secret-key\nDEBUG=False\nALLOWED_HOSTS=fowldata.com,www.fowldata.com,api.fowldata.com\n\n# Security Settings\nSECURE_HSTS_SECONDS=31536000\nSECURE_HSTS_INCLUDE_SUBDOMAINS=True\nSECURE_HSTS_PRELOAD=True\nSECURE_SSL_REDIRECT=True\n\n# AWS S3 Configuration\nAWS_ACCESS_KEY_ID=your_access_key\nAWS_SECRET_ACCESS_KEY=your_secret_key\nAWS_S3_BUCKET_NAME=fowldata-photos-prod\nAWS_REGION=us-west-2\n\n# Redis Configuration\nREDIS_PASSWORD=your_redis_password\n\n# External APIs\nWEATHER_API_KEY=your_weather_api_key\n```\n\n#### Frontend frontend/.env.production\n```bash\n# NextAuth Configuration\nAUTH_SECRET=your-nextauth-secret\nNEXTAUTH_URL=https://www.fowldata.com\n\n# OAuth Providers\nGOOGLE_CLIENT_ID=your_google_client_id\nGOOGLE_CLIENT_SECRET=your_google_client_secret\n\n# API Configuration\nNEXT_PUBLIC_API_URL=https://www.fowldata.com/api\nBACKEND_URL=http://fowldata:8000\n\n# Mapbox Configuration (CRITICAL)\nNEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your_mapbox_token\n\n# S3 Upload Configuration\nNEXT_PUBLIC_AWS_S3_UPLOAD_URL=https://fowldata-photos-prod.s3.us-west-2.amazonaws.com\n```\n\n## SSL/TLS Configuration\n\n### Let's Encrypt Setup (Recommended)\n\n```bash\n# Install Certbot\nsudo apt update && apt install certbot\n\n# Get SSL certificates\nsudo certbot certonly --webroot -w /var/www/certbot \\\n  -d fowldata.com -d www.fowldata.com\n\n# Copy certificates to application directory\nsudo cp /etc/letsencrypt/live/www.fowldata.com/fullchain.pem ssl/\nsudo cp /etc/letsencrypt/live/www.fowldata.com/privkey.pem ssl/\nsudo cp /etc/letsencrypt/live/www.fowldata.com/chain.pem ssl/\n\n# Set proper permissions\nsudo chown -R $USER:$USER ssl/\nchmod 644 ssl/fullchain.pem ssl/chain.pem\nchmod 600 ssl/privkey.pem\n\n# Restart Nginx to load certificates\ndocker-compose -f docker-compose.prod.yaml restart nginx\n```\n\n### Auto-Renewal Setup\n```bash\n# Add to crontab for automatic renewal\necho \"0 12 * * * /usr/bin/certbot renew --quiet && docker-compose -f /path/to/fowldata/docker-compose.prod.yaml restart nginx\" | sudo crontab -\n```\n\n## Security Configuration\n\n### Firewall Setup\n```bash\n# Configure UFW firewall\nsudo ufw enable\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow ssh\nsudo ufw allow 80/tcp   # HTTP\nsudo ufw allow 443/tcp  # HTTPS\n```\n\n### Nginx Security Headers\nThe production Nginx configuration includes:\n- HSTS (HTTP Strict Transport Security)\n- Content Security Policy\n- X-Frame-Options\n- X-Content-Type-Options\n- Rate limiting\n- Bot protection\n\n### Database Security\n- Non-root PostgreSQL users with limited privileges\n- Connection limits and authentication controls\n- SSL/TLS connections enforced\n- Regular automated backups\n\n## Monitoring & Health Checks\n\n### Application Health Endpoints\n- **Frontend**: `GET /health.json`\n- **Backend**: `GET /api/health/`\n- **Database**: Custom health check function\n\n### Docker Health Checks\nAll services include health check configurations:\n```yaml\nhealthcheck:\n  test: [\"CMD-SHELL\", \"curl -f http://localhost:8000/api/health/ || exit 1\"]\n  interval: 30s\n  timeout: 10s\n  retries: 3\n```\n\n### Log Management\n```bash\n# View application logs\ndocker-compose -f docker-compose.prod.yaml logs -f fowldata\ndocker-compose -f docker-compose.prod.yaml logs -f frontend\ndocker-compose -f docker-compose.prod.yaml logs -f postgres\n\n# View Nginx access logs\ndocker-compose -f docker-compose.prod.yaml exec nginx tail -f /var/log/nginx/access.log\n```\n\n## Backup Strategy\n\n### Database Backups\n```bash\n# Create database backup\ndocker-compose -f docker-compose.prod.yaml exec postgres \\\n  pg_dump -U fowldata_user fowldata_prod > backup_$(date +%Y%m%d_%H%M%S).sql\n\n# Automated daily backups (add to crontab)\n0 2 * * * cd /path/to/fowldata && ./scripts/backup-database.sh\n```\n\n### Media File Backups\n```bash\n# Backup Docker volumes\ndocker run --rm -v fowldata-media-files-prod:/data -v $(pwd):/backup alpine \\\n  tar czf /backup/media-backup-$(date +%Y%m%d).tar.gz -C /data .\n```\n\n## Performance Optimization\n\n### Database Optimization\n- Connection pooling configured\n- Query performance monitoring with pg_stat_statements\n- Proper indexing for geospatial queries\n- Automated VACUUM and ANALYZE\n\n### Frontend Optimization\n- Next.js standalone build for minimal container size\n- Static file compression via Nginx\n- CloudFront CDN for S3 assets\n- Image optimization and lazy loading\n\n### Caching Strategy\n- Redis for session storage\n- Django query caching with django-cachalot\n- Nginx static file caching\n- Browser caching headers\n\n## Scaling Considerations\n\n### Horizontal Scaling\n- Multiple frontend containers with load balancer\n- Database read replicas for read-heavy workloads\n- Separate media server for large file handling\n\n### Vertical Scaling\n- Recommended minimum: 2GB RAM, 2 CPU cores\n- Production recommended: 4GB RAM, 4 CPU cores\n- Database-heavy workloads: 8GB+ RAM\n\n## Troubleshooting\n\n### Common Deployment Issues\n\n1. **Environment Variables Not Loading**\n   ```bash\n   # Always use explicit env-file flag\n   docker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n   ```\n\n2. **SSL Certificate Issues**\n   ```bash\n   # Verify certificate files and permissions\n   ls -la ssl/\n   openssl x509 -in ssl/fullchain.pem -text -noout\n   ```\n\n3. **Database Connection Failures**\n   ```bash\n   # Check database logs and connectivity\n   docker-compose -f docker-compose.prod.yaml logs postgres\n   docker-compose -f docker-compose.prod.yaml exec fowldata python manage.py dbshell\n   ```\n\n4. **Mapbox Layer Rendering Issues**\n   - Verify NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN is set in both files\n   - Check browser console for GL JS errors\n   - Ensure token has proper permissions\n\n### Rollback Procedure\n```bash\n# Quick rollback to previous version\ngit checkout previous-working-commit\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d --force-recreate\n```\n\n## Maintenance\n\n### Regular Maintenance Tasks\n- Monitor disk usage and clean old Docker images\n- Update SSL certificates (automated with Let's Encrypt)\n- Review security logs and access patterns\n- Database performance analysis and optimization\n- Update dependencies and security patches\n\n### Scheduled Maintenance\n```bash\n# Weekly maintenance script\n./scripts/weekly-maintenance.sh\n\n# Includes:\n# - Docker system cleanup\n# - Database maintenance\n# - Log rotation\n# - Security updates\n```\n\nFor detailed deployment instructions specific to Digital Ocean, see [DIGITAL_OCEAN_DEPLOYMENT.md](./DIGITAL_OCEAN_DEPLOYMENT.md).","numLines":303,"startLine":1,"totalLines":303}}}
{"parentUuid":"6f5f3337-876d-48c9-8d05-214237f2bcdf","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01FUFBv7RVM5hDpskF618jLu","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me read several more key documentation files to get a comprehensive understanding:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":15398,"cache_read_input_tokens":33434,"cache_creation":{"ephemeral_5m_input_tokens":15398,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTp1yX4cxzZdSsDzkdgS","type":"assistant","uuid":"fc7d1c45-13a2-410f-9b30-f10b3e073e99","timestamp":"2025-08-25T04:39:32.356Z"}
{"parentUuid":"fc7d1c45-13a2-410f-9b30-f10b3e073e99","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01FUFBv7RVM5hDpskF618jLu","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_013QS7DH1R59efeaWTxvthFo","name":"Read","input":{"file_path":"/Users/markelmore/_code/fowldata/docs/environment-variables.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":15398,"cache_read_input_tokens":33434,"cache_creation":{"ephemeral_5m_input_tokens":15398,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTp1yX4cxzZdSsDzkdgS","type":"assistant","uuid":"408b6a32-0db9-4544-bffb-5cc2a4436384","timestamp":"2025-08-25T04:39:33.135Z"}
{"parentUuid":"408b6a32-0db9-4544-bffb-5cc2a4436384","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01FUFBv7RVM5hDpskF618jLu","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01CvaTw4TrQ7NJctTB4ig6vf","name":"Read","input":{"file_path":"/Users/markelmore/_code/fowldata/docs/testing.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":15398,"cache_read_input_tokens":33434,"cache_creation":{"ephemeral_5m_input_tokens":15398,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTp1yX4cxzZdSsDzkdgS","type":"assistant","uuid":"6f134626-9030-4cf9-9fdc-1a55b571068e","timestamp":"2025-08-25T04:39:33.710Z"}
{"parentUuid":"6f134626-9030-4cf9-9fdc-1a55b571068e","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01FUFBv7RVM5hDpskF618jLu","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01XuNLAuyTEGBEYcD4EP4KL7","name":"Read","input":{"file_path":"/Users/markelmore/_code/fowldata/docs/authentication.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":15398,"cache_read_input_tokens":33434,"cache_creation":{"ephemeral_5m_input_tokens":15398,"ephemeral_1h_input_tokens":0},"output_tokens":247,"service_tier":"standard"}},"requestId":"req_011CSTp1yX4cxzZdSsDzkdgS","type":"assistant","uuid":"975b0acb-c881-4a6a-942a-9319bc15b402","timestamp":"2025-08-25T04:39:34.253Z"}
{"parentUuid":"975b0acb-c881-4a6a-942a-9319bc15b402","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01FUFBv7RVM5hDpskF618jLu","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01L7wtzhPq5SUf7Uv5LcmgQb","name":"Read","input":{"file_path":"/Users/markelmore/_code/fowldata/docs/mapping.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":15398,"cache_read_input_tokens":33434,"cache_creation":{"ephemeral_5m_input_tokens":15398,"ephemeral_1h_input_tokens":0},"output_tokens":247,"service_tier":"standard"}},"requestId":"req_011CSTp1yX4cxzZdSsDzkdgS","type":"assistant","uuid":"3502b415-459c-4741-9ac8-7d31429aeb12","timestamp":"2025-08-25T04:39:34.413Z"}
{"parentUuid":"3502b415-459c-4741-9ac8-7d31429aeb12","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_013QS7DH1R59efeaWTxvthFo","type":"tool_result","content":"     1→# Environment Variables Reference\n     2→\n     3→Complete guide to configuring FowlData environment variables for development and production.\n     4→\n     5→## Environment File Structure\n     6→\n     7→FowlData uses multiple environment files for different contexts:\n     8→\n     9→```\n    10→fowldata/\n    11→├── .env.local                    # Backend development environment\n    12→├── .env.production               # Backend production environment\n    13→├── frontend/.env.local           # Frontend development environment  \n    14→├── frontend/.env.production      # Frontend production environment\n    15→├── .env.example                  # Backend template\n    16→└── frontend/.env.example         # Frontend template\n    17→```\n    18→\n    19→## Backend Environment Variables\n    20→\n    21→### Database Configuration\n    22→\n    23→```bash\n    24→# Database Connection\n    25→DB_HOST=localhost                 # Development: localhost, Production: postgres\n    26→DB_NAME=fowldata                  # Development database name\n    27→DB_USER=postgres                  # Database username  \n    28→DB_PASS=your_password             # Database password (avoid special chars in prod)\n    29→DB_PORT=5432                      # PostgreSQL port\n    30→\n    31→# Production Database Example\n    32→DB_HOST=postgres\n    33→DB_NAME=fowldata_prod\n    34→DB_USER=fowldata_user\n    35→DB_PASS=SecurePassword123         # No special characters for production\n    36→DB_PORT=5432\n    37→```\n    38→\n    39→### Django Core Settings\n    40→\n    41→```bash\n    42→# Django Configuration\n    43→SECRET_KEY=your-django-secret-key                    # Generate with django-admin\n    44→DEBUG=True                                          # False for production\n    45→ALLOWED_HOSTS=localhost,127.0.0.1                   # Comma-separated hosts\n    46→\n    47→# Production Django Settings\n    48→SECRET_KEY=very-long-production-secret-key\n    49→DEBUG=False\n    50→ALLOWED_HOSTS=fowldata.com,www.fowldata.com,api.fowldata.com\n    51→```\n    52→\n    53→### Security Settings (Production)\n    54→\n    55→```bash\n    56→# HTTPS/SSL Configuration\n    57→SECURE_SSL_REDIRECT=True\n    58→SECURE_HSTS_SECONDS=31536000\n    59→SECURE_HSTS_INCLUDE_SUBDOMAINS=True\n    60→SECURE_HSTS_PRELOAD=True\n    61→SECURE_CONTENT_TYPE_NOSNIFF=True\n    62→SECURE_BROWSER_XSS_FILTER=True\n    63→X_FRAME_OPTIONS=DENY\n    64→```\n    65→\n    66→### AWS S3 Configuration\n    67→\n    68→```bash\n    69→# S3 Photo Storage\n    70→AWS_ACCESS_KEY_ID=your_access_key_id\n    71→AWS_SECRET_ACCESS_KEY=your_secret_access_key\n    72→AWS_S3_BUCKET_NAME=fowldata-photos-dev              # Development bucket\n    73→AWS_REGION=us-west-2                                # S3 region\n    74→AWS_S3_CUSTOM_DOMAIN=your-cdn-domain.cloudfront.net # Optional CDN\n    75→\n    76→# Production S3 Example\n    77→AWS_S3_BUCKET_NAME=fowldata-photos-prod\n    78→PHOTO_UPLOAD_BUCKET=fowldata-photos-prod\n    79→```\n    80→\n    81→### External API Keys\n    82→\n    83→```bash\n    84→# Weather API Integration\n    85→WEATHER_API_KEY=your_weather_api_key                 # OpenWeatherMap or similar\n    86→WEATHER_API_BASE_URL=https://api.openweathermap.org/data/2.5\n    87→\n    88→# Email Configuration (Optional)\n    89→EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend\n    90→EMAIL_HOST=smtp.gmail.com\n    91→EMAIL_PORT=587\n    92→EMAIL_USE_TLS=True\n    93→EMAIL_HOST_USER=your-email@gmail.com\n    94→EMAIL_HOST_PASSWORD=your-app-password\n    95→```\n    96→\n    97→### Redis Configuration (Production)\n    98→\n    99→```bash\n   100→# Redis Caching and Sessions\n   101→REDIS_HOST=redis                                     # Docker service name\n   102→REDIS_PORT=6379\n   103→REDIS_PASSWORD=your_redis_password                   # Set for production\n   104→REDIS_DB=0\n   105→```\n   106→\n   107→## Frontend Environment Variables\n   108→\n   109→### NextAuth Configuration\n   110→\n   111→```bash\n   112→# Authentication (CRITICAL)\n   113→AUTH_SECRET=your-nextauth-secret-key                 # Generate: openssl rand -base64 32\n   114→NEXTAUTH_URL=http://localhost:3000                   # Full URL with protocol\n   115→\n   116→# Production NextAuth\n   117→AUTH_SECRET=production-nextauth-secret-key\n   118→NEXTAUTH_URL=https://www.fowldata.com\n   119→```\n   120→\n   121→### OAuth Provider Configuration\n   122→\n   123→```bash\n   124→# Google OAuth\n   125→GOOGLE_CLIENT_ID=your-google-client-id\n   126→GOOGLE_CLIENT_SECRET=your-google-client-secret\n   127→\n   128→# Facebook OAuth (Optional)\n   129→FACEBOOK_CLIENT_ID=your-facebook-app-id\n   130→FACEBOOK_CLIENT_SECRET=your-facebook-app-secret\n   131→```\n   132→\n   133→### API Configuration\n   134→\n   135→```bash\n   136→# Backend API Connection (CRITICAL for Docker)\n   137→BACKEND_URL=http://fowldata:8000                     # Use Docker service name\n   138→NEXT_PUBLIC_API_URL=http://localhost:8000/api        # Public API endpoint\n   139→\n   140→# Production API Configuration\n   141→BACKEND_URL=http://fowldata:8000                     # Internal Docker communication\n   142→NEXT_PUBLIC_API_URL=https://www.fowldata.com/api    # External API endpoint\n   143→```\n   144→\n   145→### Mapbox Configuration\n   146→\n   147→```bash\n   148→# Mapbox Integration (CRITICAL for layer rendering)\n   149→NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your-mapbox-token    # Public token for GL JS v3+\n   150→\n   151→# Optional Mapbox Settings\n   152→NEXT_PUBLIC_MAPBOX_STYLE=mapbox://styles/username/style-id\n   153→NEXT_PUBLIC_DEFAULT_CENTER_LAT=39.8283\n   154→NEXT_PUBLIC_DEFAULT_CENTER_LNG=-98.5795\n   155→NEXT_PUBLIC_DEFAULT_ZOOM=4\n   156→```\n   157→\n   158→### S3 Upload Configuration\n   159→\n   160→```bash\n   161→# Direct S3 Upload URLs\n   162→NEXT_PUBLIC_AWS_S3_UPLOAD_URL=https://fowldata-photos-dev.s3.us-west-2.amazonaws.com\n   163→NEXT_PUBLIC_CDN_URL=https://your-cloudfront-domain.cloudfront.net\n   164→```\n   165→\n   166→## Environment-Specific Configurations\n   167→\n   168→### Development (.env.local)\n   169→\n   170→```bash\n   171→# Backend .env.local\n   172→DB_HOST=localhost\n   173→DB_NAME=fowldata\n   174→DB_USER=postgres\n   175→DB_PASS=postgres\n   176→SECRET_KEY=dev-secret-key\n   177→DEBUG=True\n   178→ALLOWED_HOSTS=localhost,127.0.0.1\n   179→\n   180→# Frontend frontend/.env.local  \n   181→BACKEND_URL=http://fowldata:8000                     # CRITICAL: Docker service name\n   182→NEXTAUTH_URL=http://localhost:3000\n   183→NEXT_PUBLIC_API_URL=http://localhost:8000/api\n   184→```\n   185→\n   186→### Production (.env.production)\n   187→\n   188→```bash\n   189→# Backend .env.production\n   190→DB_HOST=postgres\n   191→DB_NAME=fowldata_prod\n   192→DB_USER=fowldata_user\n   193→DB_PASS=SecureProductionPassword123\n   194→SECRET_KEY=production-secret-key-very-long-and-secure\n   195→DEBUG=False\n   196→ALLOWED_HOSTS=fowldata.com,www.fowldata.com,api.fowldata.com\n   197→SECURE_SSL_REDIRECT=True\n   198→\n   199→# Frontend frontend/.env.production\n   200→BACKEND_URL=http://fowldata:8000                     # Internal Docker communication\n   201→NEXTAUTH_URL=https://www.fowldata.com\n   202→NEXT_PUBLIC_API_URL=https://www.fowldata.com/api\n   203→```\n   204→\n   205→## Critical Configuration Rules\n   206→\n   207→### Docker Network Communication\n   208→\n   209→**ALWAYS use Docker service names for internal communication**:\n   210→\n   211→```bash\n   212→# ✅ CORRECT - Internal container communication\n   213→BACKEND_URL=http://fowldata:8000\n   214→\n   215→# ❌ WRONG - Causes ECONNREFUSED errors in containers\n   216→BACKEND_URL=http://localhost:8000\n   217→```\n   218→\n   219→### Mapbox GL JS v3+ Token Configuration\n   220→\n   221→**REQUIRED for layer rendering with react-map-gl v8**:\n   222→\n   223→```bash\n   224→# Frontend environment - MUST be NEXT_PUBLIC_* for client access\n   225→NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your-mapbox-token\n   226→```\n   227→\n   228→```typescript\n   229→// ALSO required in Map component code\n   230→import mapboxgl from 'mapbox-gl';\n   231→mapboxgl.accessToken = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN!;\n   232→```\n   233→\n   234→### Production Environment Loading\n   235→\n   236→**ALWAYS use explicit env-file flag**:\n   237→\n   238→```bash\n   239→# ✅ CORRECT - Explicit environment file loading\n   240→docker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n   241→\n   242→# ❌ WRONG - Environment variables not loaded properly\n   243→docker-compose -f docker-compose.prod.yaml up -d\n   244→```\n   245→\n   246→### Password Security\n   247→\n   248→**Avoid shell metacharacters in production passwords**:\n   249→\n   250→```bash\n   251→# ❌ PROBLEMATIC - Shell interprets special characters\n   252→DB_PASS=password$123!@#\n   253→\n   254→# ✅ SAFE - No shell metacharacters\n   255→DB_PASS=SecurePassword123\n   256→```\n   257→\n   258→## Environment Validation\n   259→\n   260→### Development Validation\n   261→\n   262→```bash\n   263→# Check environment loading\n   264→docker-compose config | grep -A5 -B5 POSTGRES_\n   265→\n   266→# Test backend connection\n   267→docker-compose exec fowldata python manage.py check\n   268→\n   269→# Test frontend environment\n   270→cd frontend && npm run build\n   271→```\n   272→\n   273→### Production Validation\n   274→\n   275→```bash\n   276→# Validate production configuration\n   277→./scripts/validate-production.sh\n   278→\n   279→# Test environment variable loading\n   280→docker-compose -f docker-compose.prod.yaml --env-file .env.production config | grep POSTGRES\n   281→\n   282→# Verify all services can access variables\n   283→docker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata env | grep DB_\n   284→```\n   285→\n   286→## Environment Generation\n   287→\n   288→### Generate Secure Keys\n   289→\n   290→```bash\n   291→# Django SECRET_KEY\n   292→python -c \"from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())\"\n   293→\n   294→# NextAuth AUTH_SECRET\n   295→openssl rand -base64 32\n   296→\n   297→# Generate secure password\n   298→openssl rand -base64 24 | tr -d \"=+/\" | cut -c1-16\n   299→```\n   300→\n   301→### Template Files\n   302→\n   303→Create template files for new environments:\n   304→\n   305→```bash\n   306→# Copy existing environment as template\n   307→cp .env.local .env.template\n   308→\n   309→# Remove sensitive values from template\n   310→sed -i 's/=.*/=/' .env.template\n   311→```\n   312→\n   313→## Troubleshooting\n   314→\n   315→### Environment Not Loading\n   316→\n   317→**Problem**: Variables show as empty or default values\n   318→\n   319→**Solutions**:\n   320→1. Check file encoding (must be UTF-8 without BOM)\n   321→2. Use explicit `--env-file` flag for production\n   322→3. Verify file permissions (readable by Docker)\n   323→4. Check for syntax errors (no spaces around `=`)\n   324→\n   325→### Docker Network Issues  \n   326→\n   327→**Problem**: ECONNREFUSED errors between containers\n   328→\n   329→**Solution**: Always use Docker service names:\n   330→```bash\n   331→# frontend/.env.local\n   332→BACKEND_URL=http://fowldata:8000  # ✅ Service name\n   333→# NOT: http://localhost:8000      # ❌ Fails in containers\n   334→```\n   335→\n   336→### Mapbox Layers Not Rendering\n   337→\n   338→**Problem**: Map loads but no layers appear\n   339→\n   340→**Solution**: Ensure both environment variable and code configuration:\n   341→```bash\n   342→# Environment\n   343→NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your-token\n   344→\n   345→# Code (ALSO required)\n   346→mapboxgl.accessToken = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN!;\n   347→```\n   348→\n   349→For additional environment configuration examples, see:\n   350→- [Installation Guide](./installation.md)\n   351→- [Digital Ocean Deployment](./DIGITAL_OCEAN_DEPLOYMENT.md)\n   352→- [Authentication Guide](./authentication.md)\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"1acd6a42-b5ec-4e2d-8867-3e25b5debe80","timestamp":"2025-08-25T04:39:34.472Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/markelmore/_code/fowldata/docs/environment-variables.md","content":"# Environment Variables Reference\n\nComplete guide to configuring FowlData environment variables for development and production.\n\n## Environment File Structure\n\nFowlData uses multiple environment files for different contexts:\n\n```\nfowldata/\n├── .env.local                    # Backend development environment\n├── .env.production               # Backend production environment\n├── frontend/.env.local           # Frontend development environment  \n├── frontend/.env.production      # Frontend production environment\n├── .env.example                  # Backend template\n└── frontend/.env.example         # Frontend template\n```\n\n## Backend Environment Variables\n\n### Database Configuration\n\n```bash\n# Database Connection\nDB_HOST=localhost                 # Development: localhost, Production: postgres\nDB_NAME=fowldata                  # Development database name\nDB_USER=postgres                  # Database username  \nDB_PASS=your_password             # Database password (avoid special chars in prod)\nDB_PORT=5432                      # PostgreSQL port\n\n# Production Database Example\nDB_HOST=postgres\nDB_NAME=fowldata_prod\nDB_USER=fowldata_user\nDB_PASS=SecurePassword123         # No special characters for production\nDB_PORT=5432\n```\n\n### Django Core Settings\n\n```bash\n# Django Configuration\nSECRET_KEY=your-django-secret-key                    # Generate with django-admin\nDEBUG=True                                          # False for production\nALLOWED_HOSTS=localhost,127.0.0.1                   # Comma-separated hosts\n\n# Production Django Settings\nSECRET_KEY=very-long-production-secret-key\nDEBUG=False\nALLOWED_HOSTS=fowldata.com,www.fowldata.com,api.fowldata.com\n```\n\n### Security Settings (Production)\n\n```bash\n# HTTPS/SSL Configuration\nSECURE_SSL_REDIRECT=True\nSECURE_HSTS_SECONDS=31536000\nSECURE_HSTS_INCLUDE_SUBDOMAINS=True\nSECURE_HSTS_PRELOAD=True\nSECURE_CONTENT_TYPE_NOSNIFF=True\nSECURE_BROWSER_XSS_FILTER=True\nX_FRAME_OPTIONS=DENY\n```\n\n### AWS S3 Configuration\n\n```bash\n# S3 Photo Storage\nAWS_ACCESS_KEY_ID=your_access_key_id\nAWS_SECRET_ACCESS_KEY=your_secret_access_key\nAWS_S3_BUCKET_NAME=fowldata-photos-dev              # Development bucket\nAWS_REGION=us-west-2                                # S3 region\nAWS_S3_CUSTOM_DOMAIN=your-cdn-domain.cloudfront.net # Optional CDN\n\n# Production S3 Example\nAWS_S3_BUCKET_NAME=fowldata-photos-prod\nPHOTO_UPLOAD_BUCKET=fowldata-photos-prod\n```\n\n### External API Keys\n\n```bash\n# Weather API Integration\nWEATHER_API_KEY=your_weather_api_key                 # OpenWeatherMap or similar\nWEATHER_API_BASE_URL=https://api.openweathermap.org/data/2.5\n\n# Email Configuration (Optional)\nEMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend\nEMAIL_HOST=smtp.gmail.com\nEMAIL_PORT=587\nEMAIL_USE_TLS=True\nEMAIL_HOST_USER=your-email@gmail.com\nEMAIL_HOST_PASSWORD=your-app-password\n```\n\n### Redis Configuration (Production)\n\n```bash\n# Redis Caching and Sessions\nREDIS_HOST=redis                                     # Docker service name\nREDIS_PORT=6379\nREDIS_PASSWORD=your_redis_password                   # Set for production\nREDIS_DB=0\n```\n\n## Frontend Environment Variables\n\n### NextAuth Configuration\n\n```bash\n# Authentication (CRITICAL)\nAUTH_SECRET=your-nextauth-secret-key                 # Generate: openssl rand -base64 32\nNEXTAUTH_URL=http://localhost:3000                   # Full URL with protocol\n\n# Production NextAuth\nAUTH_SECRET=production-nextauth-secret-key\nNEXTAUTH_URL=https://www.fowldata.com\n```\n\n### OAuth Provider Configuration\n\n```bash\n# Google OAuth\nGOOGLE_CLIENT_ID=your-google-client-id\nGOOGLE_CLIENT_SECRET=your-google-client-secret\n\n# Facebook OAuth (Optional)\nFACEBOOK_CLIENT_ID=your-facebook-app-id\nFACEBOOK_CLIENT_SECRET=your-facebook-app-secret\n```\n\n### API Configuration\n\n```bash\n# Backend API Connection (CRITICAL for Docker)\nBACKEND_URL=http://fowldata:8000                     # Use Docker service name\nNEXT_PUBLIC_API_URL=http://localhost:8000/api        # Public API endpoint\n\n# Production API Configuration\nBACKEND_URL=http://fowldata:8000                     # Internal Docker communication\nNEXT_PUBLIC_API_URL=https://www.fowldata.com/api    # External API endpoint\n```\n\n### Mapbox Configuration\n\n```bash\n# Mapbox Integration (CRITICAL for layer rendering)\nNEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your-mapbox-token    # Public token for GL JS v3+\n\n# Optional Mapbox Settings\nNEXT_PUBLIC_MAPBOX_STYLE=mapbox://styles/username/style-id\nNEXT_PUBLIC_DEFAULT_CENTER_LAT=39.8283\nNEXT_PUBLIC_DEFAULT_CENTER_LNG=-98.5795\nNEXT_PUBLIC_DEFAULT_ZOOM=4\n```\n\n### S3 Upload Configuration\n\n```bash\n# Direct S3 Upload URLs\nNEXT_PUBLIC_AWS_S3_UPLOAD_URL=https://fowldata-photos-dev.s3.us-west-2.amazonaws.com\nNEXT_PUBLIC_CDN_URL=https://your-cloudfront-domain.cloudfront.net\n```\n\n## Environment-Specific Configurations\n\n### Development (.env.local)\n\n```bash\n# Backend .env.local\nDB_HOST=localhost\nDB_NAME=fowldata\nDB_USER=postgres\nDB_PASS=postgres\nSECRET_KEY=dev-secret-key\nDEBUG=True\nALLOWED_HOSTS=localhost,127.0.0.1\n\n# Frontend frontend/.env.local  \nBACKEND_URL=http://fowldata:8000                     # CRITICAL: Docker service name\nNEXTAUTH_URL=http://localhost:3000\nNEXT_PUBLIC_API_URL=http://localhost:8000/api\n```\n\n### Production (.env.production)\n\n```bash\n# Backend .env.production\nDB_HOST=postgres\nDB_NAME=fowldata_prod\nDB_USER=fowldata_user\nDB_PASS=SecureProductionPassword123\nSECRET_KEY=production-secret-key-very-long-and-secure\nDEBUG=False\nALLOWED_HOSTS=fowldata.com,www.fowldata.com,api.fowldata.com\nSECURE_SSL_REDIRECT=True\n\n# Frontend frontend/.env.production\nBACKEND_URL=http://fowldata:8000                     # Internal Docker communication\nNEXTAUTH_URL=https://www.fowldata.com\nNEXT_PUBLIC_API_URL=https://www.fowldata.com/api\n```\n\n## Critical Configuration Rules\n\n### Docker Network Communication\n\n**ALWAYS use Docker service names for internal communication**:\n\n```bash\n# ✅ CORRECT - Internal container communication\nBACKEND_URL=http://fowldata:8000\n\n# ❌ WRONG - Causes ECONNREFUSED errors in containers\nBACKEND_URL=http://localhost:8000\n```\n\n### Mapbox GL JS v3+ Token Configuration\n\n**REQUIRED for layer rendering with react-map-gl v8**:\n\n```bash\n# Frontend environment - MUST be NEXT_PUBLIC_* for client access\nNEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your-mapbox-token\n```\n\n```typescript\n// ALSO required in Map component code\nimport mapboxgl from 'mapbox-gl';\nmapboxgl.accessToken = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN!;\n```\n\n### Production Environment Loading\n\n**ALWAYS use explicit env-file flag**:\n\n```bash\n# ✅ CORRECT - Explicit environment file loading\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# ❌ WRONG - Environment variables not loaded properly\ndocker-compose -f docker-compose.prod.yaml up -d\n```\n\n### Password Security\n\n**Avoid shell metacharacters in production passwords**:\n\n```bash\n# ❌ PROBLEMATIC - Shell interprets special characters\nDB_PASS=password$123!@#\n\n# ✅ SAFE - No shell metacharacters\nDB_PASS=SecurePassword123\n```\n\n## Environment Validation\n\n### Development Validation\n\n```bash\n# Check environment loading\ndocker-compose config | grep -A5 -B5 POSTGRES_\n\n# Test backend connection\ndocker-compose exec fowldata python manage.py check\n\n# Test frontend environment\ncd frontend && npm run build\n```\n\n### Production Validation\n\n```bash\n# Validate production configuration\n./scripts/validate-production.sh\n\n# Test environment variable loading\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production config | grep POSTGRES\n\n# Verify all services can access variables\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata env | grep DB_\n```\n\n## Environment Generation\n\n### Generate Secure Keys\n\n```bash\n# Django SECRET_KEY\npython -c \"from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())\"\n\n# NextAuth AUTH_SECRET\nopenssl rand -base64 32\n\n# Generate secure password\nopenssl rand -base64 24 | tr -d \"=+/\" | cut -c1-16\n```\n\n### Template Files\n\nCreate template files for new environments:\n\n```bash\n# Copy existing environment as template\ncp .env.local .env.template\n\n# Remove sensitive values from template\nsed -i 's/=.*/=/' .env.template\n```\n\n## Troubleshooting\n\n### Environment Not Loading\n\n**Problem**: Variables show as empty or default values\n\n**Solutions**:\n1. Check file encoding (must be UTF-8 without BOM)\n2. Use explicit `--env-file` flag for production\n3. Verify file permissions (readable by Docker)\n4. Check for syntax errors (no spaces around `=`)\n\n### Docker Network Issues  \n\n**Problem**: ECONNREFUSED errors between containers\n\n**Solution**: Always use Docker service names:\n```bash\n# frontend/.env.local\nBACKEND_URL=http://fowldata:8000  # ✅ Service name\n# NOT: http://localhost:8000      # ❌ Fails in containers\n```\n\n### Mapbox Layers Not Rendering\n\n**Problem**: Map loads but no layers appear\n\n**Solution**: Ensure both environment variable and code configuration:\n```bash\n# Environment\nNEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your-token\n\n# Code (ALSO required)\nmapboxgl.accessToken = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN!;\n```\n\nFor additional environment configuration examples, see:\n- [Installation Guide](./installation.md)\n- [Digital Ocean Deployment](./DIGITAL_OCEAN_DEPLOYMENT.md)\n- [Authentication Guide](./authentication.md)","numLines":352,"startLine":1,"totalLines":352}}}
{"parentUuid":"1acd6a42-b5ec-4e2d-8867-3e25b5debe80","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01CvaTw4TrQ7NJctTB4ig6vf","type":"tool_result","content":"     1→# 🧪 Testing Guide\n     2→\n     3→Comprehensive testing strategy for FowlData with unit, integration, and end-to-end testing.\n     4→\n     5→## Testing Architecture\n     6→\n     7→```\n     8→┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐\n     9→│   Frontend      │    │   Backend       │    │  Integration    │\n    10→│     Tests       │    │    Tests        │    │     Tests       │\n    11→│                 │    │                 │    │                 │\n    12→│ • Jest (Unit)   │    │ • pytest (Unit)│    │ • Playwright    │\n    13→│ • React Testing │    │ • pytest-django│    │   (E2E)         │\n    14→│   Library       │    │ • Coverage      │    │ • API Testing   │\n    15→└─────────────────┘    └─────────────────┘    └─────────────────┘\n    16→```\n    17→\n    18→## Quick Test Commands\n    19→\n    20→### Run All Tests\n    21→```bash\n    22→./testlint              # Full CI validation including E2E tests\n    23→./testlint-quick        # Quick validation without E2E tests\n    24→```\n    25→\n    26→### Backend Tests\n    27→```bash\n    28→# All backend tests\n    29→docker compose exec fowldata python -m pytest\n    30→\n    31→# Specific test directories\n    32→docker compose exec fowldata python -m pytest accounts/tests/ hunts/tests/ -v\n    33→\n    34→# Single test file\n    35→docker compose exec fowldata python -m pytest hunts/tests/test_weather_api.py -v\n    36→\n    37→# Tests with specific markers\n    38→docker compose exec fowldata python -m pytest -m \"not performance\" -v\n    39→\n    40→# With coverage\n    41→docker compose exec fowldata python -m pytest --cov=fowldata --cov-report=html\n    42→```\n    43→\n    44→### Frontend Tests\n    45→```bash\n    46→cd frontend\n    47→\n    48→# Unit tests\n    49→npm run test                    # Jest unit tests\n    50→npm run test:watch             # Jest in watch mode\n    51→npm test -- --watchAll=false   # Run tests once (CI mode)\n    52→\n    53→# E2E tests\n    54→npm run test:e2e               # Playwright E2E tests\n    55→npm run test:e2e:ui            # Playwright with UI\n    56→npm run test:e2e:headed        # Playwright with browser\n    57→```\n    58→\n    59→## Test Structure\n    60→\n    61→### Backend Tests (`fowldata/`)\n    62→\n    63→```\n    64→fowldata/\n    65→├── accounts/tests/\n    66→│   ├── test_nextauth_backend.py      # NextAuth JWT authentication\n    67→│   ├── test_middleware.py            # Authentication middleware\n    68→│   ├── test_authentication.py        # DRF authentication\n    69→│   ├── test_api_views.py            # API endpoint tests\n    70→│   └── test_integration.py          # Full authentication flow\n    71→├── hunts/tests/\n    72→│   ├── test_models.py               # Model validation and methods\n    73→│   ├── test_api_views.py            # Hunt API endpoints\n    74→│   ├── test_weather_api.py          # Weather integration\n    75→│   ├── test_s3_integration.py       # Photo upload functionality\n    76→│   └── test_performance_security.py # Performance tests (CI-skipped)\n    77→└── conftest.py                     # Shared pytest fixtures\n    78→```\n    79→\n    80→### Frontend Tests (`frontend/`)\n    81→\n    82→```\n    83→frontend/\n    84→├── src/__tests__/\n    85→│   ├── auth.test.ts                 # NextAuth configuration\n    86→│   ├── signin-page.test.tsx         # Authentication components\n    87→│   ├── hunt-form.test.tsx          # Hunt creation forms\n    88→│   ├── api-client.test.ts          # API client functionality\n    89→│   └── components/                  # Individual component tests\n    90→├── e2e/\n    91→│   ├── auth-flow.spec.ts           # Complete authentication flow\n    92→│   ├── hunt-creation.spec.ts       # Hunt creation workflow\n    93→│   ├── photo-upload.spec.ts        # Photo upload functionality\n    94→│   └── navigation.spec.ts          # Application navigation\n    95→├── jest.config.js                  # Jest configuration\n    96→├── jest.setup.js                   # Jest setup and mocks\n    97→└── playwright.config.ts           # Playwright configuration\n    98→```\n    99→\n   100→## Test Categories\n   101→\n   102→### Backend Testing\n   103→\n   104→#### Unit Tests\n   105→**Purpose**: Test individual components in isolation\n   106→\n   107→```python\n   108→# Example: Model validation test\n   109→@pytest.mark.django_db\n   110→def test_hunt_model_validation():\n   111→    user = MyUser.objects.create_user(\n   112→        email=\"test@example.com\",\n   113→        password=\"testpass123\"\n   114→    )\n   115→    \n   116→    hunt = Hunt.objects.create(\n   117→        user=user,\n   118→        date_of_hunt=date.today(),\n   119→        latitude=40.0,\n   120→        longitude=-74.0\n   121→    )\n   122→    \n   123→    assert hunt.location is not None\n   124→    assert hunt.user == user\n   125→```\n   126→\n   127→#### Integration Tests\n   128→**Purpose**: Test complete workflows and component interactions\n   129→\n   130→```python\n   131→# Example: Authentication flow test\n   132→@pytest.mark.django_db\n   133→def test_nextauth_jwt_authentication_flow():\n   134→    # Create mock NextAuth session\n   135→    session_data = {\n   136→        \"user\": {\n   137→            \"email\": \"test@example.com\",\n   138→            \"name\": \"Test User\"\n   139→        }\n   140→    }\n   141→    \n   142→    # Test JWT creation and validation\n   143→    token = create_jwt_token(session_data)\n   144→    user = authenticate_jwt_token(token)\n   145→    \n   146→    assert user.email == \"test@example.com\"\n   147→    assert user.is_authenticated\n   148→```\n   149→\n   150→#### API Tests\n   151→**Purpose**: Test REST API endpoints and responses\n   152→\n   153→```python\n   154→# Example: API endpoint test\n   155→@pytest.mark.django_db\n   156→def test_hunt_list_api(authenticated_client, user):\n   157→    Hunt.objects.create(\n   158→        user=user,\n   159→        date_of_hunt=date.today(),\n   160→        latitude=40.0,\n   161→        longitude=-74.0\n   162→    )\n   163→    \n   164→    response = authenticated_client.get('/api/hunts/')\n   165→    \n   166→    assert response.status_code == 200\n   167→    assert len(response.json()) == 1\n   168→```\n   169→\n   170→### Frontend Testing\n   171→\n   172→#### Component Tests\n   173→**Purpose**: Test React components in isolation\n   174→\n   175→```typescript\n   176→// Example: Component rendering test\n   177→import { render, screen } from '@testing-library/react';\n   178→import { HuntForm } from '@/components/HuntForm';\n   179→\n   180→describe('HuntForm', () => {\n   181→  it('renders hunt creation form', () => {\n   182→    render(<HuntForm />);\n   183→    \n   184→    expect(screen.getByLabelText(/hunt date/i)).toBeInTheDocument();\n   185→    expect(screen.getByLabelText(/location/i)).toBeInTheDocument();\n   186→    expect(screen.getByRole('button', { name: /save hunt/i })).toBeInTheDocument();\n   187→  });\n   188→  \n   189→  it('validates required fields', async () => {\n   190→    render(<HuntForm />);\n   191→    \n   192→    const submitButton = screen.getByRole('button', { name: /save hunt/i });\n   193→    fireEvent.click(submitButton);\n   194→    \n   195→    expect(await screen.findByText(/hunt date is required/i)).toBeInTheDocument();\n   196→  });\n   197→});\n   198→```\n   199→\n   200→#### Integration Tests\n   201→**Purpose**: Test component interactions and data flow\n   202→\n   203→```typescript\n   204→// Example: Authentication integration test\n   205→import { render, screen, waitFor } from '@testing-library/react';\n   206→import { SessionProvider } from 'next-auth/react';\n   207→import { Dashboard } from '@/components/Dashboard';\n   208→\n   209→describe('Dashboard Integration', () => {\n   210→  it('displays user data when authenticated', async () => {\n   211→    const mockSession = {\n   212→      user: { email: 'test@example.com', name: 'Test User' }\n   213→    };\n   214→    \n   215→    render(\n   216→      <SessionProvider session={mockSession}>\n   217→        <Dashboard />\n   218→      </SessionProvider>\n   219→    );\n   220→    \n   221→    await waitFor(() => {\n   222→      expect(screen.getByText('Welcome, Test User')).toBeInTheDocument();\n   223→    });\n   224→  });\n   225→});\n   226→```\n   227→\n   228→### End-to-End Testing\n   229→\n   230→#### Complete User Workflows\n   231→**Purpose**: Test complete user journeys across the application\n   232→\n   233→```typescript\n   234→// Example: Hunt creation E2E test\n   235→import { test, expect } from '@playwright/test';\n   236→\n   237→test('complete hunt creation workflow', async ({ page }) => {\n   238→  // Navigate to application\n   239→  await page.goto('http://localhost:3000');\n   240→  \n   241→  // Sign in\n   242→  await page.click('[data-testid=\"sign-in-button\"]');\n   243→  await page.fill('[data-testid=\"email-input\"]', 'mark@mail.com');\n   244→  await page.fill('[data-testid=\"password-input\"]', '1@Tsgstp');\n   245→  await page.click('[data-testid=\"submit-button\"]');\n   246→  \n   247→  // Create new hunt\n   248→  await page.click('[data-testid=\"new-hunt-button\"]');\n   249→  await page.fill('[data-testid=\"hunt-date\"]', '2024-08-15');\n   250→  \n   251→  // Select location on map\n   252→  await page.click('[data-testid=\"map-container\"]', { position: { x: 400, y: 300 } });\n   253→  \n   254→  // Upload photo\n   255→  await page.setInputFiles('[data-testid=\"photo-upload\"]', 'test-files/hunt-photo.jpg');\n   256→  \n   257→  // Save hunt\n   258→  await page.click('[data-testid=\"save-hunt-button\"]');\n   259→  \n   260→  // Verify success\n   261→  await expect(page.locator('[data-testid=\"hunt-created-message\"]')).toBeVisible();\n   262→});\n   263→```\n   264→\n   265→## Test Configuration\n   266→\n   267→### Django Test Settings\n   268→\n   269→#### pytest Configuration (`pytest.ini`)\n   270→```ini\n   271→[tool:pytest]\n   272→DJANGO_SETTINGS_MODULE = fowldata.settings\n   273→addopts = \n   274→    --verbose\n   275→    --tb=short\n   276→    --reuse-db\n   277→    --nomigrations\n   278→markers =\n   279→    unit: Unit tests\n   280→    integration: Integration tests\n   281→    api: API tests\n   282→    auth: Authentication tests\n   283→    nextauth: NextAuth-specific tests\n   284→    slow: Slow tests (can be skipped)\n   285→    performance: Performance tests (skipped in CI)\n   286→    threading: Threading tests (skipped in CI)\n   287→    memory_intensive: Memory intensive tests (skipped in CI)\n   288→```\n   289→\n   290→#### Test Fixtures (`conftest.py`)\n   291→```python\n   292→@pytest.fixture\n   293→def test_user():\n   294→    \"\"\"Create a test user for authentication tests\"\"\"\n   295→    return MyUser.objects.create_user(\n   296→        email=\"test@example.com\",\n   297→        password=\"testpass123\",\n   298→        first_name=\"Test\",\n   299→        last_name=\"User\"\n   300→    )\n   301→\n   302→@pytest.fixture\n   303→def authenticated_client(test_user):\n   304→    \"\"\"Create an authenticated API client\"\"\"\n   305→    client = APIClient()\n   306→    token = create_test_jwt_token(test_user)\n   307→    client.credentials(HTTP_AUTHORIZATION=f'Bearer {token}')\n   308→    return client\n   309→```\n   310→\n   311→### Frontend Test Configuration\n   312→\n   313→#### Jest Configuration (`jest.config.js`)\n   314→```javascript\n   315→module.exports = {\n   316→  testEnvironment: 'jsdom',\n   317→  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\n   318→  moduleNameMapping: {\n   319→    '^@/(.*)$': '<rootDir>/src/$1',\n   320→  },\n   321→  testMatch: [\n   322→    '<rootDir>/src/**/__tests__/**/*.{js,jsx,ts,tsx}',\n   323→    '<rootDir>/src/**/*.(test|spec).{js,jsx,ts,tsx}'\n   324→  ],\n   325→  collectCoverageFrom: [\n   326→    'src/**/*.{js,jsx,ts,tsx}',\n   327→    '!src/**/*.d.ts',\n   328→    '!src/app/api/**',\n   329→  ],\n   330→  coverageThreshold: {\n   331→    global: {\n   332→      branches: 80,\n   333→      functions: 80,\n   334→      lines: 80,\n   335→      statements: 80\n   336→    }\n   337→  }\n   338→};\n   339→```\n   340→\n   341→#### Playwright Configuration (`playwright.config.ts`)\n   342→```typescript\n   343→export default defineConfig({\n   344→  testDir: './e2e',\n   345→  timeout: 30000,\n   346→  retries: 2,\n   347→  use: {\n   348→    baseURL: 'http://localhost:3000',\n   349→    headless: true,\n   350→    screenshot: 'only-on-failure',\n   351→    video: 'retain-on-failure',\n   352→  },\n   353→  projects: [\n   354→    {\n   355→      name: 'chromium',\n   356→      use: { ...devices['Desktop Chrome'] },\n   357→    },\n   358→    {\n   359→      name: 'webkit',\n   360→      use: { ...devices['Desktop Safari'] },\n   361→    },\n   362→  ],\n   363→  webServer: {\n   364→    command: 'npm run dev',\n   365→    port: 3000,\n   366→    reuseExistingServer: !process.env.CI,\n   367→  },\n   368→});\n   369→```\n   370→\n   371→## Test Data Management\n   372→\n   373→### Database Test Data\n   374→```python\n   375→# Minimal test data creation\n   376→@pytest.fixture\n   377→def hunt_with_photos(test_user):\n   378→    \"\"\"Create hunt with associated photos for testing\"\"\"\n   379→    hunt = Hunt.objects.create(\n   380→        user=test_user,\n   381→        date_of_hunt=date.today(),\n   382→        latitude=40.0,\n   383→        longitude=-74.0,\n   384→        weather_conditions=\"Partly cloudy\"\n   385→    )\n   386→    \n   387→    HuntPhoto.objects.create(\n   388→        hunt=hunt,\n   389→        photo_url=\"https://test-bucket.s3.amazonaws.com/test-photo.jpg\",\n   390→        filename=\"test-photo.jpg\"\n   391→    )\n   392→    \n   393→    return hunt\n   394→```\n   395→\n   396→### Mock External Services\n   397→```python\n   398→# Mock weather API responses\n   399→@pytest.fixture\n   400→def mock_weather_api():\n   401→    with patch('hunts.tasks.get_weather_data') as mock:\n   402→        mock.return_value = {\n   403→            'temp': 65,\n   404→            'conditions': 'Partly cloudy',\n   405→            'humidity': 75,\n   406→            'windspeed': 8\n   407→        }\n   408→        yield mock\n   409→\n   410→# Mock S3 operations\n   411→@pytest.fixture\n   412→def mock_s3_client():\n   413→    with patch('hunts.s3_manager.boto3.client') as mock:\n   414→        mock.return_value.generate_presigned_url.return_value = \"https://test-url.com\"\n   415→        yield mock\n   416→```\n   417→\n   418→## Test Execution Strategies\n   419→\n   420→### Development Testing\n   421→```bash\n   422→# Quick feedback loop during development\n   423→npm run test:watch              # Frontend watch mode\n   424→docker compose exec fowldata python -m pytest -x  # Stop on first failure\n   425→```\n   426→\n   427→### Pre-Commit Testing\n   428→```bash\n   429→# Run before committing changes\n   430→./testlint-quick               # Essential tests only\n   431→npm run lint                   # Code quality checks\n   432→```\n   433→\n   434→### CI/CD Testing\n   435→```bash\n   436→# Full test suite for pull requests\n   437→./testlint                     # Complete validation\n   438→docker compose exec fowldata python -m pytest --cov=fowldata  # With coverage\n   439→```\n   440→\n   441→### Performance Testing\n   442→```bash\n   443→# Specialized performance testing (local only)\n   444→docker compose exec fowldata python -m pytest -m performance\n   445→```\n   446→\n   447→## Test Markers and Filtering\n   448→\n   449→### Django Test Markers\n   450→```bash\n   451→# Run specific test categories\n   452→pytest -m \"unit\"               # Unit tests only\n   453→pytest -m \"integration\"        # Integration tests only\n   454→pytest -m \"auth\"               # Authentication tests\n   455→pytest -m \"not slow\"           # Skip slow tests\n   456→pytest -m \"not performance\"    # Skip performance tests (CI default)\n   457→```\n   458→\n   459→### Frontend Test Filtering\n   460→```bash\n   461→# Jest test filtering\n   462→npm test -- --testNamePattern=\"authentication\"  # Tests matching pattern\n   463→npm test -- src/components/                     # Specific directory\n   464→npm test -- --coverage                          # With coverage report\n   465→```\n   466→\n   467→## Coverage Requirements\n   468→\n   469→### Coverage Targets\n   470→- **Overall Coverage**: 80% minimum\n   471→- **Authentication Code**: 90% minimum\n   472→- **API Endpoints**: 95% minimum\n   473→- **Critical Business Logic**: 100%\n   474→\n   475→### Coverage Reports\n   476→```bash\n   477→# Backend coverage\n   478→docker compose exec fowldata python -m pytest --cov=fowldata --cov-report=html\n   479→open htmlcov/index.html\n   480→\n   481→# Frontend coverage\n   482→npm test -- --coverage\n   483→open coverage/lcov-report/index.html\n   484→```\n   485→\n   486→## Debugging Tests\n   487→\n   488→### Django Test Debugging\n   489→```bash\n   490→# Debug with pdb\n   491→pytest -s --pdb fowldata/accounts/tests/test_nextauth_backend.py::test_function\n   492→\n   493→# Verbose output\n   494→pytest -v -s\n   495→\n   496→# Show print statements\n   497→pytest -s\n   498→```\n   499→\n   500→### Frontend Test Debugging\n   501→```bash\n   502→# Debug Jest tests\n   503→npm test -- --detectOpenHandles --forceExit\n   504→\n   505→# Debug Playwright tests\n   506→npm run test:e2e -- --debug\n   507→npm run test:e2e -- --headed\n   508→```\n   509→\n   510→## Common Testing Patterns\n   511→\n   512→### Authentication Testing\n   513→```python\n   514→# Test authenticated endpoints\n   515→def test_protected_endpoint(authenticated_client):\n   516→    response = authenticated_client.get('/api/protected/')\n   517→    assert response.status_code == 200\n   518→\n   519→# Test authentication failures\n   520→def test_unauthenticated_access(client):\n   521→    response = client.get('/api/protected/')\n   522→    assert response.status_code == 401\n   523→```\n   524→\n   525→### Form Validation Testing\n   526→```typescript\n   527→// Test form validation\n   528→it('validates required fields', async () => {\n   529→  render(<HuntForm />);\n   530→  \n   531→  // Submit empty form\n   532→  fireEvent.click(screen.getByRole('button', { name: /submit/i }));\n   533→  \n   534→  // Check for validation errors\n   535→  expect(await screen.findByText(/date is required/i)).toBeInTheDocument();\n   536→});\n   537→```\n   538→\n   539→### API Integration Testing\n   540→```typescript\n   541→// Mock API responses\n   542→beforeEach(() => {\n   543→  fetchMock.mockResponse(JSON.stringify({ success: true }));\n   544→});\n   545→\n   546→it('handles API success', async () => {\n   547→  // Test component behavior with successful API response\n   548→});\n   549→```\n   550→\n   551→## Test Environment Management\n   552→\n   553→### Environment Variables for Testing\n   554→```bash\n   555→# Test-specific environment\n   556→DJANGO_SETTINGS_MODULE=fowldata.settings.test\n   557→DEBUG=True\n   558→AUTH_SECRET=test-secret\n   559→WEATHERAPI_KEY=test-key\n   560→```\n   561→\n   562→### Docker Test Environment\n   563→```bash\n   564→# Start test environment\n   565→docker compose -f docker-compose.test.yml up -d\n   566→\n   567→# Run tests\n   568→./testlint-quick\n   569→\n   570→# Cleanup\n   571→docker compose -f docker-compose.test.yml down -v\n   572→```\n   573→\n   574→## Best Practices\n   575→\n   576→### Test Writing Guidelines\n   577→1. **Test Names**: Descriptive names explaining what is being tested\n   578→2. **Arrange-Act-Assert**: Clear test structure\n   579→3. **Isolation**: Each test should be independent\n   580→4. **Mock External Dependencies**: Don't rely on external services\n   581→5. **Test Edge Cases**: Include error conditions and boundary cases\n   582→\n   583→### Test Maintenance\n   584→1. **Keep Tests Updated**: Update tests when features change\n   585→2. **Remove Obsolete Tests**: Clean up tests for removed features\n   586→3. **Refactor Test Code**: Apply same quality standards as production code\n   587→4. **Document Complex Tests**: Add comments for complex test scenarios\n   588→\n   589→### Performance Considerations\n   590→1. **Use Transactions**: Wrap database tests in transactions for speed\n   591→2. **Minimize Database Hits**: Use select_related and prefetch_related\n   592→3. **Mock Heavy Operations**: Mock file uploads, API calls, etc.\n   593→4. **Parallel Execution**: Run tests in parallel when possible\n   594→\n   595→## Troubleshooting\n   596→\n   597→### Common Issues\n   598→1. **Database Conflicts**: Use `--reuse-db` flag or clean database between tests\n   599→2. **Async Issues**: Proper await/async handling in frontend tests\n   600→3. **Mock Conflicts**: Ensure mocks are properly reset between tests\n   601→4. **Environment Issues**: Check test environment configuration\n   602→\n   603→### Debug Commands\n   604→```bash\n   605→# Check test database state\n   606→docker compose exec fowldata python manage.py dbshell\n   607→\n   608→# Verify test environment\n   609→docker compose exec fowldata python -c \"from django.conf import settings; print(settings.DATABASES)\"\n   610→\n   611→# Check test discovery\n   612→pytest --collect-only\n   613→```\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"86de7839-901d-4853-9ee3-7fbbdb6bf27a","timestamp":"2025-08-25T04:39:34.473Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/markelmore/_code/fowldata/docs/testing.md","content":"# 🧪 Testing Guide\n\nComprehensive testing strategy for FowlData with unit, integration, and end-to-end testing.\n\n## Testing Architecture\n\n```\n┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐\n│   Frontend      │    │   Backend       │    │  Integration    │\n│     Tests       │    │    Tests        │    │     Tests       │\n│                 │    │                 │    │                 │\n│ • Jest (Unit)   │    │ • pytest (Unit)│    │ • Playwright    │\n│ • React Testing │    │ • pytest-django│    │   (E2E)         │\n│   Library       │    │ • Coverage      │    │ • API Testing   │\n└─────────────────┘    └─────────────────┘    └─────────────────┘\n```\n\n## Quick Test Commands\n\n### Run All Tests\n```bash\n./testlint              # Full CI validation including E2E tests\n./testlint-quick        # Quick validation without E2E tests\n```\n\n### Backend Tests\n```bash\n# All backend tests\ndocker compose exec fowldata python -m pytest\n\n# Specific test directories\ndocker compose exec fowldata python -m pytest accounts/tests/ hunts/tests/ -v\n\n# Single test file\ndocker compose exec fowldata python -m pytest hunts/tests/test_weather_api.py -v\n\n# Tests with specific markers\ndocker compose exec fowldata python -m pytest -m \"not performance\" -v\n\n# With coverage\ndocker compose exec fowldata python -m pytest --cov=fowldata --cov-report=html\n```\n\n### Frontend Tests\n```bash\ncd frontend\n\n# Unit tests\nnpm run test                    # Jest unit tests\nnpm run test:watch             # Jest in watch mode\nnpm test -- --watchAll=false   # Run tests once (CI mode)\n\n# E2E tests\nnpm run test:e2e               # Playwright E2E tests\nnpm run test:e2e:ui            # Playwright with UI\nnpm run test:e2e:headed        # Playwright with browser\n```\n\n## Test Structure\n\n### Backend Tests (`fowldata/`)\n\n```\nfowldata/\n├── accounts/tests/\n│   ├── test_nextauth_backend.py      # NextAuth JWT authentication\n│   ├── test_middleware.py            # Authentication middleware\n│   ├── test_authentication.py        # DRF authentication\n│   ├── test_api_views.py            # API endpoint tests\n│   └── test_integration.py          # Full authentication flow\n├── hunts/tests/\n│   ├── test_models.py               # Model validation and methods\n│   ├── test_api_views.py            # Hunt API endpoints\n│   ├── test_weather_api.py          # Weather integration\n│   ├── test_s3_integration.py       # Photo upload functionality\n│   └── test_performance_security.py # Performance tests (CI-skipped)\n└── conftest.py                     # Shared pytest fixtures\n```\n\n### Frontend Tests (`frontend/`)\n\n```\nfrontend/\n├── src/__tests__/\n│   ├── auth.test.ts                 # NextAuth configuration\n│   ├── signin-page.test.tsx         # Authentication components\n│   ├── hunt-form.test.tsx          # Hunt creation forms\n│   ├── api-client.test.ts          # API client functionality\n│   └── components/                  # Individual component tests\n├── e2e/\n│   ├── auth-flow.spec.ts           # Complete authentication flow\n│   ├── hunt-creation.spec.ts       # Hunt creation workflow\n│   ├── photo-upload.spec.ts        # Photo upload functionality\n│   └── navigation.spec.ts          # Application navigation\n├── jest.config.js                  # Jest configuration\n├── jest.setup.js                   # Jest setup and mocks\n└── playwright.config.ts           # Playwright configuration\n```\n\n## Test Categories\n\n### Backend Testing\n\n#### Unit Tests\n**Purpose**: Test individual components in isolation\n\n```python\n# Example: Model validation test\n@pytest.mark.django_db\ndef test_hunt_model_validation():\n    user = MyUser.objects.create_user(\n        email=\"test@example.com\",\n        password=\"testpass123\"\n    )\n    \n    hunt = Hunt.objects.create(\n        user=user,\n        date_of_hunt=date.today(),\n        latitude=40.0,\n        longitude=-74.0\n    )\n    \n    assert hunt.location is not None\n    assert hunt.user == user\n```\n\n#### Integration Tests\n**Purpose**: Test complete workflows and component interactions\n\n```python\n# Example: Authentication flow test\n@pytest.mark.django_db\ndef test_nextauth_jwt_authentication_flow():\n    # Create mock NextAuth session\n    session_data = {\n        \"user\": {\n            \"email\": \"test@example.com\",\n            \"name\": \"Test User\"\n        }\n    }\n    \n    # Test JWT creation and validation\n    token = create_jwt_token(session_data)\n    user = authenticate_jwt_token(token)\n    \n    assert user.email == \"test@example.com\"\n    assert user.is_authenticated\n```\n\n#### API Tests\n**Purpose**: Test REST API endpoints and responses\n\n```python\n# Example: API endpoint test\n@pytest.mark.django_db\ndef test_hunt_list_api(authenticated_client, user):\n    Hunt.objects.create(\n        user=user,\n        date_of_hunt=date.today(),\n        latitude=40.0,\n        longitude=-74.0\n    )\n    \n    response = authenticated_client.get('/api/hunts/')\n    \n    assert response.status_code == 200\n    assert len(response.json()) == 1\n```\n\n### Frontend Testing\n\n#### Component Tests\n**Purpose**: Test React components in isolation\n\n```typescript\n// Example: Component rendering test\nimport { render, screen } from '@testing-library/react';\nimport { HuntForm } from '@/components/HuntForm';\n\ndescribe('HuntForm', () => {\n  it('renders hunt creation form', () => {\n    render(<HuntForm />);\n    \n    expect(screen.getByLabelText(/hunt date/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/location/i)).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /save hunt/i })).toBeInTheDocument();\n  });\n  \n  it('validates required fields', async () => {\n    render(<HuntForm />);\n    \n    const submitButton = screen.getByRole('button', { name: /save hunt/i });\n    fireEvent.click(submitButton);\n    \n    expect(await screen.findByText(/hunt date is required/i)).toBeInTheDocument();\n  });\n});\n```\n\n#### Integration Tests\n**Purpose**: Test component interactions and data flow\n\n```typescript\n// Example: Authentication integration test\nimport { render, screen, waitFor } from '@testing-library/react';\nimport { SessionProvider } from 'next-auth/react';\nimport { Dashboard } from '@/components/Dashboard';\n\ndescribe('Dashboard Integration', () => {\n  it('displays user data when authenticated', async () => {\n    const mockSession = {\n      user: { email: 'test@example.com', name: 'Test User' }\n    };\n    \n    render(\n      <SessionProvider session={mockSession}>\n        <Dashboard />\n      </SessionProvider>\n    );\n    \n    await waitFor(() => {\n      expect(screen.getByText('Welcome, Test User')).toBeInTheDocument();\n    });\n  });\n});\n```\n\n### End-to-End Testing\n\n#### Complete User Workflows\n**Purpose**: Test complete user journeys across the application\n\n```typescript\n// Example: Hunt creation E2E test\nimport { test, expect } from '@playwright/test';\n\ntest('complete hunt creation workflow', async ({ page }) => {\n  // Navigate to application\n  await page.goto('http://localhost:3000');\n  \n  // Sign in\n  await page.click('[data-testid=\"sign-in-button\"]');\n  await page.fill('[data-testid=\"email-input\"]', 'mark@mail.com');\n  await page.fill('[data-testid=\"password-input\"]', '1@Tsgstp');\n  await page.click('[data-testid=\"submit-button\"]');\n  \n  // Create new hunt\n  await page.click('[data-testid=\"new-hunt-button\"]');\n  await page.fill('[data-testid=\"hunt-date\"]', '2024-08-15');\n  \n  // Select location on map\n  await page.click('[data-testid=\"map-container\"]', { position: { x: 400, y: 300 } });\n  \n  // Upload photo\n  await page.setInputFiles('[data-testid=\"photo-upload\"]', 'test-files/hunt-photo.jpg');\n  \n  // Save hunt\n  await page.click('[data-testid=\"save-hunt-button\"]');\n  \n  // Verify success\n  await expect(page.locator('[data-testid=\"hunt-created-message\"]')).toBeVisible();\n});\n```\n\n## Test Configuration\n\n### Django Test Settings\n\n#### pytest Configuration (`pytest.ini`)\n```ini\n[tool:pytest]\nDJANGO_SETTINGS_MODULE = fowldata.settings\naddopts = \n    --verbose\n    --tb=short\n    --reuse-db\n    --nomigrations\nmarkers =\n    unit: Unit tests\n    integration: Integration tests\n    api: API tests\n    auth: Authentication tests\n    nextauth: NextAuth-specific tests\n    slow: Slow tests (can be skipped)\n    performance: Performance tests (skipped in CI)\n    threading: Threading tests (skipped in CI)\n    memory_intensive: Memory intensive tests (skipped in CI)\n```\n\n#### Test Fixtures (`conftest.py`)\n```python\n@pytest.fixture\ndef test_user():\n    \"\"\"Create a test user for authentication tests\"\"\"\n    return MyUser.objects.create_user(\n        email=\"test@example.com\",\n        password=\"testpass123\",\n        first_name=\"Test\",\n        last_name=\"User\"\n    )\n\n@pytest.fixture\ndef authenticated_client(test_user):\n    \"\"\"Create an authenticated API client\"\"\"\n    client = APIClient()\n    token = create_test_jwt_token(test_user)\n    client.credentials(HTTP_AUTHORIZATION=f'Bearer {token}')\n    return client\n```\n\n### Frontend Test Configuration\n\n#### Jest Configuration (`jest.config.js`)\n```javascript\nmodule.exports = {\n  testEnvironment: 'jsdom',\n  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\n  moduleNameMapping: {\n    '^@/(.*)$': '<rootDir>/src/$1',\n  },\n  testMatch: [\n    '<rootDir>/src/**/__tests__/**/*.{js,jsx,ts,tsx}',\n    '<rootDir>/src/**/*.(test|spec).{js,jsx,ts,tsx}'\n  ],\n  collectCoverageFrom: [\n    'src/**/*.{js,jsx,ts,tsx}',\n    '!src/**/*.d.ts',\n    '!src/app/api/**',\n  ],\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80\n    }\n  }\n};\n```\n\n#### Playwright Configuration (`playwright.config.ts`)\n```typescript\nexport default defineConfig({\n  testDir: './e2e',\n  timeout: 30000,\n  retries: 2,\n  use: {\n    baseURL: 'http://localhost:3000',\n    headless: true,\n    screenshot: 'only-on-failure',\n    video: 'retain-on-failure',\n  },\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n  ],\n  webServer: {\n    command: 'npm run dev',\n    port: 3000,\n    reuseExistingServer: !process.env.CI,\n  },\n});\n```\n\n## Test Data Management\n\n### Database Test Data\n```python\n# Minimal test data creation\n@pytest.fixture\ndef hunt_with_photos(test_user):\n    \"\"\"Create hunt with associated photos for testing\"\"\"\n    hunt = Hunt.objects.create(\n        user=test_user,\n        date_of_hunt=date.today(),\n        latitude=40.0,\n        longitude=-74.0,\n        weather_conditions=\"Partly cloudy\"\n    )\n    \n    HuntPhoto.objects.create(\n        hunt=hunt,\n        photo_url=\"https://test-bucket.s3.amazonaws.com/test-photo.jpg\",\n        filename=\"test-photo.jpg\"\n    )\n    \n    return hunt\n```\n\n### Mock External Services\n```python\n# Mock weather API responses\n@pytest.fixture\ndef mock_weather_api():\n    with patch('hunts.tasks.get_weather_data') as mock:\n        mock.return_value = {\n            'temp': 65,\n            'conditions': 'Partly cloudy',\n            'humidity': 75,\n            'windspeed': 8\n        }\n        yield mock\n\n# Mock S3 operations\n@pytest.fixture\ndef mock_s3_client():\n    with patch('hunts.s3_manager.boto3.client') as mock:\n        mock.return_value.generate_presigned_url.return_value = \"https://test-url.com\"\n        yield mock\n```\n\n## Test Execution Strategies\n\n### Development Testing\n```bash\n# Quick feedback loop during development\nnpm run test:watch              # Frontend watch mode\ndocker compose exec fowldata python -m pytest -x  # Stop on first failure\n```\n\n### Pre-Commit Testing\n```bash\n# Run before committing changes\n./testlint-quick               # Essential tests only\nnpm run lint                   # Code quality checks\n```\n\n### CI/CD Testing\n```bash\n# Full test suite for pull requests\n./testlint                     # Complete validation\ndocker compose exec fowldata python -m pytest --cov=fowldata  # With coverage\n```\n\n### Performance Testing\n```bash\n# Specialized performance testing (local only)\ndocker compose exec fowldata python -m pytest -m performance\n```\n\n## Test Markers and Filtering\n\n### Django Test Markers\n```bash\n# Run specific test categories\npytest -m \"unit\"               # Unit tests only\npytest -m \"integration\"        # Integration tests only\npytest -m \"auth\"               # Authentication tests\npytest -m \"not slow\"           # Skip slow tests\npytest -m \"not performance\"    # Skip performance tests (CI default)\n```\n\n### Frontend Test Filtering\n```bash\n# Jest test filtering\nnpm test -- --testNamePattern=\"authentication\"  # Tests matching pattern\nnpm test -- src/components/                     # Specific directory\nnpm test -- --coverage                          # With coverage report\n```\n\n## Coverage Requirements\n\n### Coverage Targets\n- **Overall Coverage**: 80% minimum\n- **Authentication Code**: 90% minimum\n- **API Endpoints**: 95% minimum\n- **Critical Business Logic**: 100%\n\n### Coverage Reports\n```bash\n# Backend coverage\ndocker compose exec fowldata python -m pytest --cov=fowldata --cov-report=html\nopen htmlcov/index.html\n\n# Frontend coverage\nnpm test -- --coverage\nopen coverage/lcov-report/index.html\n```\n\n## Debugging Tests\n\n### Django Test Debugging\n```bash\n# Debug with pdb\npytest -s --pdb fowldata/accounts/tests/test_nextauth_backend.py::test_function\n\n# Verbose output\npytest -v -s\n\n# Show print statements\npytest -s\n```\n\n### Frontend Test Debugging\n```bash\n# Debug Jest tests\nnpm test -- --detectOpenHandles --forceExit\n\n# Debug Playwright tests\nnpm run test:e2e -- --debug\nnpm run test:e2e -- --headed\n```\n\n## Common Testing Patterns\n\n### Authentication Testing\n```python\n# Test authenticated endpoints\ndef test_protected_endpoint(authenticated_client):\n    response = authenticated_client.get('/api/protected/')\n    assert response.status_code == 200\n\n# Test authentication failures\ndef test_unauthenticated_access(client):\n    response = client.get('/api/protected/')\n    assert response.status_code == 401\n```\n\n### Form Validation Testing\n```typescript\n// Test form validation\nit('validates required fields', async () => {\n  render(<HuntForm />);\n  \n  // Submit empty form\n  fireEvent.click(screen.getByRole('button', { name: /submit/i }));\n  \n  // Check for validation errors\n  expect(await screen.findByText(/date is required/i)).toBeInTheDocument();\n});\n```\n\n### API Integration Testing\n```typescript\n// Mock API responses\nbeforeEach(() => {\n  fetchMock.mockResponse(JSON.stringify({ success: true }));\n});\n\nit('handles API success', async () => {\n  // Test component behavior with successful API response\n});\n```\n\n## Test Environment Management\n\n### Environment Variables for Testing\n```bash\n# Test-specific environment\nDJANGO_SETTINGS_MODULE=fowldata.settings.test\nDEBUG=True\nAUTH_SECRET=test-secret\nWEATHERAPI_KEY=test-key\n```\n\n### Docker Test Environment\n```bash\n# Start test environment\ndocker compose -f docker-compose.test.yml up -d\n\n# Run tests\n./testlint-quick\n\n# Cleanup\ndocker compose -f docker-compose.test.yml down -v\n```\n\n## Best Practices\n\n### Test Writing Guidelines\n1. **Test Names**: Descriptive names explaining what is being tested\n2. **Arrange-Act-Assert**: Clear test structure\n3. **Isolation**: Each test should be independent\n4. **Mock External Dependencies**: Don't rely on external services\n5. **Test Edge Cases**: Include error conditions and boundary cases\n\n### Test Maintenance\n1. **Keep Tests Updated**: Update tests when features change\n2. **Remove Obsolete Tests**: Clean up tests for removed features\n3. **Refactor Test Code**: Apply same quality standards as production code\n4. **Document Complex Tests**: Add comments for complex test scenarios\n\n### Performance Considerations\n1. **Use Transactions**: Wrap database tests in transactions for speed\n2. **Minimize Database Hits**: Use select_related and prefetch_related\n3. **Mock Heavy Operations**: Mock file uploads, API calls, etc.\n4. **Parallel Execution**: Run tests in parallel when possible\n\n## Troubleshooting\n\n### Common Issues\n1. **Database Conflicts**: Use `--reuse-db` flag or clean database between tests\n2. **Async Issues**: Proper await/async handling in frontend tests\n3. **Mock Conflicts**: Ensure mocks are properly reset between tests\n4. **Environment Issues**: Check test environment configuration\n\n### Debug Commands\n```bash\n# Check test database state\ndocker compose exec fowldata python manage.py dbshell\n\n# Verify test environment\ndocker compose exec fowldata python -c \"from django.conf import settings; print(settings.DATABASES)\"\n\n# Check test discovery\npytest --collect-only\n```","numLines":613,"startLine":1,"totalLines":613}}}
{"parentUuid":"86de7839-901d-4853-9ee3-7fbbdb6bf27a","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01XuNLAuyTEGBEYcD4EP4KL7","type":"tool_result","content":"     1→# 🔐 Authentication System\n     2→\n     3→FowlData uses a sophisticated authentication system that integrates NextAuth.js (frontend) with Django JWT authentication (backend).\n     4→\n     5→## Architecture Overview\n     6→\n     7→```\n     8→┌─────────────────┐    JWT Token    ┌─────────────────┐\n     9→│   NextAuth.js   │◄──────────────►│   Django JWT    │\n    10→│   (Frontend)    │                │   (Backend)     │\n    11→└─────────────────┘                └─────────────────┘\n    12→         │                                   │\n    13→         ▼                                   ▼\n    14→┌─────────────────┐                ┌─────────────────┐\n    15→│  OAuth Providers│                │  User Database  │\n    16→│ Google/Facebook │                │   PostgreSQL    │\n    17→└─────────────────┘                └─────────────────┘\n    18→```\n    19→\n    20→## Key Features\n    21→\n    22→- **Unified Authentication**: Single sign-on across frontend and backend\n    23→- **Social Login**: Google, Facebook, and Instagram OAuth\n    24→- **Credentials Login**: Traditional email/password authentication\n    25→- **JWT Tokens**: Secure token-based authentication\n    26→- **Automatic Sync**: User data synchronized between NextAuth and Django\n    27→- **Session Management**: Secure session handling with HTTP-only cookies\n    28→\n    29→## Configuration\n    30→\n    31→### Environment Variables\n    32→\n    33→Both frontend and backend require the same `AUTH_SECRET`:\n    34→\n    35→```bash\n    36→# .env.local (Backend)\n    37→AUTH_SECRET=your-secret-key-here\n    38→\n    39→# frontend/.env.local (Frontend)\n    40→AUTH_SECRET=your-secret-key-here\n    41→NEXTAUTH_URL=http://localhost:3000\n    42→\n    43→# OAuth Providers\n    44→GOOGLE_CLIENT_ID=your-google-client-id\n    45→GOOGLE_CLIENT_SECRET=your-google-client-secret\n    46→FACEBOOK_CLIENT_ID=your-facebook-app-id\n    47→FACEBOOK_CLIENT_SECRET=your-facebook-app-secret\n    48→```\n    49→\n    50→### Generate AUTH_SECRET\n    51→\n    52→```bash\n    53→openssl rand -base64 32\n    54→```\n    55→\n    56→## OAuth Provider Setup\n    57→\n    58→### Google OAuth\n    59→\n    60→1. Go to [Google Cloud Console](https://console.cloud.google.com/)\n    61→2. Create/select project and enable Google+ API\n    62→3. Create OAuth 2.0 Client ID\n    63→4. Add authorized redirect URIs:\n    64→   - `http://localhost:3000/api/auth/callback/google` (development)\n    65→   - `https://yourdomain.com/api/auth/callback/google` (production)\n    66→\n    67→### Facebook OAuth\n    68→\n    69→1. Go to [Facebook Developers](https://developers.facebook.com/)\n    70→2. Create app and add \"Facebook Login\" product\n    71→3. Configure OAuth redirect URIs:\n    72→   - `http://localhost:3000/api/auth/callback/facebook` (development)\n    73→   - `https://yourdomain.com/api/auth/callback/facebook` (production)\n    74→\n    75→### Instagram OAuth\n    76→\n    77→1. Use Facebook Developers platform\n    78→2. Add \"Instagram Basic Display\" product\n    79→3. Configure redirect URIs similarly to Facebook\n    80→\n    81→## Implementation Details\n    82→\n    83→### Frontend (NextAuth.js)\n    84→\n    85→#### Configuration File\n    86→**Location**: `frontend/src/app/api/auth/[...nextauth]/route.ts`\n    87→\n    88→```typescript\n    89→export const { handlers, auth, signIn, signOut } = NextAuth({\n    90→  providers: [\n    91→    Google({\n    92→      clientId: process.env.GOOGLE_CLIENT_ID!,\n    93→      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    94→    }),\n    95→    Facebook({\n    96→      clientId: process.env.FACEBOOK_CLIENT_ID!,\n    97→      clientSecret: process.env.FACEBOOK_CLIENT_SECRET!,\n    98→    }),\n    99→    Credentials({\n   100→      // Email/password authentication\n   101→    }),\n   102→  ],\n   103→  session: {\n   104→    strategy: \"jwt\",\n   105→    maxAge: 24 * 60 * 60, // 24 hours\n   106→  },\n   107→  callbacks: {\n   108→    jwt: async ({ token, user, account }) => {\n   109→      // Custom JWT handling\n   110→    },\n   111→    session: async ({ session, token }) => {\n   112→      // Session customization\n   113→    },\n   114→  },\n   115→})\n   116→```\n   117→\n   118→#### API Client Integration\n   119→**Location**: `frontend/src/lib/api/client.ts`\n   120→\n   121→```typescript\n   122→const apiClient = {\n   123→  async request(endpoint: string, options: RequestInit = {}) {\n   124→    // Automatically includes authentication cookies\n   125→    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n   126→      ...options,\n   127→      credentials: 'include', // Include cookies\n   128→      headers: {\n   129→        'Content-Type': 'application/json',\n   130→        ...options.headers,\n   131→      },\n   132→    });\n   133→    \n   134→    if (response.status === 401) {\n   135→      // Redirect to sign-in on authentication failure\n   136→      window.location.href = '/auth/signin';\n   137→    }\n   138→    \n   139→    return response;\n   140→  }\n   141→};\n   142→```\n   143→\n   144→### Backend (Django)\n   145→\n   146→#### JWT Authentication Backend\n   147→**Location**: `fowldata/accounts/nextauth_backend.py`\n   148→\n   149→```python\n   150→class NextAuthJWTBackend:\n   151→    def authenticate(self, request, **kwargs):\n   152→        # Extract JWT from request headers or cookies\n   153→        token = self.get_token_from_request(request)\n   154→        if not token:\n   155→            return None\n   156→            \n   157→        try:\n   158→            # Verify JWT signature\n   159→            payload = jwt.decode(\n   160→                token, \n   161→                settings.AUTH_SECRET, \n   162→                algorithms=[\"HS256\"]\n   163→            )\n   164→            \n   165→            # Get or create user from JWT claims\n   166→            user = self.get_or_create_user(payload)\n   167→            return user\n   168→            \n   169→        except jwt.InvalidTokenError:\n   170→            return None\n   171→```\n   172→\n   173→#### Authentication Middleware\n   174→**Location**: `fowldata/accounts/middleware.py`\n   175→\n   176→```python\n   177→class NextAuthJWTMiddleware:\n   178→    def __init__(self, get_response):\n   179→        self.get_response = get_response\n   180→\n   181→    def __call__(self, request):\n   182→        # Authenticate user for each request\n   183→        user = authenticate(request)\n   184→        if user:\n   185→            request.user = user\n   186→        \n   187→        response = self.get_response(request)\n   188→        return response\n   189→```\n   190→\n   191→#### Django REST Framework Integration\n   192→**Location**: `fowldata/accounts/authentication.py`\n   193→\n   194→```python\n   195→class NextAuthJWTAuthentication(BaseAuthentication):\n   196→    def authenticate(self, request):\n   197→        backend = NextAuthJWTBackend()\n   198→        user = backend.authenticate(request)\n   199→        \n   200→        if user and user.is_active:\n   201→            return (user, None)\n   202→        return None\n   203→```\n   204→\n   205→### User Models\n   206→\n   207→#### Django User Model\n   208→**Location**: `fowldata/accounts/models.py`\n   209→\n   210→```python\n   211→class MyUser(AbstractUser):\n   212→    email = models.EmailField(unique=True)\n   213→    first_name = models.CharField(max_length=150)\n   214→    last_name = models.CharField(max_length=150)\n   215→    is_active = models.BooleanField(default=True)\n   216→    \n   217→    USERNAME_FIELD = 'email'\n   218→    REQUIRED_FIELDS = ['first_name', 'last_name']\n   219→\n   220→class UserProfile(models.Model):\n   221→    user = models.OneToOneField(MyUser, on_delete=models.CASCADE)\n   222→    auth_provider = models.CharField(max_length=50)  # 'google', 'facebook', 'credentials'\n   223→    external_id = models.CharField(max_length=255, blank=True)\n   224→    image_url = models.URLField(blank=True)\n   225→    created_at = models.DateTimeField(auto_now_add=True)\n   226→    updated_at = models.DateTimeField(auto_now=True)\n   227→```\n   228→\n   229→## Authentication Flow\n   230→\n   231→### Social Login Flow\n   232→\n   233→1. **Frontend**: User clicks Google/Facebook login button\n   234→2. **OAuth Provider**: User authenticates with provider\n   235→3. **NextAuth**: Receives OAuth callback with user data\n   236→4. **JWT Creation**: NextAuth creates signed JWT with user information\n   237→5. **Cookie Storage**: JWT stored in secure HTTP-only cookie\n   238→6. **Backend Sync**: Subsequent API calls include JWT\n   239→7. **Django Validation**: Backend validates JWT and creates/updates user\n   240→8. **Session Establishment**: User authenticated across entire application\n   241→\n   242→### Credentials Login Flow\n   243→\n   244→1. **Frontend**: User submits email/password form\n   245→2. **NextAuth**: Validates credentials (can integrate with Django)\n   246→3. **JWT Creation**: Creates JWT for authenticated user\n   247→4. **Backend Sync**: Same synchronization process as social login\n   248→\n   249→### API Authentication Flow\n   250→\n   251→1. **Request**: Frontend makes API request with cookies\n   252→2. **Middleware**: Django middleware extracts JWT from cookies/headers\n   253→3. **Validation**: JWT signature and expiration validated\n   254→4. **User Lookup**: User retrieved/created from JWT payload\n   255→5. **Authorization**: Request proceeds with authenticated user context\n   256→\n   257→## Security Features\n   258→\n   259→### JWT Security\n   260→- **Signed Tokens**: Tokens signed with shared secret\n   261→- **Expiration**: Configurable token expiration (24 hours default)\n   262→- **No Sensitive Data**: Tokens contain minimal user information\n   263→- **Secure Storage**: HTTP-only cookies prevent XSS attacks\n   264→\n   265→### Session Security\n   266→- **CSRF Protection**: Django CSRF middleware enabled\n   267→- **Secure Cookies**: HTTPS-only cookies in production\n   268→- **SameSite Cookies**: CSRF protection via SameSite attribute\n   269→- **Token Refresh**: Automatic token refresh via NextAuth\n   270→\n   271→### Data Protection\n   272→- **Password Hashing**: Django's robust password hashing\n   273→- **OAuth Security**: No password storage for social logins\n   274→- **User Validation**: Email verification and account validation\n   275→- **Brute Force Protection**: Rate limiting on authentication endpoints\n   276→\n   277→## API Endpoints\n   278→\n   279→### Authentication Endpoints\n   280→\n   281→#### Get Current User\n   282→```http\n   283→GET /api/users/me/\n   284→Authorization: Bearer <jwt-token>\n   285→\n   286→Response:\n   287→{\n   288→  \"id\": 1,\n   289→  \"email\": \"user@example.com\",\n   290→  \"first_name\": \"John\",\n   291→  \"last_name\": \"Doe\",\n   292→  \"profile\": {\n   293→    \"auth_provider\": \"google\",\n   294→    \"image_url\": \"https://...\",\n   295→    \"created_at\": \"2024-01-01T00:00:00Z\"\n   296→  }\n   297→}\n   298→```\n   299→\n   300→#### Sync User Data\n   301→```http\n   302→POST /api/auth/sync/\n   303→Content-Type: application/json\n   304→\n   305→{\n   306→  \"email\": \"user@example.com\",\n   307→  \"first_name\": \"John\",\n   308→  \"last_name\": \"Doe\",\n   309→  \"image_url\": \"https://...\",\n   310→  \"auth_provider\": \"google\"\n   311→}\n   312→```\n   313→\n   314→## Testing\n   315→\n   316→### Test Configuration\n   317→\n   318→#### Django Tests\n   319→```python\n   320→# fowldata/accounts/tests/test_nextauth_backend.py\n   321→@pytest.mark.django_db\n   322→class TestNextAuthJWTBackend:\n   323→    def test_authenticate_valid_token(self):\n   324→        # Test JWT authentication with valid token\n   325→        \n   326→    def test_authenticate_invalid_token(self):\n   327→        # Test authentication failure with invalid token\n   328→        \n   329→    def test_user_creation_from_jwt(self):\n   330→        # Test automatic user creation from JWT payload\n   331→```\n   332→\n   333→#### Frontend Tests\n   334→```typescript\n   335→// frontend/src/__tests__/auth.test.ts\n   336→describe('NextAuth Configuration', () => {\n   337→  it('should have required environment variables', () => {\n   338→    // Test environment configuration\n   339→  });\n   340→  \n   341→  it('should configure OAuth providers correctly', () => {\n   342→    // Test provider configuration\n   343→  });\n   344→});\n   345→```\n   346→\n   347→### Test User Credentials\n   348→\n   349→For E2E testing:\n   350→```bash\n   351→# Test user credentials\n   352→EMAIL=mark@mail.com\n   353→PASSWORD=1@Tsgstp\n   354→```\n   355→\n   356→## Troubleshooting\n   357→\n   358→### Common Issues\n   359→\n   360→#### \"Invalid JWT token\" errors\n   361→- Verify `AUTH_SECRET` matches between frontend and backend\n   362→- Check JWT is being sent in cookies or Authorization header\n   363→- Ensure token hasn't expired\n   364→\n   365→#### User not created in Django\n   366→- Check Django logs for authentication errors\n   367→- Verify UserProfile migration has been run\n   368→- Ensure signals are properly connected\n   369→\n   370→#### CORS errors\n   371→- Add frontend URL to Django's `CORS_ALLOWED_ORIGINS`\n   372→- Ensure `withCredentials: true` in API client configuration\n   373→\n   374→#### OAuth redirect errors\n   375→- Verify callback URLs match exactly in OAuth provider settings\n   376→- Check that OAuth app is in \"Live\" mode for production\n   377→\n   378→### Debug Mode\n   379→\n   380→Enable NextAuth debug mode:\n   381→```bash\n   382→# frontend/.env.local\n   383→NEXTAUTH_DEBUG=true\n   384→```\n   385→\n   386→This provides detailed logging in browser console and server logs.\n   387→\n   388→### Health Check\n   389→\n   390→Run the authentication health check:\n   391→```bash\n   392→node auth-health-check.js\n   393→```\n   394→\n   395→## Migration from Legacy Auth\n   396→\n   397→The system supports gradual migration:\n   398→\n   399→1. **Existing tokens**: Old token-based auth still works\n   400→2. **User linking**: Existing users automatically linked to NextAuth\n   401→3. **Gradual rollout**: Can be deployed without breaking existing sessions\n   402→4. **Cleanup**: Remove old auth system after migration complete\n   403→\n   404→## Production Considerations\n   405→\n   406→### Security Checklist\n   407→- [ ] Use strong `AUTH_SECRET` (32+ character random string)\n   408→- [ ] Enable HTTPS for all OAuth callbacks\n   409→- [ ] Configure proper CORS settings\n   410→- [ ] Set up OAuth apps for production domains\n   411→- [ ] Enable security headers in Django\n   412→- [ ] Configure proper cookie settings (Secure, SameSite)\n   413→\n   414→### Performance Optimization\n   415→- [ ] Configure JWT expiration appropriately\n   416→- [ ] Set up proper session storage (Redis for production)\n   417→- [ ] Optimize user lookup queries\n   418→- [ ] Configure connection pooling\n   419→- [ ] Set up monitoring for authentication failures\n   420→\n   421→### Monitoring\n   422→- [ ] Track authentication success/failure rates\n   423→- [ ] Monitor JWT validation performance\n   424→- [ ] Set up alerts for authentication errors\n   425→- [ ] Log OAuth provider issues\n   426→- [ ] Monitor user registration patterns\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"732ba4fb-a364-45f2-bd79-b1c69c884533","timestamp":"2025-08-25T04:39:34.473Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/markelmore/_code/fowldata/docs/authentication.md","content":"# 🔐 Authentication System\n\nFowlData uses a sophisticated authentication system that integrates NextAuth.js (frontend) with Django JWT authentication (backend).\n\n## Architecture Overview\n\n```\n┌─────────────────┐    JWT Token    ┌─────────────────┐\n│   NextAuth.js   │◄──────────────►│   Django JWT    │\n│   (Frontend)    │                │   (Backend)     │\n└─────────────────┘                └─────────────────┘\n         │                                   │\n         ▼                                   ▼\n┌─────────────────┐                ┌─────────────────┐\n│  OAuth Providers│                │  User Database  │\n│ Google/Facebook │                │   PostgreSQL    │\n└─────────────────┘                └─────────────────┘\n```\n\n## Key Features\n\n- **Unified Authentication**: Single sign-on across frontend and backend\n- **Social Login**: Google, Facebook, and Instagram OAuth\n- **Credentials Login**: Traditional email/password authentication\n- **JWT Tokens**: Secure token-based authentication\n- **Automatic Sync**: User data synchronized between NextAuth and Django\n- **Session Management**: Secure session handling with HTTP-only cookies\n\n## Configuration\n\n### Environment Variables\n\nBoth frontend and backend require the same `AUTH_SECRET`:\n\n```bash\n# .env.local (Backend)\nAUTH_SECRET=your-secret-key-here\n\n# frontend/.env.local (Frontend)\nAUTH_SECRET=your-secret-key-here\nNEXTAUTH_URL=http://localhost:3000\n\n# OAuth Providers\nGOOGLE_CLIENT_ID=your-google-client-id\nGOOGLE_CLIENT_SECRET=your-google-client-secret\nFACEBOOK_CLIENT_ID=your-facebook-app-id\nFACEBOOK_CLIENT_SECRET=your-facebook-app-secret\n```\n\n### Generate AUTH_SECRET\n\n```bash\nopenssl rand -base64 32\n```\n\n## OAuth Provider Setup\n\n### Google OAuth\n\n1. Go to [Google Cloud Console](https://console.cloud.google.com/)\n2. Create/select project and enable Google+ API\n3. Create OAuth 2.0 Client ID\n4. Add authorized redirect URIs:\n   - `http://localhost:3000/api/auth/callback/google` (development)\n   - `https://yourdomain.com/api/auth/callback/google` (production)\n\n### Facebook OAuth\n\n1. Go to [Facebook Developers](https://developers.facebook.com/)\n2. Create app and add \"Facebook Login\" product\n3. Configure OAuth redirect URIs:\n   - `http://localhost:3000/api/auth/callback/facebook` (development)\n   - `https://yourdomain.com/api/auth/callback/facebook` (production)\n\n### Instagram OAuth\n\n1. Use Facebook Developers platform\n2. Add \"Instagram Basic Display\" product\n3. Configure redirect URIs similarly to Facebook\n\n## Implementation Details\n\n### Frontend (NextAuth.js)\n\n#### Configuration File\n**Location**: `frontend/src/app/api/auth/[...nextauth]/route.ts`\n\n```typescript\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n  providers: [\n    Google({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    }),\n    Facebook({\n      clientId: process.env.FACEBOOK_CLIENT_ID!,\n      clientSecret: process.env.FACEBOOK_CLIENT_SECRET!,\n    }),\n    Credentials({\n      // Email/password authentication\n    }),\n  ],\n  session: {\n    strategy: \"jwt\",\n    maxAge: 24 * 60 * 60, // 24 hours\n  },\n  callbacks: {\n    jwt: async ({ token, user, account }) => {\n      // Custom JWT handling\n    },\n    session: async ({ session, token }) => {\n      // Session customization\n    },\n  },\n})\n```\n\n#### API Client Integration\n**Location**: `frontend/src/lib/api/client.ts`\n\n```typescript\nconst apiClient = {\n  async request(endpoint: string, options: RequestInit = {}) {\n    // Automatically includes authentication cookies\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      ...options,\n      credentials: 'include', // Include cookies\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    });\n    \n    if (response.status === 401) {\n      // Redirect to sign-in on authentication failure\n      window.location.href = '/auth/signin';\n    }\n    \n    return response;\n  }\n};\n```\n\n### Backend (Django)\n\n#### JWT Authentication Backend\n**Location**: `fowldata/accounts/nextauth_backend.py`\n\n```python\nclass NextAuthJWTBackend:\n    def authenticate(self, request, **kwargs):\n        # Extract JWT from request headers or cookies\n        token = self.get_token_from_request(request)\n        if not token:\n            return None\n            \n        try:\n            # Verify JWT signature\n            payload = jwt.decode(\n                token, \n                settings.AUTH_SECRET, \n                algorithms=[\"HS256\"]\n            )\n            \n            # Get or create user from JWT claims\n            user = self.get_or_create_user(payload)\n            return user\n            \n        except jwt.InvalidTokenError:\n            return None\n```\n\n#### Authentication Middleware\n**Location**: `fowldata/accounts/middleware.py`\n\n```python\nclass NextAuthJWTMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        # Authenticate user for each request\n        user = authenticate(request)\n        if user:\n            request.user = user\n        \n        response = self.get_response(request)\n        return response\n```\n\n#### Django REST Framework Integration\n**Location**: `fowldata/accounts/authentication.py`\n\n```python\nclass NextAuthJWTAuthentication(BaseAuthentication):\n    def authenticate(self, request):\n        backend = NextAuthJWTBackend()\n        user = backend.authenticate(request)\n        \n        if user and user.is_active:\n            return (user, None)\n        return None\n```\n\n### User Models\n\n#### Django User Model\n**Location**: `fowldata/accounts/models.py`\n\n```python\nclass MyUser(AbstractUser):\n    email = models.EmailField(unique=True)\n    first_name = models.CharField(max_length=150)\n    last_name = models.CharField(max_length=150)\n    is_active = models.BooleanField(default=True)\n    \n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = ['first_name', 'last_name']\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(MyUser, on_delete=models.CASCADE)\n    auth_provider = models.CharField(max_length=50)  # 'google', 'facebook', 'credentials'\n    external_id = models.CharField(max_length=255, blank=True)\n    image_url = models.URLField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n```\n\n## Authentication Flow\n\n### Social Login Flow\n\n1. **Frontend**: User clicks Google/Facebook login button\n2. **OAuth Provider**: User authenticates with provider\n3. **NextAuth**: Receives OAuth callback with user data\n4. **JWT Creation**: NextAuth creates signed JWT with user information\n5. **Cookie Storage**: JWT stored in secure HTTP-only cookie\n6. **Backend Sync**: Subsequent API calls include JWT\n7. **Django Validation**: Backend validates JWT and creates/updates user\n8. **Session Establishment**: User authenticated across entire application\n\n### Credentials Login Flow\n\n1. **Frontend**: User submits email/password form\n2. **NextAuth**: Validates credentials (can integrate with Django)\n3. **JWT Creation**: Creates JWT for authenticated user\n4. **Backend Sync**: Same synchronization process as social login\n\n### API Authentication Flow\n\n1. **Request**: Frontend makes API request with cookies\n2. **Middleware**: Django middleware extracts JWT from cookies/headers\n3. **Validation**: JWT signature and expiration validated\n4. **User Lookup**: User retrieved/created from JWT payload\n5. **Authorization**: Request proceeds with authenticated user context\n\n## Security Features\n\n### JWT Security\n- **Signed Tokens**: Tokens signed with shared secret\n- **Expiration**: Configurable token expiration (24 hours default)\n- **No Sensitive Data**: Tokens contain minimal user information\n- **Secure Storage**: HTTP-only cookies prevent XSS attacks\n\n### Session Security\n- **CSRF Protection**: Django CSRF middleware enabled\n- **Secure Cookies**: HTTPS-only cookies in production\n- **SameSite Cookies**: CSRF protection via SameSite attribute\n- **Token Refresh**: Automatic token refresh via NextAuth\n\n### Data Protection\n- **Password Hashing**: Django's robust password hashing\n- **OAuth Security**: No password storage for social logins\n- **User Validation**: Email verification and account validation\n- **Brute Force Protection**: Rate limiting on authentication endpoints\n\n## API Endpoints\n\n### Authentication Endpoints\n\n#### Get Current User\n```http\nGET /api/users/me/\nAuthorization: Bearer <jwt-token>\n\nResponse:\n{\n  \"id\": 1,\n  \"email\": \"user@example.com\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"profile\": {\n    \"auth_provider\": \"google\",\n    \"image_url\": \"https://...\",\n    \"created_at\": \"2024-01-01T00:00:00Z\"\n  }\n}\n```\n\n#### Sync User Data\n```http\nPOST /api/auth/sync/\nContent-Type: application/json\n\n{\n  \"email\": \"user@example.com\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"image_url\": \"https://...\",\n  \"auth_provider\": \"google\"\n}\n```\n\n## Testing\n\n### Test Configuration\n\n#### Django Tests\n```python\n# fowldata/accounts/tests/test_nextauth_backend.py\n@pytest.mark.django_db\nclass TestNextAuthJWTBackend:\n    def test_authenticate_valid_token(self):\n        # Test JWT authentication with valid token\n        \n    def test_authenticate_invalid_token(self):\n        # Test authentication failure with invalid token\n        \n    def test_user_creation_from_jwt(self):\n        # Test automatic user creation from JWT payload\n```\n\n#### Frontend Tests\n```typescript\n// frontend/src/__tests__/auth.test.ts\ndescribe('NextAuth Configuration', () => {\n  it('should have required environment variables', () => {\n    // Test environment configuration\n  });\n  \n  it('should configure OAuth providers correctly', () => {\n    // Test provider configuration\n  });\n});\n```\n\n### Test User Credentials\n\nFor E2E testing:\n```bash\n# Test user credentials\nEMAIL=mark@mail.com\nPASSWORD=1@Tsgstp\n```\n\n## Troubleshooting\n\n### Common Issues\n\n#### \"Invalid JWT token\" errors\n- Verify `AUTH_SECRET` matches between frontend and backend\n- Check JWT is being sent in cookies or Authorization header\n- Ensure token hasn't expired\n\n#### User not created in Django\n- Check Django logs for authentication errors\n- Verify UserProfile migration has been run\n- Ensure signals are properly connected\n\n#### CORS errors\n- Add frontend URL to Django's `CORS_ALLOWED_ORIGINS`\n- Ensure `withCredentials: true` in API client configuration\n\n#### OAuth redirect errors\n- Verify callback URLs match exactly in OAuth provider settings\n- Check that OAuth app is in \"Live\" mode for production\n\n### Debug Mode\n\nEnable NextAuth debug mode:\n```bash\n# frontend/.env.local\nNEXTAUTH_DEBUG=true\n```\n\nThis provides detailed logging in browser console and server logs.\n\n### Health Check\n\nRun the authentication health check:\n```bash\nnode auth-health-check.js\n```\n\n## Migration from Legacy Auth\n\nThe system supports gradual migration:\n\n1. **Existing tokens**: Old token-based auth still works\n2. **User linking**: Existing users automatically linked to NextAuth\n3. **Gradual rollout**: Can be deployed without breaking existing sessions\n4. **Cleanup**: Remove old auth system after migration complete\n\n## Production Considerations\n\n### Security Checklist\n- [ ] Use strong `AUTH_SECRET` (32+ character random string)\n- [ ] Enable HTTPS for all OAuth callbacks\n- [ ] Configure proper CORS settings\n- [ ] Set up OAuth apps for production domains\n- [ ] Enable security headers in Django\n- [ ] Configure proper cookie settings (Secure, SameSite)\n\n### Performance Optimization\n- [ ] Configure JWT expiration appropriately\n- [ ] Set up proper session storage (Redis for production)\n- [ ] Optimize user lookup queries\n- [ ] Configure connection pooling\n- [ ] Set up monitoring for authentication failures\n\n### Monitoring\n- [ ] Track authentication success/failure rates\n- [ ] Monitor JWT validation performance\n- [ ] Set up alerts for authentication errors\n- [ ] Log OAuth provider issues\n- [ ] Monitor user registration patterns","numLines":426,"startLine":1,"totalLines":426}}}
{"parentUuid":"732ba4fb-a364-45f2-bd79-b1c69c884533","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01L7wtzhPq5SUf7Uv5LcmgQb","type":"tool_result","content":"     1→# Mapping & Geolocation Guide\n     2→\n     3→FowlData uses Mapbox GL JS v3+ with react-map-gl v8 for interactive mapping and geospatial features.\n     4→\n     5→## Overview\n     6→\n     7→The mapping system provides:\n     8→- **Interactive Map Interface** - Pan, zoom, and click interactions\n     9→- **Hunt Location Tracking** - Precise GPS coordinates for hunting spots\n    10→- **Layer Management** - Multiple data layers with privacy controls\n    11→- **Clustering** - Automatic grouping of nearby hunt locations\n    12→- **Geospatial Queries** - Find hunts within radius, nearest locations\n    13→- **Weather Overlay** - Real-time and historical weather data visualization\n    14→\n    15→## Technical Architecture\n    16→\n    17→### Map Stack\n    18→- **Mapbox GL JS v3.6+** - Core mapping engine\n    19→- **react-map-gl v8** - React integration layer\n    20→- **PostGIS** - Database geospatial extensions\n    21→- **Custom Style** - Satellite imagery with hunt-specific overlays\n    22→\n    23→### Critical Configuration\n    24→\n    25→⚠️ **Essential for Mapbox GL JS v3+ with react-map-gl v8**:\n    26→\n    27→```typescript\n    28→import mapboxgl from 'mapbox-gl';\n    29→\n    30→// REQUIRED: Explicit token configuration for layer rendering\n    31→const MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;\n    32→if (MAPBOX_TOKEN) {\n    33→  mapboxgl.accessToken = MAPBOX_TOKEN;\n    34→}\n    35→```\n    36→\n    37→**Without this configuration**:\n    38→- Map loads successfully ✅\n    39→- Data processing works ✅\n    40→- **NO layers render** ❌\n    41→- No console errors (silent failure) ❌\n    42→\n    43→## Map Components\n    44→\n    45→### Core Map Component\n    46→\n    47→```typescript\n    48→// components/map/UnifiedMap.tsx\n    49→import { Map, Source, Layer } from 'react-map-gl/mapbox';\n    50→import mapboxgl from 'mapbox-gl';\n    51→\n    52→// Critical: Set global access token\n    53→mapboxgl.accessToken = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN!;\n    54→\n    55→export default function UnifiedMap({ hunts, onHuntClick }: MapProps) {\n    56→  return (\n    57→    <Map\n    58→      mapboxAccessToken={process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN}\n    59→      initialViewState={{\n    60→        longitude: -122.4194,\n    61→        latitude: 37.7749,\n    62→        zoom: 9\n    63→      }}\n    64→      style={{ width: '100%', height: '100%' }}\n    65→      mapStyle=\"mapbox://styles/your-username/your-style-id\"\n    66→    >\n    67→      {/* Hunt Locations Layer */}\n    68→      <Source id=\"hunts\" type=\"geojson\" data={huntGeoJSON}>\n    69→        <Layer\n    70→          id=\"hunt-points\"\n    71→          type=\"circle\"\n    72→          paint={{\n    73→            'circle-radius': 8,\n    74→            'circle-color': '#2563eb',\n    75→            'circle-stroke-width': 2,\n    76→            'circle-stroke-color': '#ffffff'\n    77→          }}\n    78→        />\n    79→      </Source>\n    80→      \n    81→      {/* Controls */}\n    82→      <NavigationControl position=\"top-right\" />\n    83→      <ScaleControl position=\"bottom-left\" />\n    84→    </Map>\n    85→  );\n    86→}\n    87→```\n    88→\n    89→### Layer Structure Requirements\n    90→\n    91→**react-map-gl v8 Requirements**:\n    92→1. Layer components must be **immediate children** of Source components\n    93→2. **No React fragments** (`<>...</>`) between Source and Layer\n    94→3. **No explicit `source` props** on Layer components inside Source\n    95→\n    96→```typescript\n    97→// ✅ CORRECT\n    98→<Source id=\"hunts\" type=\"geojson\" data={data}>\n    99→  <Layer id=\"hunt-points\" type=\"circle\" paint={...} />\n   100→</Source>\n   101→\n   102→// ❌ WRONG - React fragment breaks layer connection\n   103→<Source id=\"hunts\" type=\"geojson\" data={data}>\n   104→  <>\n   105→    <Layer id=\"hunt-points\" type=\"circle\" paint={...} />\n   106→  </>\n   107→</Source>\n   108→\n   109→// ❌ WRONG - Explicit source prop conflicts\n   110→<Source id=\"hunts\" type=\"geojson\" data={data}>\n   111→  <Layer id=\"hunt-points\" source=\"hunts\" type=\"circle\" paint={...} />\n   112→</Source>\n   113→```\n   114→\n   115→## Geospatial Data Management\n   116→\n   117→### Hunt Location Storage\n   118→\n   119→Locations stored as PostGIS Point geometry:\n   120→\n   121→```sql\n   122→-- Database schema\n   123→CREATE TABLE hunts_hunt (\n   124→    id SERIAL PRIMARY KEY,\n   125→    user_id INTEGER REFERENCES accounts_user(id),\n   126→    location GEOMETRY(Point, 4326) NOT NULL,\n   127→    date DATE NOT NULL,\n   128→    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n   129→);\n   130→\n   131→-- Spatial index for performance\n   132→CREATE INDEX idx_hunts_location ON hunts_hunt USING GIST (location);\n   133→```\n   134→\n   135→### GeoJSON API Response\n   136→\n   137→```json\n   138→{\n   139→  \"type\": \"FeatureCollection\",\n   140→  \"features\": [\n   141→    {\n   142→      \"type\": \"Feature\",\n   143→      \"properties\": {\n   144→        \"id\": 1,\n   145→        \"date\": \"2025-01-15\",\n   146→        \"birds_harvested\": 3,\n   147→        \"success_rate\": 0.375,\n   148→        \"privacy_level\": \"private\",\n   149→        \"weather_conditions\": {\n   150→          \"temperature\": 45.2,\n   151→          \"wind_speed\": 12,\n   152→          \"conditions\": \"partly_cloudy\"\n   153→        }\n   154→      },\n   155→      \"geometry\": {\n   156→        \"type\": \"Point\",\n   157→        \"coordinates\": [-122.6784, 45.5152]\n   158→      }\n   159→    }\n   160→  ]\n   161→}\n   162→```\n   163→\n   164→## Layer System\n   165→\n   166→### Layer Categories\n   167→\n   168→1. **Hunt Locations** - User hunting spots with privacy controls\n   169→2. **Weather Overlay** - Current conditions and forecasts\n   170→3. **Waterfowl Management Areas** - Public hunting areas\n   171→4. **Migration Routes** - Seasonal bird movement patterns\n   172→5. **User Shared Locations** - Community hunting spots\n   173→\n   174→### Privacy Levels\n   175→\n   176→- **Private** - Only visible to hunt owner\n   177→- **Friends** - Shared with approved connections\n   178→- **Public** - Visible to all users\n   179→- **Anonymous** - Public but without user attribution\n   180→\n   181→### Layer Toggle System\n   182→\n   183→```typescript\n   184→// Layer visibility management\n   185→interface LayerState {\n   186→  [layerId: string]: {\n   187→    visible: boolean;\n   188→    privacy: 'private' | 'shared' | 'public';\n   189→    style: LayerStyle;\n   190→  };\n   191→}\n   192→\n   193→const useLayerToggle = () => {\n   194→  const [layers, setLayers] = useState<LayerState>({});\n   195→  \n   196→  const toggleLayer = (layerId: string, visible: boolean) => {\n   197→    setLayers(prev => ({\n   198→      ...prev,\n   199→      [layerId]: { ...prev[layerId], visible }\n   200→    }));\n   201→  };\n   202→  \n   203→  return { layers, toggleLayer };\n   204→};\n   205→```\n   206→\n   207→## Clustering System\n   208→\n   209→### Automatic Clustering\n   210→\n   211→Hunt locations automatically cluster when:\n   212→- Zoom level < 12 (distant view)\n   213→- Multiple hunts within 50px radius\n   214→- More than 100 points visible on screen\n   215→\n   216→### Cluster Configuration\n   217→\n   218→```typescript\n   219→// Mapbox cluster source configuration\n   220→const clusterSource = {\n   221→  type: 'geojson' as const,\n   222→  data: huntGeoJSON,\n   223→  cluster: true,\n   224→  clusterMaxZoom: 14,\n   225→  clusterRadius: 50,\n   226→  clusterProperties: {\n   227→    // Aggregate hunt statistics\n   228→    total_birds: ['+', ['get', 'birds_harvested']],\n   229→    total_hunts: ['+', 1],\n   230→    avg_success: ['/', ['+', ['get', 'success_rate']], ['get', 'point_count']]\n   231→  }\n   232→};\n   233→```\n   234→\n   235→### Cluster Visualization\n   236→\n   237→```typescript\n   238→// Cluster circle styling\n   239→const clusterLayer: LayerProps = {\n   240→  id: 'clusters',\n   241→  type: 'circle',\n   242→  source: 'hunts',\n   243→  filter: ['has', 'point_count'],\n   244→  paint: {\n   245→    'circle-color': [\n   246→      'step',\n   247→      ['get', 'point_count'],\n   248→      '#51bbd3',    // < 10 hunts\n   249→      10, '#f1c40f', // 10-30 hunts  \n   250→      30, '#e74c3c'  // > 30 hunts\n   251→    ],\n   252→    'circle-radius': [\n   253→      'step',\n   254→      ['get', 'point_count'],\n   255→      20,    // < 10 hunts\n   256→      10, 30, // 10-30 hunts\n   257→      30, 40  // > 30 hunts  \n   258→    ]\n   259→  }\n   260→};\n   261→\n   262→// Cluster count labels\n   263→const clusterCountLayer: LayerProps = {\n   264→  id: 'cluster-count',\n   265→  type: 'symbol',\n   266→  source: 'hunts', \n   267→  filter: ['has', 'point_count'],\n   268→  layout: {\n   269→    'text-field': '{point_count_abbreviated}',\n   270→    'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n   271→    'text-size': 12\n   272→  }\n   273→};\n   274→```\n   275→\n   276→## Location Services\n   277→\n   278→### GPS Coordinate Capture\n   279→\n   280→```typescript\n   281→const useLocationCapture = () => {\n   282→  const [location, setLocation] = useState<Coordinates | null>(null);\n   283→  const [accuracy, setAccuracy] = useState<number>(0);\n   284→  \n   285→  const captureLocation = () => {\n   286→    navigator.geolocation.getCurrentPosition(\n   287→      (position) => {\n   288→        setLocation({\n   289→          latitude: position.coords.latitude,\n   290→          longitude: position.coords.longitude\n   291→        });\n   292→        setAccuracy(position.coords.accuracy);\n   293→      },\n   294→      (error) => {\n   295→        console.error('GPS capture failed:', error);\n   296→      },\n   297→      {\n   298→        enableHighAccuracy: true,\n   299→        timeout: 10000,\n   300→        maximumAge: 300000 // 5 minutes\n   301→      }\n   302→    );\n   303→  };\n   304→  \n   305→  return { location, accuracy, captureLocation };\n   306→};\n   307→```\n   308→\n   309→### Address Geocoding\n   310→\n   311→Integration with Mapbox Geocoding API for address lookup:\n   312→\n   313→```typescript\n   314→const geocodeAddress = async (address: string) => {\n   315→  const response = await fetch(\n   316→    `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(address)}.json?access_token=${MAPBOX_TOKEN}`\n   317→  );\n   318→  \n   319→  const data = await response.json();\n   320→  \n   321→  if (data.features.length > 0) {\n   322→    const [longitude, latitude] = data.features[0].center;\n   323→    return {\n   324→      latitude,\n   325→      longitude,\n   326→      address: data.features[0].place_name\n   327→    };\n   328→  }\n   329→  \n   330→  throw new Error('Address not found');\n   331→};\n   332→```\n   333→\n   334→## Weather Integration\n   335→\n   336→### Weather Overlay Layer\n   337→\n   338→```typescript\n   339→// Weather data source\n   340→const weatherSource = {\n   341→  type: 'geojson' as const,\n   342→  data: {\n   343→    type: 'FeatureCollection',\n   344→    features: weatherStations.map(station => ({\n   345→      type: 'Feature',\n   346→      properties: {\n   347→        temperature: station.temperature,\n   348→        wind_speed: station.wind_speed,\n   349→        wind_direction: station.wind_direction,\n   350→        conditions: station.conditions\n   351→      },\n   352→      geometry: {\n   353→        type: 'Point',\n   354→        coordinates: [station.longitude, station.latitude]\n   355→      }\n   356→    }))\n   357→  }\n   358→};\n   359→\n   360→// Weather symbol layer\n   361→const weatherLayer: LayerProps = {\n   362→  id: 'weather-symbols',\n   363→  type: 'symbol',\n   364→  source: 'weather',\n   365→  layout: {\n   366→    'icon-image': [\n   367→      'case',\n   368→      ['==', ['get', 'conditions'], 'sunny'], 'sun-icon',\n   369→      ['==', ['get', 'conditions'], 'cloudy'], 'cloud-icon',\n   370→      ['==', ['get', 'conditions'], 'rainy'], 'rain-icon',\n   371→      'default-weather-icon'\n   372→    ],\n   373→    'icon-size': 0.8,\n   374→    'text-field': '{temperature}°F',\n   375→    'text-offset': [0, 2],\n   376→    'text-size': 12\n   377→  }\n   378→};\n   379→```\n   380→\n   381→## Geospatial Queries\n   382→\n   383→### Nearby Hunt Search\n   384→\n   385→Backend PostGIS query for spatial search:\n   386→\n   387→```python\n   388→# Django ORM with PostGIS\n   389→from django.contrib.gis.geos import Point\n   390→from django.contrib.gis.measure import Distance\n   391→\n   392→def find_nearby_hunts(latitude, longitude, radius_km=50):\n   393→    center_point = Point(longitude, latitude, srid=4326)\n   394→    \n   395→    return Hunt.objects.filter(\n   396→        location__distance_lte=(center_point, Distance(km=radius_km))\n   397→    ).annotate(\n   398→        distance=Distance('location', center_point)\n   399→    ).order_by('distance')[:20]\n   400→```\n   401→\n   402→### Frontend Spatial Filtering\n   403→\n   404→```typescript\n   405→const useNearbyHunts = (center: Coordinates, radiusKm: number) => {\n   406→  const [nearbyHunts, setNearbyHunts] = useState<Hunt[]>([]);\n   407→  \n   408→  useEffect(() => {\n   409→    const fetchNearbyHunts = async () => {\n   410→      const response = await fetch(\n   411→        `/api/hunts/nearby/?lat=${center.latitude}&lng=${center.longitude}&radius=${radiusKm}`\n   412→      );\n   413→      const data = await response.json();\n   414→      setNearbyHunts(data.results);\n   415→    };\n   416→    \n   417→    fetchNearbyHunts();\n   418→  }, [center, radiusKm]);\n   419→  \n   420→  return nearbyHunts;\n   421→};\n   422→```\n   423→\n   424→## Performance Optimization\n   425→\n   426→### Data Loading Strategies\n   427→\n   428→1. **Viewport-based Loading** - Only load hunts visible in current map bounds\n   429→2. **Level-of-Detail** - Simplified data at low zoom levels\n   430→3. **Clustering** - Reduce visual complexity and API calls\n   431→4. **Caching** - Cache geospatial queries with spatial indexes\n   432→\n   433→### Map Performance\n   434→\n   435→```typescript\n   436→// Optimize re-renders with useCallback\n   437→const mapCallbacks = {\n   438→  onMove: useCallback((evt: ViewStateChangeEvent) => {\n   439→    setViewState(evt.viewState);\n   440→  }, []),\n   441→  \n   442→  onClick: useCallback((event: MapLayerMouseEvent) => {\n   443→    const features = event.features;\n   444→    if (features && features.length > 0) {\n   445→      handleHuntClick(features[0].properties?.id);\n   446→    }\n   447→  }, [handleHuntClick])\n   448→};\n   449→\n   450→// Memoize expensive GeoJSON processing\n   451→const huntGeoJSON = useMemo(() => {\n   452→  return {\n   453→    type: 'FeatureCollection',\n   454→    features: hunts.map(hunt => transformToGeoJSON(hunt))\n   455→  };\n   456→}, [hunts]);\n   457→```\n   458→\n   459→## Common Issues & Solutions\n   460→\n   461→### Layer Not Rendering\n   462→**Problem**: Map loads but no custom layers appear\n   463→**Solution**: Ensure `mapboxgl.accessToken` is set before Map component renders\n   464→\n   465→### Control Positioning\n   466→**Problem**: Custom controls overlap or position incorrectly\n   467→**Solution**: Use explicit positioning and z-index management\n   468→\n   469→```typescript\n   470→// Control positioning for Mapbox GL JS v3+\n   471→<NavigationControl position=\"top-right\" />\n   472→<ScaleControl position=\"bottom-left\" />\n   473→\n   474→// Custom positioned controls\n   475→<div className=\"absolute top-4 left-4 z-10\">\n   476→  <LayerTogglePanel />\n   477→</div>\n   478→```\n   479→\n   480→### Click Event Issues\n   481→**Problem**: Map clicks not registering on layers  \n   482→**Solution**: Ensure proper layer configuration and event handlers\n   483→\n   484→```typescript\n   485→// Proper click handling\n   486→const mapRef = useRef<MapRef>(null);\n   487→\n   488→const handleMapClick = (event: MapLayerMouseEvent) => {\n   489→  const map = mapRef.current?.getMap();\n   490→  const features = map?.queryRenderedFeatures(event.point, {\n   491→    layers: ['hunt-points', 'clusters']\n   492→  });\n   493→  \n   494→  if (features && features.length > 0) {\n   495→    handleFeatureClick(features[0]);\n   496→  }\n   497→};\n   498→```\n   499→\n   500→### Memory Leaks\n   501→**Problem**: Map component memory usage grows over time\n   502→**Solution**: Proper cleanup and ref management\n   503→\n   504→```typescript\n   505→useEffect(() => {\n   506→  return () => {\n   507→    // Cleanup map resources\n   508→    mapRef.current?.getMap().remove();\n   509→  };\n   510→}, []);\n   511→```\n   512→\n   513→For detailed troubleshooting, see the [Mapbox Integration Guide](./MAPBOX_LAYER_RENDERING_INVESTIGATION.md) and [Performance Optimization](./MAPBOX_PERFORMANCE_OPTIMIZATION.md) documents.\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"62563c20-5d9b-451a-86db-27ec1de6513c","timestamp":"2025-08-25T04:39:34.473Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/markelmore/_code/fowldata/docs/mapping.md","content":"# Mapping & Geolocation Guide\n\nFowlData uses Mapbox GL JS v3+ with react-map-gl v8 for interactive mapping and geospatial features.\n\n## Overview\n\nThe mapping system provides:\n- **Interactive Map Interface** - Pan, zoom, and click interactions\n- **Hunt Location Tracking** - Precise GPS coordinates for hunting spots\n- **Layer Management** - Multiple data layers with privacy controls\n- **Clustering** - Automatic grouping of nearby hunt locations\n- **Geospatial Queries** - Find hunts within radius, nearest locations\n- **Weather Overlay** - Real-time and historical weather data visualization\n\n## Technical Architecture\n\n### Map Stack\n- **Mapbox GL JS v3.6+** - Core mapping engine\n- **react-map-gl v8** - React integration layer\n- **PostGIS** - Database geospatial extensions\n- **Custom Style** - Satellite imagery with hunt-specific overlays\n\n### Critical Configuration\n\n⚠️ **Essential for Mapbox GL JS v3+ with react-map-gl v8**:\n\n```typescript\nimport mapboxgl from 'mapbox-gl';\n\n// REQUIRED: Explicit token configuration for layer rendering\nconst MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;\nif (MAPBOX_TOKEN) {\n  mapboxgl.accessToken = MAPBOX_TOKEN;\n}\n```\n\n**Without this configuration**:\n- Map loads successfully ✅\n- Data processing works ✅\n- **NO layers render** ❌\n- No console errors (silent failure) ❌\n\n## Map Components\n\n### Core Map Component\n\n```typescript\n// components/map/UnifiedMap.tsx\nimport { Map, Source, Layer } from 'react-map-gl/mapbox';\nimport mapboxgl from 'mapbox-gl';\n\n// Critical: Set global access token\nmapboxgl.accessToken = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN!;\n\nexport default function UnifiedMap({ hunts, onHuntClick }: MapProps) {\n  return (\n    <Map\n      mapboxAccessToken={process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN}\n      initialViewState={{\n        longitude: -122.4194,\n        latitude: 37.7749,\n        zoom: 9\n      }}\n      style={{ width: '100%', height: '100%' }}\n      mapStyle=\"mapbox://styles/your-username/your-style-id\"\n    >\n      {/* Hunt Locations Layer */}\n      <Source id=\"hunts\" type=\"geojson\" data={huntGeoJSON}>\n        <Layer\n          id=\"hunt-points\"\n          type=\"circle\"\n          paint={{\n            'circle-radius': 8,\n            'circle-color': '#2563eb',\n            'circle-stroke-width': 2,\n            'circle-stroke-color': '#ffffff'\n          }}\n        />\n      </Source>\n      \n      {/* Controls */}\n      <NavigationControl position=\"top-right\" />\n      <ScaleControl position=\"bottom-left\" />\n    </Map>\n  );\n}\n```\n\n### Layer Structure Requirements\n\n**react-map-gl v8 Requirements**:\n1. Layer components must be **immediate children** of Source components\n2. **No React fragments** (`<>...</>`) between Source and Layer\n3. **No explicit `source` props** on Layer components inside Source\n\n```typescript\n// ✅ CORRECT\n<Source id=\"hunts\" type=\"geojson\" data={data}>\n  <Layer id=\"hunt-points\" type=\"circle\" paint={...} />\n</Source>\n\n// ❌ WRONG - React fragment breaks layer connection\n<Source id=\"hunts\" type=\"geojson\" data={data}>\n  <>\n    <Layer id=\"hunt-points\" type=\"circle\" paint={...} />\n  </>\n</Source>\n\n// ❌ WRONG - Explicit source prop conflicts\n<Source id=\"hunts\" type=\"geojson\" data={data}>\n  <Layer id=\"hunt-points\" source=\"hunts\" type=\"circle\" paint={...} />\n</Source>\n```\n\n## Geospatial Data Management\n\n### Hunt Location Storage\n\nLocations stored as PostGIS Point geometry:\n\n```sql\n-- Database schema\nCREATE TABLE hunts_hunt (\n    id SERIAL PRIMARY KEY,\n    user_id INTEGER REFERENCES accounts_user(id),\n    location GEOMETRY(Point, 4326) NOT NULL,\n    date DATE NOT NULL,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Spatial index for performance\nCREATE INDEX idx_hunts_location ON hunts_hunt USING GIST (location);\n```\n\n### GeoJSON API Response\n\n```json\n{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"id\": 1,\n        \"date\": \"2025-01-15\",\n        \"birds_harvested\": 3,\n        \"success_rate\": 0.375,\n        \"privacy_level\": \"private\",\n        \"weather_conditions\": {\n          \"temperature\": 45.2,\n          \"wind_speed\": 12,\n          \"conditions\": \"partly_cloudy\"\n        }\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-122.6784, 45.5152]\n      }\n    }\n  ]\n}\n```\n\n## Layer System\n\n### Layer Categories\n\n1. **Hunt Locations** - User hunting spots with privacy controls\n2. **Weather Overlay** - Current conditions and forecasts\n3. **Waterfowl Management Areas** - Public hunting areas\n4. **Migration Routes** - Seasonal bird movement patterns\n5. **User Shared Locations** - Community hunting spots\n\n### Privacy Levels\n\n- **Private** - Only visible to hunt owner\n- **Friends** - Shared with approved connections\n- **Public** - Visible to all users\n- **Anonymous** - Public but without user attribution\n\n### Layer Toggle System\n\n```typescript\n// Layer visibility management\ninterface LayerState {\n  [layerId: string]: {\n    visible: boolean;\n    privacy: 'private' | 'shared' | 'public';\n    style: LayerStyle;\n  };\n}\n\nconst useLayerToggle = () => {\n  const [layers, setLayers] = useState<LayerState>({});\n  \n  const toggleLayer = (layerId: string, visible: boolean) => {\n    setLayers(prev => ({\n      ...prev,\n      [layerId]: { ...prev[layerId], visible }\n    }));\n  };\n  \n  return { layers, toggleLayer };\n};\n```\n\n## Clustering System\n\n### Automatic Clustering\n\nHunt locations automatically cluster when:\n- Zoom level < 12 (distant view)\n- Multiple hunts within 50px radius\n- More than 100 points visible on screen\n\n### Cluster Configuration\n\n```typescript\n// Mapbox cluster source configuration\nconst clusterSource = {\n  type: 'geojson' as const,\n  data: huntGeoJSON,\n  cluster: true,\n  clusterMaxZoom: 14,\n  clusterRadius: 50,\n  clusterProperties: {\n    // Aggregate hunt statistics\n    total_birds: ['+', ['get', 'birds_harvested']],\n    total_hunts: ['+', 1],\n    avg_success: ['/', ['+', ['get', 'success_rate']], ['get', 'point_count']]\n  }\n};\n```\n\n### Cluster Visualization\n\n```typescript\n// Cluster circle styling\nconst clusterLayer: LayerProps = {\n  id: 'clusters',\n  type: 'circle',\n  source: 'hunts',\n  filter: ['has', 'point_count'],\n  paint: {\n    'circle-color': [\n      'step',\n      ['get', 'point_count'],\n      '#51bbd3',    // < 10 hunts\n      10, '#f1c40f', // 10-30 hunts  \n      30, '#e74c3c'  // > 30 hunts\n    ],\n    'circle-radius': [\n      'step',\n      ['get', 'point_count'],\n      20,    // < 10 hunts\n      10, 30, // 10-30 hunts\n      30, 40  // > 30 hunts  \n    ]\n  }\n};\n\n// Cluster count labels\nconst clusterCountLayer: LayerProps = {\n  id: 'cluster-count',\n  type: 'symbol',\n  source: 'hunts', \n  filter: ['has', 'point_count'],\n  layout: {\n    'text-field': '{point_count_abbreviated}',\n    'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n    'text-size': 12\n  }\n};\n```\n\n## Location Services\n\n### GPS Coordinate Capture\n\n```typescript\nconst useLocationCapture = () => {\n  const [location, setLocation] = useState<Coordinates | null>(null);\n  const [accuracy, setAccuracy] = useState<number>(0);\n  \n  const captureLocation = () => {\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n        setAccuracy(position.coords.accuracy);\n      },\n      (error) => {\n        console.error('GPS capture failed:', error);\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 300000 // 5 minutes\n      }\n    );\n  };\n  \n  return { location, accuracy, captureLocation };\n};\n```\n\n### Address Geocoding\n\nIntegration with Mapbox Geocoding API for address lookup:\n\n```typescript\nconst geocodeAddress = async (address: string) => {\n  const response = await fetch(\n    `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(address)}.json?access_token=${MAPBOX_TOKEN}`\n  );\n  \n  const data = await response.json();\n  \n  if (data.features.length > 0) {\n    const [longitude, latitude] = data.features[0].center;\n    return {\n      latitude,\n      longitude,\n      address: data.features[0].place_name\n    };\n  }\n  \n  throw new Error('Address not found');\n};\n```\n\n## Weather Integration\n\n### Weather Overlay Layer\n\n```typescript\n// Weather data source\nconst weatherSource = {\n  type: 'geojson' as const,\n  data: {\n    type: 'FeatureCollection',\n    features: weatherStations.map(station => ({\n      type: 'Feature',\n      properties: {\n        temperature: station.temperature,\n        wind_speed: station.wind_speed,\n        wind_direction: station.wind_direction,\n        conditions: station.conditions\n      },\n      geometry: {\n        type: 'Point',\n        coordinates: [station.longitude, station.latitude]\n      }\n    }))\n  }\n};\n\n// Weather symbol layer\nconst weatherLayer: LayerProps = {\n  id: 'weather-symbols',\n  type: 'symbol',\n  source: 'weather',\n  layout: {\n    'icon-image': [\n      'case',\n      ['==', ['get', 'conditions'], 'sunny'], 'sun-icon',\n      ['==', ['get', 'conditions'], 'cloudy'], 'cloud-icon',\n      ['==', ['get', 'conditions'], 'rainy'], 'rain-icon',\n      'default-weather-icon'\n    ],\n    'icon-size': 0.8,\n    'text-field': '{temperature}°F',\n    'text-offset': [0, 2],\n    'text-size': 12\n  }\n};\n```\n\n## Geospatial Queries\n\n### Nearby Hunt Search\n\nBackend PostGIS query for spatial search:\n\n```python\n# Django ORM with PostGIS\nfrom django.contrib.gis.geos import Point\nfrom django.contrib.gis.measure import Distance\n\ndef find_nearby_hunts(latitude, longitude, radius_km=50):\n    center_point = Point(longitude, latitude, srid=4326)\n    \n    return Hunt.objects.filter(\n        location__distance_lte=(center_point, Distance(km=radius_km))\n    ).annotate(\n        distance=Distance('location', center_point)\n    ).order_by('distance')[:20]\n```\n\n### Frontend Spatial Filtering\n\n```typescript\nconst useNearbyHunts = (center: Coordinates, radiusKm: number) => {\n  const [nearbyHunts, setNearbyHunts] = useState<Hunt[]>([]);\n  \n  useEffect(() => {\n    const fetchNearbyHunts = async () => {\n      const response = await fetch(\n        `/api/hunts/nearby/?lat=${center.latitude}&lng=${center.longitude}&radius=${radiusKm}`\n      );\n      const data = await response.json();\n      setNearbyHunts(data.results);\n    };\n    \n    fetchNearbyHunts();\n  }, [center, radiusKm]);\n  \n  return nearbyHunts;\n};\n```\n\n## Performance Optimization\n\n### Data Loading Strategies\n\n1. **Viewport-based Loading** - Only load hunts visible in current map bounds\n2. **Level-of-Detail** - Simplified data at low zoom levels\n3. **Clustering** - Reduce visual complexity and API calls\n4. **Caching** - Cache geospatial queries with spatial indexes\n\n### Map Performance\n\n```typescript\n// Optimize re-renders with useCallback\nconst mapCallbacks = {\n  onMove: useCallback((evt: ViewStateChangeEvent) => {\n    setViewState(evt.viewState);\n  }, []),\n  \n  onClick: useCallback((event: MapLayerMouseEvent) => {\n    const features = event.features;\n    if (features && features.length > 0) {\n      handleHuntClick(features[0].properties?.id);\n    }\n  }, [handleHuntClick])\n};\n\n// Memoize expensive GeoJSON processing\nconst huntGeoJSON = useMemo(() => {\n  return {\n    type: 'FeatureCollection',\n    features: hunts.map(hunt => transformToGeoJSON(hunt))\n  };\n}, [hunts]);\n```\n\n## Common Issues & Solutions\n\n### Layer Not Rendering\n**Problem**: Map loads but no custom layers appear\n**Solution**: Ensure `mapboxgl.accessToken` is set before Map component renders\n\n### Control Positioning\n**Problem**: Custom controls overlap or position incorrectly\n**Solution**: Use explicit positioning and z-index management\n\n```typescript\n// Control positioning for Mapbox GL JS v3+\n<NavigationControl position=\"top-right\" />\n<ScaleControl position=\"bottom-left\" />\n\n// Custom positioned controls\n<div className=\"absolute top-4 left-4 z-10\">\n  <LayerTogglePanel />\n</div>\n```\n\n### Click Event Issues\n**Problem**: Map clicks not registering on layers  \n**Solution**: Ensure proper layer configuration and event handlers\n\n```typescript\n// Proper click handling\nconst mapRef = useRef<MapRef>(null);\n\nconst handleMapClick = (event: MapLayerMouseEvent) => {\n  const map = mapRef.current?.getMap();\n  const features = map?.queryRenderedFeatures(event.point, {\n    layers: ['hunt-points', 'clusters']\n  });\n  \n  if (features && features.length > 0) {\n    handleFeatureClick(features[0]);\n  }\n};\n```\n\n### Memory Leaks\n**Problem**: Map component memory usage grows over time\n**Solution**: Proper cleanup and ref management\n\n```typescript\nuseEffect(() => {\n  return () => {\n    // Cleanup map resources\n    mapRef.current?.getMap().remove();\n  };\n}, []);\n```\n\nFor detailed troubleshooting, see the [Mapbox Integration Guide](./MAPBOX_LAYER_RENDERING_INVESTIGATION.md) and [Performance Optimization](./MAPBOX_PERFORMANCE_OPTIMIZATION.md) documents.","numLines":513,"startLine":1,"totalLines":513}}}
{"parentUuid":"62563c20-5d9b-451a-86db-27ec1de6513c","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_0149ZsQNXUPChafwqX1qY5BC","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01U9hkWJeBZiCq5skk2Ez7We","name":"TodoWrite","input":{"todos":[{"content":"Read all files in the docs directory","status":"completed","activeForm":"Reading all files in the docs directory"},{"content":"Examine CLAUDE.md file for potential improvements","status":"in_progress","activeForm":"Examining CLAUDE.md file for potential improvements"},{"content":"Provide recommendations for improving CLAUDE.md","status":"pending","activeForm":"Providing recommendations for improving CLAUDE.md"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":7,"cache_creation_input_tokens":21228,"cache_read_input_tokens":48832,"cache_creation":{"ephemeral_5m_input_tokens":21228,"ephemeral_1h_input_tokens":0},"output_tokens":26,"service_tier":"standard"}},"requestId":"req_011CSTp2Zv2HLHPmJTfMEyGd","type":"assistant","uuid":"fc3f16b1-9632-484e-8804-6349e511cd2c","timestamp":"2025-08-25T04:39:39.878Z"}
{"parentUuid":"fc3f16b1-9632-484e-8804-6349e511cd2c","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01U9hkWJeBZiCq5skk2Ez7We","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"8391f7d0-c2c2-496b-b85a-2e568e5d6316","timestamp":"2025-08-25T04:39:39.931Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Read all files in the docs directory","status":"completed","activeForm":"Reading all files in the docs directory"},{"content":"Examine CLAUDE.md file for potential improvements","status":"in_progress","activeForm":"Examining CLAUDE.md file for potential improvements"},{"content":"Provide recommendations for improving CLAUDE.md","status":"pending","activeForm":"Providing recommendations for improving CLAUDE.md"}]}}
{"parentUuid":"8391f7d0-c2c2-496b-b85a-2e568e5d6316","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01FGEp1Lq6X7pNKg8jy9JfiM","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me examine the current CLAUDE.md file to understand its structure and content:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":203,"cache_read_input_tokens":70060,"cache_creation":{"ephemeral_5m_input_tokens":203,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTp2y5JKaQhjZzqXYXZv","type":"assistant","uuid":"de7ebfb8-df5d-4ee2-a038-363b8c5b2f0c","timestamp":"2025-08-25T04:39:43.191Z"}
{"parentUuid":"de7ebfb8-df5d-4ee2-a038-363b8c5b2f0c","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01FGEp1Lq6X7pNKg8jy9JfiM","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01SnPyYXPA9j2GypbmjNBcqe","name":"Read","input":{"file_path":"/Users/markelmore/_code/fowldata/CLAUDE.md"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":203,"cache_read_input_tokens":70060,"cache_creation":{"ephemeral_5m_input_tokens":203,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTp2y5JKaQhjZzqXYXZv","type":"assistant","uuid":"183cc23d-6459-43eb-a20e-5eecd09899d6","timestamp":"2025-08-25T04:39:43.866Z"}
{"parentUuid":"183cc23d-6459-43eb-a20e-5eecd09899d6","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01SnPyYXPA9j2GypbmjNBcqe","type":"tool_result","content":"     1→# CLAUDE.md\n     2→\n     3→This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n     4→\n     5→## ⚠️ CRITICAL: Docker Network Configuration - NEVER CHANGE\n     6→**RECURRING ISSUE - ALWAYS CHECK THIS FIRST**\n     7→\n     8→The frontend `.env.local` file MUST use the Docker service name for backend communication:\n     9→```bash\n    10→# CORRECT - Use Docker service name (this is in frontend/.env.local)\n    11→BACKEND_URL=http://fowldata:8000\n    12→\n    13→# WRONG - Will cause ECONNREFUSED errors in Docker containers\n    14→BACKEND_URL=http://localhost:8000\n    15→```\n    16→\n    17→**Why**: Inside Docker containers, `localhost` refers to the container itself, not the host. Service names resolve to container IPs within the Docker network.\n    18→\n    19→**Symptoms**: NextAuth authentication fails, API calls fail with \"connect ECONNREFUSED ::1:8000\"\n    20→\n    21→**Fix**: Always use `fowldata:8000` (service name from docker-compose.yml) for inter-container communication.\n    22→\n    23→## ⚠️ CRITICAL: Mapbox GL JS v3+ with react-map-gl v8 Layer Rendering\n    24→**RECURRING ISSUE - ESSENTIAL FOR LAYER VISIBILITY**\n    25→\n    26→When using Mapbox GL JS v3+ with react-map-gl v8, layers will NOT render without explicit `mapboxgl.accessToken` configuration:\n    27→\n    28→```typescript\n    29→import mapboxgl from 'mapbox-gl';\n    30→\n    31→const MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;\n    32→\n    33→// CRITICAL: This is required for Mapbox GL JS v3+ with react-map-gl v8\n    34→if (MAPBOX_TOKEN) {\n    35→  mapboxgl.accessToken = MAPBOX_TOKEN;\n    36→}\n    37→```\n    38→\n    39→**Why**: react-map-gl v8 delegates to Mapbox GL JS v3+ which requires explicit token configuration. Previous versions handled this automatically.\n    40→\n    41→**Symptoms**: \n    42→- Map loads successfully with satellite/custom styles\n    43→- Source/Layer components appear to be configured correctly  \n    44→- Debug panels show data is present\n    45→- NO visual layers render (not even test layers with bright colors)\n    46→- No console errors about authentication or tokens\n    47→- Canvas element exists but shows no content\n    48→\n    49→**Additional react-map-gl v8 Requirements:**\n    50→- Layer components must be **immediate children** of Source components (no React fragments `<>...</>`)\n    51→- Do NOT add explicit `source` props to Layer components inside Source components\n    52→- Remove conditional `mapStyleLoaded` wrappers - let react-map-gl handle timing internally\n    53→\n    54→**Fix Location**: Add the `mapboxgl.accessToken` configuration at the top level of your Map component file, after importing mapboxgl.\n    55→\n    56→**Debugging Signs This is the Issue**:\n    57→- Mapbox canvas renders with proper classes (`mapboxgl-canvas-container`)\n    58→- Map style loads successfully\n    59→- Data processing works correctly\n    60→- Visibility and layer management appears functional\n    61→- Zero visual layer rendering despite all other systems working\n    62→\n    63→## ⚠️ CRITICAL: Production Environment Variable Loading\n    64→**RECURRING DEPLOYMENT ISSUE - ESSENTIAL FOR PRODUCTION**\n    65→\n    66→Docker Compose production deployments REQUIRE explicit `--env-file` flag:\n    67→\n    68→```bash\n    69→# REQUIRED for all production commands\n    70→docker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n    71→\n    72→# WRONG - Will cause \"variable is not set\" warnings and startup failures\n    73→docker-compose -f docker-compose.prod.yaml up -d\n    74→```\n    75→\n    76→**Why**: The `env_file:` setting in docker-compose.prod.yaml handles container environment variables, but Docker Compose variable substitution (${VARIABLE}) requires the explicit `--env-file` flag.\n    77→\n    78→**Symptoms**: \n    79→- `WARN[0000] The \"DB_NAME\" variable is not set. Defaulting to a blank string.`\n    80→- PostgreSQL container fails with \"superuser password not specified\"\n    81→- Environment variables visible in some services but not others\n    82→\n    83→**Additional Production Requirements**:\n    84→- All services need `env_file: - .env.production` in docker-compose.prod.yaml\n    85→- Avoid special characters in passwords (`$`, `!`, etc.) - shell interprets them\n    86→- Use clean file encoding (UTF-8 without BOM) for environment files\n    87→\n    88→## Architecture Overview\n    89→\n    90→FowlData is a production-ready full-stack waterfowl hunting tracking application:\n    91→\n    92→**Backend (Django)**: Located in `fowldata/` directory\n    93→- Django 4.2 with Django REST Framework for API endpoints\n    94→- PostgreSQL 16 with PostGIS 3.4 for geospatial data storage and spatial queries\n    95→- JWT RS256 authentication integrated with NextAuth.js frontend\n    96→- Two main apps: `accounts` (user management) and `hunts` (hunt tracking)\n    97→- AWS S3 integration for photo storage with presigned URLs and CORS\n    98→- Gunicorn WSGI server with production performance tuning\n    99→\n   100→**Frontend (Next.js)**: Located in `frontend/` directory  \n   101→- Next.js 15.4.4 with React 19 and TypeScript\n   102→- NextAuth.js v5 with Google OAuth and credentials authentication\n   103→- Mapbox GL JS v3+ with react-map-gl v8 for interactive mapping\n   104→- TailwindCSS for styling, React Hook Form for forms\n   105→- Playwright for E2E testing, Jest for unit tests\n   106→- Production-optimized standalone builds\n   107→\n   108→**Production Infrastructure**:\n   109→- **Deployment**: Digital Ocean Droplets with Docker Compose orchestration\n   110→- **Reverse Proxy**: Nginx with SSL/TLS termination via Let's Encrypt\n   111→- **Caching**: Redis for sessions, query caching, and performance optimization\n   112→- **Storage**: AWS S3 with CloudFront CDN for photo uploads and static assets\n   113→- **Database**: PostgreSQL with PostGIS extensions, performance tuning, and automated backups\n   114→- **Monitoring**: Docker health checks, database performance monitoring, and logging\n   115→- **Security**: SSL enforcement, security headers, rate limiting, and firewall configuration\n   116→\n   117→## Development Commands\n   118→\n   119→### Backend Development\n   120→```bash\n   121→# Start services\n   122→docker compose up -d\n   123→\n   124→# Django management commands\n   125→docker compose exec fowldata python manage.py migrate\n   126→docker compose exec fowldata python manage.py createsuperuser\n   127→docker compose exec fowldata python manage.py shell\n   128→\n   129→# Run backend tests\n   130→docker compose exec fowldata python -m pytest\n   131→docker compose exec fowldata python -m pytest accounts/tests/ hunts/tests/ -v\n   132→\n   133→# Code formatting and linting\n   134→docker compose exec fowldata black .\n   135→docker compose exec fowldata flake8\n   136→\n   137→# Single test file\n   138→docker compose exec fowldata python -m pytest hunts/tests/test_weather_api.py -v\n   139→```\n   140→\n   141→### Frontend Development\n   142→```bash\n   143→cd frontend\n   144→\n   145→# Development server (with Turbopack)\n   146→npm run dev\n   147→\n   148→# Build and type checking\n   149→npm run build\n   150→npm run lint\n   151→\n   152→# Testing\n   153→npm run test                    # Jest unit tests\n   154→npm run test:watch             # Jest in watch mode  \n   155→npm run test:e2e               # Playwright E2E tests\n   156→npm run test:e2e:ui            # Playwright with UI\n   157→```\n   158→\n   159→### Pre-Commit Validation\n   160→```bash\n   161→# Full CI validation (includes E2E tests)\n   162→./testlint\n   163→\n   164→# Quick validation (faster, no E2E)  \n   165→./testlint-quick\n   166→```\n   167→\n   168→### Production Deployment\n   169→```bash\n   170→# Production validation and deployment\n   171→./scripts/validate-production.sh\n   172→\n   173→# Production commands (ALWAYS use --env-file flag)\n   174→docker-compose -f docker-compose.prod.yaml --env-file .env.production build\n   175→docker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n   176→docker-compose -f docker-compose.prod.yaml --env-file .env.production logs -f\n   177→\n   178→# Django production setup\n   179→docker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py migrate\n   180→docker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py createsuperuser\n   181→docker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py collectstatic --noinput\n   182→```\n   183→\n   184→## Core Data Models\n   185→\n   186→**Hunt Model** (`hunts/models.py`):\n   187→- Tracks hunting sessions with date, location (PostGIS Point), weather conditions\n   188→- Links to multiple Bird harvests and HuntPhoto uploads\n   189→- Weather data automatically fetched from external API based on coordinates\n   190→\n   191→**Bird Model**:\n   192→- Individual waterfowl harvests within a hunt\n   193→- Species selection from predefined WATERFOWL_CHOICES (Dabblers, Divers, Geese)\n   194→- Includes harvest time, notes, and gender (Drake/Hen)\n   195→\n   196→**Authentication Integration**:\n   197→- Django backend uses custom NextAuthBackend for JWT token validation\n   198→- Frontend NextAuth.js providers: Google, Facebook, Credentials\n   199→- Token synchronization between NextAuth and Django API client\n   200→\n   201→## Key Integration Points\n   202→\n   203→**Django-NextAuth Authentication Flow**:\n   204→- NextAuth JWT tokens validated by Django via `accounts/nextauth_backend.py`  \n   205→- API requests include NextAuth JWT in Authorization header\n   206→- User creation/sync handled by Django signals in `accounts/signals.py`\n   207→\n   208→**Photo Upload System**:\n   209→- S3 presigned URLs generated by Django `hunts/s3_manager.py`\n   210→- Frontend uploads directly to S3, then registers with Django\n   211→- HuntPhoto model tracks S3 URLs linked to Hunt instances\n   212→\n   213→**Geospatial Features**:\n   214→- Hunt locations stored as PostGIS Points with lat/lng coordinates\n   215→- Weather API integration fetches conditions based on hunt coordinates\n   216→- Mapbox integration for location selection and visualization\n   217→\n   218→## Environment Configuration\n   219→\n   220→Required environment files:\n   221→- `.env.local` (root) - Django database, secrets, S3 credentials\n   222→- `frontend/.env.local` - NextAuth secrets, API URLs\n   223→\n   224→Critical environment variables:\n   225→- `SECRET_KEY` (Django), `AUTH_SECRET` (NextAuth)\n   226→- `DB_HOST`, `DB_NAME`, `DB_USER`, `DB_PASS` (PostgreSQL)\n   227→- `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `AWS_S3_BUCKET_NAME`\n   228→- `GOOGLE_CLIENT_ID`, `GOOGLE_CLIENT_SECRET` (OAuth)\n   229→\n   230→## Testing Patterns\n   231→\n   232→**Backend Tests** (pytest-django):\n   233→- Database tests marked with `@pytest.mark.django_db`\n   234→- API endpoint tests use Django's APIClient  \n   235→- External services (S3, weather API) are mocked\n   236→- Fixtures in `conftest.py` create test users and hunt data\n   237→\n   238→**Frontend Tests**:\n   239→- Unit tests: Jest + React Testing Library in `src/__tests__/`\n   240→- Component tests focus on user interactions, not implementation\n   241→- E2E tests: Playwright in `e2e/` directory with real browser automation\n   242→- API mocking for isolated component testing\n   243→\n   244→## Mapbox Configuration\n   245→\n   246→- Import controls from `react-map-gl/mapbox` for Mapbox GL JS v3.5+\n   247→- Control positioning critical - use `position` prop, not `style` object\n   248→- Standard controls must be children of `<Map>` component\n   249→- Custom controls positioned absolutely outside `<Map>`\n   250→- Test controls in both browser and fullscreen modes\n   251→\n   252→## Development Notes\n   253→\n   254→- Rebuild Docker containers after backend changes to see frontend updates\n   255→- Use test credentials: `mark@mail.com` / `1@Tsgstp` for Puppeteer E2E tests\n   256→- Run `./testlint-quick` before commits, `./testlint` before PRs\n   257→- Weather API responses should be mocked in tests for consistency\n   258→- if authentication issue arises we can run  Run the health check script:\n   259→  node auth-health-check.js\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"dfe8a4e5-6ec4-4169-8dd6-71c7e316a37b","timestamp":"2025-08-25T04:39:43.946Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/markelmore/_code/fowldata/CLAUDE.md","content":"# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## ⚠️ CRITICAL: Docker Network Configuration - NEVER CHANGE\n**RECURRING ISSUE - ALWAYS CHECK THIS FIRST**\n\nThe frontend `.env.local` file MUST use the Docker service name for backend communication:\n```bash\n# CORRECT - Use Docker service name (this is in frontend/.env.local)\nBACKEND_URL=http://fowldata:8000\n\n# WRONG - Will cause ECONNREFUSED errors in Docker containers\nBACKEND_URL=http://localhost:8000\n```\n\n**Why**: Inside Docker containers, `localhost` refers to the container itself, not the host. Service names resolve to container IPs within the Docker network.\n\n**Symptoms**: NextAuth authentication fails, API calls fail with \"connect ECONNREFUSED ::1:8000\"\n\n**Fix**: Always use `fowldata:8000` (service name from docker-compose.yml) for inter-container communication.\n\n## ⚠️ CRITICAL: Mapbox GL JS v3+ with react-map-gl v8 Layer Rendering\n**RECURRING ISSUE - ESSENTIAL FOR LAYER VISIBILITY**\n\nWhen using Mapbox GL JS v3+ with react-map-gl v8, layers will NOT render without explicit `mapboxgl.accessToken` configuration:\n\n```typescript\nimport mapboxgl from 'mapbox-gl';\n\nconst MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;\n\n// CRITICAL: This is required for Mapbox GL JS v3+ with react-map-gl v8\nif (MAPBOX_TOKEN) {\n  mapboxgl.accessToken = MAPBOX_TOKEN;\n}\n```\n\n**Why**: react-map-gl v8 delegates to Mapbox GL JS v3+ which requires explicit token configuration. Previous versions handled this automatically.\n\n**Symptoms**: \n- Map loads successfully with satellite/custom styles\n- Source/Layer components appear to be configured correctly  \n- Debug panels show data is present\n- NO visual layers render (not even test layers with bright colors)\n- No console errors about authentication or tokens\n- Canvas element exists but shows no content\n\n**Additional react-map-gl v8 Requirements:**\n- Layer components must be **immediate children** of Source components (no React fragments `<>...</>`)\n- Do NOT add explicit `source` props to Layer components inside Source components\n- Remove conditional `mapStyleLoaded` wrappers - let react-map-gl handle timing internally\n\n**Fix Location**: Add the `mapboxgl.accessToken` configuration at the top level of your Map component file, after importing mapboxgl.\n\n**Debugging Signs This is the Issue**:\n- Mapbox canvas renders with proper classes (`mapboxgl-canvas-container`)\n- Map style loads successfully\n- Data processing works correctly\n- Visibility and layer management appears functional\n- Zero visual layer rendering despite all other systems working\n\n## ⚠️ CRITICAL: Production Environment Variable Loading\n**RECURRING DEPLOYMENT ISSUE - ESSENTIAL FOR PRODUCTION**\n\nDocker Compose production deployments REQUIRE explicit `--env-file` flag:\n\n```bash\n# REQUIRED for all production commands\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# WRONG - Will cause \"variable is not set\" warnings and startup failures\ndocker-compose -f docker-compose.prod.yaml up -d\n```\n\n**Why**: The `env_file:` setting in docker-compose.prod.yaml handles container environment variables, but Docker Compose variable substitution (${VARIABLE}) requires the explicit `--env-file` flag.\n\n**Symptoms**: \n- `WARN[0000] The \"DB_NAME\" variable is not set. Defaulting to a blank string.`\n- PostgreSQL container fails with \"superuser password not specified\"\n- Environment variables visible in some services but not others\n\n**Additional Production Requirements**:\n- All services need `env_file: - .env.production` in docker-compose.prod.yaml\n- Avoid special characters in passwords (`$`, `!`, etc.) - shell interprets them\n- Use clean file encoding (UTF-8 without BOM) for environment files\n\n## Architecture Overview\n\nFowlData is a production-ready full-stack waterfowl hunting tracking application:\n\n**Backend (Django)**: Located in `fowldata/` directory\n- Django 4.2 with Django REST Framework for API endpoints\n- PostgreSQL 16 with PostGIS 3.4 for geospatial data storage and spatial queries\n- JWT RS256 authentication integrated with NextAuth.js frontend\n- Two main apps: `accounts` (user management) and `hunts` (hunt tracking)\n- AWS S3 integration for photo storage with presigned URLs and CORS\n- Gunicorn WSGI server with production performance tuning\n\n**Frontend (Next.js)**: Located in `frontend/` directory  \n- Next.js 15.4.4 with React 19 and TypeScript\n- NextAuth.js v5 with Google OAuth and credentials authentication\n- Mapbox GL JS v3+ with react-map-gl v8 for interactive mapping\n- TailwindCSS for styling, React Hook Form for forms\n- Playwright for E2E testing, Jest for unit tests\n- Production-optimized standalone builds\n\n**Production Infrastructure**:\n- **Deployment**: Digital Ocean Droplets with Docker Compose orchestration\n- **Reverse Proxy**: Nginx with SSL/TLS termination via Let's Encrypt\n- **Caching**: Redis for sessions, query caching, and performance optimization\n- **Storage**: AWS S3 with CloudFront CDN for photo uploads and static assets\n- **Database**: PostgreSQL with PostGIS extensions, performance tuning, and automated backups\n- **Monitoring**: Docker health checks, database performance monitoring, and logging\n- **Security**: SSL enforcement, security headers, rate limiting, and firewall configuration\n\n## Development Commands\n\n### Backend Development\n```bash\n# Start services\ndocker compose up -d\n\n# Django management commands\ndocker compose exec fowldata python manage.py migrate\ndocker compose exec fowldata python manage.py createsuperuser\ndocker compose exec fowldata python manage.py shell\n\n# Run backend tests\ndocker compose exec fowldata python -m pytest\ndocker compose exec fowldata python -m pytest accounts/tests/ hunts/tests/ -v\n\n# Code formatting and linting\ndocker compose exec fowldata black .\ndocker compose exec fowldata flake8\n\n# Single test file\ndocker compose exec fowldata python -m pytest hunts/tests/test_weather_api.py -v\n```\n\n### Frontend Development\n```bash\ncd frontend\n\n# Development server (with Turbopack)\nnpm run dev\n\n# Build and type checking\nnpm run build\nnpm run lint\n\n# Testing\nnpm run test                    # Jest unit tests\nnpm run test:watch             # Jest in watch mode  \nnpm run test:e2e               # Playwright E2E tests\nnpm run test:e2e:ui            # Playwright with UI\n```\n\n### Pre-Commit Validation\n```bash\n# Full CI validation (includes E2E tests)\n./testlint\n\n# Quick validation (faster, no E2E)  \n./testlint-quick\n```\n\n### Production Deployment\n```bash\n# Production validation and deployment\n./scripts/validate-production.sh\n\n# Production commands (ALWAYS use --env-file flag)\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production build\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production logs -f\n\n# Django production setup\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py migrate\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py createsuperuser\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py collectstatic --noinput\n```\n\n## Core Data Models\n\n**Hunt Model** (`hunts/models.py`):\n- Tracks hunting sessions with date, location (PostGIS Point), weather conditions\n- Links to multiple Bird harvests and HuntPhoto uploads\n- Weather data automatically fetched from external API based on coordinates\n\n**Bird Model**:\n- Individual waterfowl harvests within a hunt\n- Species selection from predefined WATERFOWL_CHOICES (Dabblers, Divers, Geese)\n- Includes harvest time, notes, and gender (Drake/Hen)\n\n**Authentication Integration**:\n- Django backend uses custom NextAuthBackend for JWT token validation\n- Frontend NextAuth.js providers: Google, Facebook, Credentials\n- Token synchronization between NextAuth and Django API client\n\n## Key Integration Points\n\n**Django-NextAuth Authentication Flow**:\n- NextAuth JWT tokens validated by Django via `accounts/nextauth_backend.py`  \n- API requests include NextAuth JWT in Authorization header\n- User creation/sync handled by Django signals in `accounts/signals.py`\n\n**Photo Upload System**:\n- S3 presigned URLs generated by Django `hunts/s3_manager.py`\n- Frontend uploads directly to S3, then registers with Django\n- HuntPhoto model tracks S3 URLs linked to Hunt instances\n\n**Geospatial Features**:\n- Hunt locations stored as PostGIS Points with lat/lng coordinates\n- Weather API integration fetches conditions based on hunt coordinates\n- Mapbox integration for location selection and visualization\n\n## Environment Configuration\n\nRequired environment files:\n- `.env.local` (root) - Django database, secrets, S3 credentials\n- `frontend/.env.local` - NextAuth secrets, API URLs\n\nCritical environment variables:\n- `SECRET_KEY` (Django), `AUTH_SECRET` (NextAuth)\n- `DB_HOST`, `DB_NAME`, `DB_USER`, `DB_PASS` (PostgreSQL)\n- `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `AWS_S3_BUCKET_NAME`\n- `GOOGLE_CLIENT_ID`, `GOOGLE_CLIENT_SECRET` (OAuth)\n\n## Testing Patterns\n\n**Backend Tests** (pytest-django):\n- Database tests marked with `@pytest.mark.django_db`\n- API endpoint tests use Django's APIClient  \n- External services (S3, weather API) are mocked\n- Fixtures in `conftest.py` create test users and hunt data\n\n**Frontend Tests**:\n- Unit tests: Jest + React Testing Library in `src/__tests__/`\n- Component tests focus on user interactions, not implementation\n- E2E tests: Playwright in `e2e/` directory with real browser automation\n- API mocking for isolated component testing\n\n## Mapbox Configuration\n\n- Import controls from `react-map-gl/mapbox` for Mapbox GL JS v3.5+\n- Control positioning critical - use `position` prop, not `style` object\n- Standard controls must be children of `<Map>` component\n- Custom controls positioned absolutely outside `<Map>`\n- Test controls in both browser and fullscreen modes\n\n## Development Notes\n\n- Rebuild Docker containers after backend changes to see frontend updates\n- Use test credentials: `mark@mail.com` / `1@Tsgstp` for Puppeteer E2E tests\n- Run `./testlint-quick` before commits, `./testlint` before PRs\n- Weather API responses should be mocked in tests for consistency\n- if authentication issue arises we can run  Run the health check script:\n  node auth-health-check.js","numLines":259,"startLine":1,"totalLines":259}}}
{"parentUuid":"dfe8a4e5-6ec4-4169-8dd6-71c7e316a37b","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01M8fwv3ypj52mwqNBz7viLh","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01KbqXFsDMNnLBzsEQMrfVSc","name":"TodoWrite","input":{"todos":[{"content":"Read all files in the docs directory","status":"completed","activeForm":"Reading all files in the docs directory"},{"content":"Examine CLAUDE.md file for potential improvements","status":"completed","activeForm":"Examining CLAUDE.md file for potential improvements"},{"content":"Provide recommendations for improving CLAUDE.md","status":"in_progress","activeForm":"Providing recommendations for improving CLAUDE.md"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":3737,"cache_read_input_tokens":70263,"cache_creation":{"ephemeral_5m_input_tokens":3737,"ephemeral_1h_input_tokens":0},"output_tokens":25,"service_tier":"standard"}},"requestId":"req_011CSTp3FmteNEty5dUjqmsN","type":"assistant","uuid":"45335761-34e9-4b54-ae95-e9b483d5f05e","timestamp":"2025-08-25T04:39:48.285Z"}
{"parentUuid":"45335761-34e9-4b54-ae95-e9b483d5f05e","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01KbqXFsDMNnLBzsEQMrfVSc","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"15d7bc32-3e72-46d4-8656-a41074550ddf","timestamp":"2025-08-25T04:39:48.352Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Read all files in the docs directory","status":"completed","activeForm":"Reading all files in the docs directory"},{"content":"Examine CLAUDE.md file for potential improvements","status":"completed","activeForm":"Examining CLAUDE.md file for potential improvements"},{"content":"Provide recommendations for improving CLAUDE.md","status":"in_progress","activeForm":"Providing recommendations for improving CLAUDE.md"}]}}
{"parentUuid":"15d7bc32-3e72-46d4-8656-a41074550ddf","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01LK25eyDYvh5ddHzhjYJ3Fe","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Based on my comprehensive review of the documentation directory and the current CLAUDE.md file, I can provide several recommendations for improving the CLAUDE.md file:\n\n## Analysis and Recommendations for CLAUDE.md Improvements\n\n### Current Strengths\n- Excellent critical issue documentation with clear \"NEVER CHANGE\" sections\n- Good coverage of Docker network configuration and Mapbox rendering issues\n- Clear command examples and troubleshooting symptoms\n- Production environment variable guidance\n\n### Key Areas for Improvement\n\n#### 1. **Enhanced Testing Section**\nThe docs have comprehensive testing guides, but CLAUDE.md only briefly mentions testing. Add:\n\n```bash\n# Testing Commands\n./testlint                      # Full CI validation with E2E tests\n./testlint-quick               # Quick validation without E2E\nnpm run test -- --watchAll=false  # Frontend unit tests (CI mode)\nnpm run test:e2e -- --project chromium  # E2E tests specific browser\n\n# Test Debugging\ndocker compose exec fowldata python -m pytest -s --pdb  # Backend debug\nnpm run test:e2e -- --debug    # Playwright debug mode\n```\n\n#### 2. **Security and Performance Best Practices**\nAdd critical security practices found in the docs:\n\n```bash\n# Security Checklist\n- Avoid special characters in production passwords (no $, !, etc.)\n- Always use HTTPS in production OAuth callbacks\n- Set proper CORS origins for frontend domain\n\n# Performance Commands  \ndocker compose exec fowldata python manage.py collectstatic --noinput\n# Database optimization queries\n```\n\n#### 3. **Troubleshooting Section Enhancement**\nConsolidate common troubleshooting patterns from the docs:\n\n```bash\n# Common Issues Resolution\n# Authentication failures\nnode auth-health-check.js\n\n# Database connection issues\ndocker compose exec fowldata python manage.py dbshell\n\n# E2E test failures\n./scripts/verify-e2e-setup.sh\n```\n\n#### 4. **Development Workflow Improvements**\nAdd better development workflow guidance:\n\n```bash\n# Development Cycle\ngit checkout -b feature/description\n# Make changes\n./testlint-quick  # Before commit\ngit commit -m \"feat: description\"\n./testlint        # Before PR\n```\n\n#### 5. **API Reference Quick Links**\nAdd quick API endpoint references:\n\n```bash\n# Key API Endpoints\nGET /api/hunts/                # List user hunts\nPOST /api/hunts/               # Create hunt  \nGET /api/users/me/             # Current user info\nPOST /api/auth/sync/           # User sync\n```\n\n#### 6. **Environment Variables Priority List**\nConsolidate critical environment variables:\n\n```bash\n# CRITICAL Environment Variables (must be identical in both files)\nAUTH_SECRET=                   # NextAuth + Django JWT\nBACKEND_URL=http://fowldata:8000  # Docker service name\nNEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=  # Required for layer rendering\n```\n\n#### 7. **Architecture Quick Reference**\nAdd simplified architecture diagram from the docs for quick reference.\n\n### Specific Improvements:\n\n1. **Add Testing Markers Section**\n2. **Include Performance Monitoring Commands**\n3. **Add Database Backup/Recovery Commands**\n4. **Include SSL/TLS Setup Quick Reference**\n5. **Add Debugging Tools Section**\n6. **Expand Error Code Reference**"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":202,"cache_read_input_tokens":74000,"cache_creation":{"ephemeral_5m_input_tokens":202,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTp3b4Ft3yASLRcR4Wfs","type":"assistant","uuid":"f3168a5f-eb69-41ae-8a4d-468bc2499576","timestamp":"2025-08-25T04:40:06.714Z"}
{"parentUuid":"f3168a5f-eb69-41ae-8a4d-468bc2499576","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01LK25eyDYvh5ddHzhjYJ3Fe","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01HyqNxyMYZUhZAFXzE55jUV","name":"TodoWrite","input":{"todos":[{"content":"Read all files in the docs directory","status":"completed","activeForm":"Reading all files in the docs directory"},{"content":"Examine CLAUDE.md file for potential improvements","status":"completed","activeForm":"Examining CLAUDE.md file for potential improvements"},{"content":"Provide recommendations for improving CLAUDE.md","status":"completed","activeForm":"Providing recommendations for improving CLAUDE.md"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":202,"cache_read_input_tokens":74000,"cache_creation":{"ephemeral_5m_input_tokens":202,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTp3b4Ft3yASLRcR4Wfs","type":"assistant","uuid":"c89d599b-7ff7-49bf-80ec-97fdf77f9b76","timestamp":"2025-08-25T04:40:07.768Z"}
{"parentUuid":"c89d599b-7ff7-49bf-80ec-97fdf77f9b76","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01HyqNxyMYZUhZAFXzE55jUV","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"5824fa2a-6e09-458e-8851-fd4acec6d67a","timestamp":"2025-08-25T04:40:07.830Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Read all files in the docs directory","status":"completed","activeForm":"Reading all files in the docs directory"},{"content":"Examine CLAUDE.md file for potential improvements","status":"completed","activeForm":"Examining CLAUDE.md file for potential improvements"},{"content":"Provide recommendations for improving CLAUDE.md","status":"completed","activeForm":"Providing recommendations for improving CLAUDE.md"}]}}
{"parentUuid":"5824fa2a-6e09-458e-8851-fd4acec6d67a","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01AspmZXj5UQ88AizSpbB4Ay","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"The current CLAUDE.md file is well-structured but could benefit from incorporating more comprehensive information from the docs directory. The docs contain extensive details about testing, security, performance optimization, troubleshooting, and development workflows that would be valuable additions to the CLAUDE.md file for better AI assistant guidance.\n\nThe main opportunities for improvement are:\n- Enhanced testing command coverage\n- Better troubleshooting workflows\n- Security best practices consolidation\n- Performance monitoring commands\n- More comprehensive environment variable guidance\n- API endpoint quick reference\n\nWould you like me to implement any of these improvements to the CLAUDE.md file?"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":985,"cache_read_input_tokens":74202,"cache_creation":{"ephemeral_5m_input_tokens":985,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTp52h975cn6HBeEs5vn","type":"assistant","uuid":"d8a84ceb-2f78-45a9-bdf8-a5d16d27c8b4","timestamp":"2025-08-25T04:40:13.116Z"}
{"parentUuid":"d8a84ceb-2f78-45a9-bdf8-a5d16d27c8b4","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":"yes lets do all of that.  BUT i want you to make sure there is no redundant or conflicting information"},"uuid":"c22ac252-c656-4b57-8cfa-64ce800bb0c7","timestamp":"2025-08-25T04:43:11.557Z"}
{"parentUuid":"c22ac252-c656-4b57-8cfa-64ce800bb0c7","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_015YPFVp2e2xHhcnghFHCr6K","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"I'll enhance the CLAUDE.md file with all the recommended improvements while carefully avoiding redundancy and conflicts. Let me analyze the current content and integrate the new sections seamlessly."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":162,"cache_read_input_tokens":75187,"cache_creation":{"ephemeral_5m_input_tokens":162,"ephemeral_1h_input_tokens":0},"output_tokens":3,"service_tier":"standard"}},"requestId":"req_011CSTpJaVSfVysCczTdbS6K","type":"assistant","uuid":"c18e9816-816c-4a1b-81bd-10e0c1a1ae15","timestamp":"2025-08-25T04:43:16.962Z"}
{"parentUuid":"c18e9816-816c-4a1b-81bd-10e0c1a1ae15","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_015YPFVp2e2xHhcnghFHCr6K","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_012ZMSEwScHLBCKTsC3du62r","name":"TodoWrite","input":{"todos":[{"content":"Analyze current CLAUDE.md structure and identify integration points","status":"in_progress","activeForm":"Analyzing current CLAUDE.md structure and identifying integration points"},{"content":"Enhance testing section with comprehensive commands","status":"pending","activeForm":"Enhancing testing section with comprehensive commands"},{"content":"Add security and performance best practices","status":"pending","activeForm":"Adding security and performance best practices"},{"content":"Expand troubleshooting section with consolidated patterns","status":"pending","activeForm":"Expanding troubleshooting section with consolidated patterns"},{"content":"Add development workflow improvements","status":"pending","activeForm":"Adding development workflow improvements"},{"content":"Include API reference and environment variables priority","status":"pending","activeForm":"Including API reference and environment variables priority"},{"content":"Review for redundancy and conflicts","status":"pending","activeForm":"Reviewing for redundancy and conflicts"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":162,"cache_read_input_tokens":75187,"cache_creation":{"ephemeral_5m_input_tokens":162,"ephemeral_1h_input_tokens":0},"output_tokens":3,"service_tier":"standard"}},"requestId":"req_011CSTpJaVSfVysCczTdbS6K","type":"assistant","uuid":"971505a7-6d44-4fdb-9f0d-ec65a348a7eb","timestamp":"2025-08-25T04:43:19.814Z"}
{"parentUuid":"971505a7-6d44-4fdb-9f0d-ec65a348a7eb","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_012ZMSEwScHLBCKTsC3du62r","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"a09ca636-f914-4d35-b02a-ed5e311c1217","timestamp":"2025-08-25T04:43:19.890Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Analyze current CLAUDE.md structure and identify integration points","status":"in_progress","activeForm":"Analyzing current CLAUDE.md structure and identifying integration points"},{"content":"Enhance testing section with comprehensive commands","status":"pending","activeForm":"Enhancing testing section with comprehensive commands"},{"content":"Add security and performance best practices","status":"pending","activeForm":"Adding security and performance best practices"},{"content":"Expand troubleshooting section with consolidated patterns","status":"pending","activeForm":"Expanding troubleshooting section with consolidated patterns"},{"content":"Add development workflow improvements","status":"pending","activeForm":"Adding development workflow improvements"},{"content":"Include API reference and environment variables priority","status":"pending","activeForm":"Including API reference and environment variables priority"},{"content":"Review for redundancy and conflicts","status":"pending","activeForm":"Reviewing for redundancy and conflicts"}]}}
{"parentUuid":"a09ca636-f914-4d35-b02a-ed5e311c1217","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01KZGs181y8R325amsFjiAdN","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_012xaJhArPGpWApWyume6WUq","name":"Edit","input":{"file_path":"/Users/markelmore/_code/fowldata/CLAUDE.md","old_string":"# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.","new_string":"# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## 🎯 Quick Reference\n\n### Critical Commands\n```bash\n# Essential Development\ndocker compose up -d && cd frontend && npm run dev  # Start full stack\n./testlint-quick           # Quick validation before commits\n./testlint                 # Full validation before PRs\n\n# Production Deployment\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# Emergency Troubleshooting\nnode auth-health-check.js  # Authentication issues\n./scripts/verify-e2e-setup.sh  # E2E test setup validation\n```\n\n### Key API Endpoints\n```bash\nGET /api/hunts/            # List user hunts\nPOST /api/hunts/           # Create hunt\nGET /api/users/me/         # Current user info  \nPOST /api/auth/sync/       # User synchronization\nGET /api/health/           # Backend health check\n```"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":362,"cache_read_input_tokens":75349,"cache_creation":{"ephemeral_5m_input_tokens":362,"ephemeral_1h_input_tokens":0},"output_tokens":25,"service_tier":"standard"}},"requestId":"req_011CSTpKBjzV8kTHN9Cmtafo","type":"assistant","uuid":"70f7d962-1dcf-4aa9-a939-2c563510552c","timestamp":"2025-08-25T04:43:28.185Z"}
{"parentUuid":"70f7d962-1dcf-4aa9-a939-2c563510552c","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_012xaJhArPGpWApWyume6WUq","type":"tool_result","content":"The file /Users/markelmore/_code/fowldata/CLAUDE.md has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n     1→# CLAUDE.md\n     2→\n     3→This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n     4→\n     5→## 🎯 Quick Reference\n     6→\n     7→### Critical Commands\n     8→```bash\n     9→# Essential Development\n    10→docker compose up -d && cd frontend && npm run dev  # Start full stack\n    11→./testlint-quick           # Quick validation before commits\n    12→./testlint                 # Full validation before PRs\n    13→\n    14→# Production Deployment\n    15→docker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n    16→\n    17→# Emergency Troubleshooting\n    18→node auth-health-check.js  # Authentication issues\n    19→./scripts/verify-e2e-setup.sh  # E2E test setup validation\n    20→```\n    21→\n    22→### Key API Endpoints\n    23→```bash\n    24→GET /api/hunts/            # List user hunts\n    25→POST /api/hunts/           # Create hunt\n    26→GET /api/users/me/         # Current user info  \n    27→POST /api/auth/sync/       # User synchronization\n    28→GET /api/health/           # Backend health check\n    29→```\n    30→\n    31→## ⚠️ CRITICAL: Docker Network Configuration - NEVER CHANGE\n    32→**RECURRING ISSUE - ALWAYS CHECK THIS FIRST**\n    33→"}]},"uuid":"572a8ec9-6f09-4aa7-8a40-a9c4e09aeb45","timestamp":"2025-08-25T04:43:28.240Z","toolUseResult":{"filePath":"/Users/markelmore/_code/fowldata/CLAUDE.md","oldString":"# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.","newString":"# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## 🎯 Quick Reference\n\n### Critical Commands\n```bash\n# Essential Development\ndocker compose up -d && cd frontend && npm run dev  # Start full stack\n./testlint-quick           # Quick validation before commits\n./testlint                 # Full validation before PRs\n\n# Production Deployment\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# Emergency Troubleshooting\nnode auth-health-check.js  # Authentication issues\n./scripts/verify-e2e-setup.sh  # E2E test setup validation\n```\n\n### Key API Endpoints\n```bash\nGET /api/hunts/            # List user hunts\nPOST /api/hunts/           # Create hunt\nGET /api/users/me/         # Current user info  \nPOST /api/auth/sync/       # User synchronization\nGET /api/health/           # Backend health check\n```","originalFile":"# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## ⚠️ CRITICAL: Docker Network Configuration - NEVER CHANGE\n**RECURRING ISSUE - ALWAYS CHECK THIS FIRST**\n\nThe frontend `.env.local` file MUST use the Docker service name for backend communication:\n```bash\n# CORRECT - Use Docker service name (this is in frontend/.env.local)\nBACKEND_URL=http://fowldata:8000\n\n# WRONG - Will cause ECONNREFUSED errors in Docker containers\nBACKEND_URL=http://localhost:8000\n```\n\n**Why**: Inside Docker containers, `localhost` refers to the container itself, not the host. Service names resolve to container IPs within the Docker network.\n\n**Symptoms**: NextAuth authentication fails, API calls fail with \"connect ECONNREFUSED ::1:8000\"\n\n**Fix**: Always use `fowldata:8000` (service name from docker-compose.yml) for inter-container communication.\n\n## ⚠️ CRITICAL: Mapbox GL JS v3+ with react-map-gl v8 Layer Rendering\n**RECURRING ISSUE - ESSENTIAL FOR LAYER VISIBILITY**\n\nWhen using Mapbox GL JS v3+ with react-map-gl v8, layers will NOT render without explicit `mapboxgl.accessToken` configuration:\n\n```typescript\nimport mapboxgl from 'mapbox-gl';\n\nconst MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;\n\n// CRITICAL: This is required for Mapbox GL JS v3+ with react-map-gl v8\nif (MAPBOX_TOKEN) {\n  mapboxgl.accessToken = MAPBOX_TOKEN;\n}\n```\n\n**Why**: react-map-gl v8 delegates to Mapbox GL JS v3+ which requires explicit token configuration. Previous versions handled this automatically.\n\n**Symptoms**: \n- Map loads successfully with satellite/custom styles\n- Source/Layer components appear to be configured correctly  \n- Debug panels show data is present\n- NO visual layers render (not even test layers with bright colors)\n- No console errors about authentication or tokens\n- Canvas element exists but shows no content\n\n**Additional react-map-gl v8 Requirements:**\n- Layer components must be **immediate children** of Source components (no React fragments `<>...</>`)\n- Do NOT add explicit `source` props to Layer components inside Source components\n- Remove conditional `mapStyleLoaded` wrappers - let react-map-gl handle timing internally\n\n**Fix Location**: Add the `mapboxgl.accessToken` configuration at the top level of your Map component file, after importing mapboxgl.\n\n**Debugging Signs This is the Issue**:\n- Mapbox canvas renders with proper classes (`mapboxgl-canvas-container`)\n- Map style loads successfully\n- Data processing works correctly\n- Visibility and layer management appears functional\n- Zero visual layer rendering despite all other systems working\n\n## ⚠️ CRITICAL: Production Environment Variable Loading\n**RECURRING DEPLOYMENT ISSUE - ESSENTIAL FOR PRODUCTION**\n\nDocker Compose production deployments REQUIRE explicit `--env-file` flag:\n\n```bash\n# REQUIRED for all production commands\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# WRONG - Will cause \"variable is not set\" warnings and startup failures\ndocker-compose -f docker-compose.prod.yaml up -d\n```\n\n**Why**: The `env_file:` setting in docker-compose.prod.yaml handles container environment variables, but Docker Compose variable substitution (${VARIABLE}) requires the explicit `--env-file` flag.\n\n**Symptoms**: \n- `WARN[0000] The \"DB_NAME\" variable is not set. Defaulting to a blank string.`\n- PostgreSQL container fails with \"superuser password not specified\"\n- Environment variables visible in some services but not others\n\n**Additional Production Requirements**:\n- All services need `env_file: - .env.production` in docker-compose.prod.yaml\n- Avoid special characters in passwords (`$`, `!`, etc.) - shell interprets them\n- Use clean file encoding (UTF-8 without BOM) for environment files\n\n## Architecture Overview\n\nFowlData is a production-ready full-stack waterfowl hunting tracking application:\n\n**Backend (Django)**: Located in `fowldata/` directory\n- Django 4.2 with Django REST Framework for API endpoints\n- PostgreSQL 16 with PostGIS 3.4 for geospatial data storage and spatial queries\n- JWT RS256 authentication integrated with NextAuth.js frontend\n- Two main apps: `accounts` (user management) and `hunts` (hunt tracking)\n- AWS S3 integration for photo storage with presigned URLs and CORS\n- Gunicorn WSGI server with production performance tuning\n\n**Frontend (Next.js)**: Located in `frontend/` directory  \n- Next.js 15.4.4 with React 19 and TypeScript\n- NextAuth.js v5 with Google OAuth and credentials authentication\n- Mapbox GL JS v3+ with react-map-gl v8 for interactive mapping\n- TailwindCSS for styling, React Hook Form for forms\n- Playwright for E2E testing, Jest for unit tests\n- Production-optimized standalone builds\n\n**Production Infrastructure**:\n- **Deployment**: Digital Ocean Droplets with Docker Compose orchestration\n- **Reverse Proxy**: Nginx with SSL/TLS termination via Let's Encrypt\n- **Caching**: Redis for sessions, query caching, and performance optimization\n- **Storage**: AWS S3 with CloudFront CDN for photo uploads and static assets\n- **Database**: PostgreSQL with PostGIS extensions, performance tuning, and automated backups\n- **Monitoring**: Docker health checks, database performance monitoring, and logging\n- **Security**: SSL enforcement, security headers, rate limiting, and firewall configuration\n\n## Development Commands\n\n### Backend Development\n```bash\n# Start services\ndocker compose up -d\n\n# Django management commands\ndocker compose exec fowldata python manage.py migrate\ndocker compose exec fowldata python manage.py createsuperuser\ndocker compose exec fowldata python manage.py shell\n\n# Run backend tests\ndocker compose exec fowldata python -m pytest\ndocker compose exec fowldata python -m pytest accounts/tests/ hunts/tests/ -v\n\n# Code formatting and linting\ndocker compose exec fowldata black .\ndocker compose exec fowldata flake8\n\n# Single test file\ndocker compose exec fowldata python -m pytest hunts/tests/test_weather_api.py -v\n```\n\n### Frontend Development\n```bash\ncd frontend\n\n# Development server (with Turbopack)\nnpm run dev\n\n# Build and type checking\nnpm run build\nnpm run lint\n\n# Testing\nnpm run test                    # Jest unit tests\nnpm run test:watch             # Jest in watch mode  \nnpm run test:e2e               # Playwright E2E tests\nnpm run test:e2e:ui            # Playwright with UI\n```\n\n### Pre-Commit Validation\n```bash\n# Full CI validation (includes E2E tests)\n./testlint\n\n# Quick validation (faster, no E2E)  \n./testlint-quick\n```\n\n### Production Deployment\n```bash\n# Production validation and deployment\n./scripts/validate-production.sh\n\n# Production commands (ALWAYS use --env-file flag)\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production build\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production logs -f\n\n# Django production setup\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py migrate\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py createsuperuser\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py collectstatic --noinput\n```\n\n## Core Data Models\n\n**Hunt Model** (`hunts/models.py`):\n- Tracks hunting sessions with date, location (PostGIS Point), weather conditions\n- Links to multiple Bird harvests and HuntPhoto uploads\n- Weather data automatically fetched from external API based on coordinates\n\n**Bird Model**:\n- Individual waterfowl harvests within a hunt\n- Species selection from predefined WATERFOWL_CHOICES (Dabblers, Divers, Geese)\n- Includes harvest time, notes, and gender (Drake/Hen)\n\n**Authentication Integration**:\n- Django backend uses custom NextAuthBackend for JWT token validation\n- Frontend NextAuth.js providers: Google, Facebook, Credentials\n- Token synchronization between NextAuth and Django API client\n\n## Key Integration Points\n\n**Django-NextAuth Authentication Flow**:\n- NextAuth JWT tokens validated by Django via `accounts/nextauth_backend.py`  \n- API requests include NextAuth JWT in Authorization header\n- User creation/sync handled by Django signals in `accounts/signals.py`\n\n**Photo Upload System**:\n- S3 presigned URLs generated by Django `hunts/s3_manager.py`\n- Frontend uploads directly to S3, then registers with Django\n- HuntPhoto model tracks S3 URLs linked to Hunt instances\n\n**Geospatial Features**:\n- Hunt locations stored as PostGIS Points with lat/lng coordinates\n- Weather API integration fetches conditions based on hunt coordinates\n- Mapbox integration for location selection and visualization\n\n## Environment Configuration\n\nRequired environment files:\n- `.env.local` (root) - Django database, secrets, S3 credentials\n- `frontend/.env.local` - NextAuth secrets, API URLs\n\nCritical environment variables:\n- `SECRET_KEY` (Django), `AUTH_SECRET` (NextAuth)\n- `DB_HOST`, `DB_NAME`, `DB_USER`, `DB_PASS` (PostgreSQL)\n- `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `AWS_S3_BUCKET_NAME`\n- `GOOGLE_CLIENT_ID`, `GOOGLE_CLIENT_SECRET` (OAuth)\n\n## Testing Patterns\n\n**Backend Tests** (pytest-django):\n- Database tests marked with `@pytest.mark.django_db`\n- API endpoint tests use Django's APIClient  \n- External services (S3, weather API) are mocked\n- Fixtures in `conftest.py` create test users and hunt data\n\n**Frontend Tests**:\n- Unit tests: Jest + React Testing Library in `src/__tests__/`\n- Component tests focus on user interactions, not implementation\n- E2E tests: Playwright in `e2e/` directory with real browser automation\n- API mocking for isolated component testing\n\n## Mapbox Configuration\n\n- Import controls from `react-map-gl/mapbox` for Mapbox GL JS v3.5+\n- Control positioning critical - use `position` prop, not `style` object\n- Standard controls must be children of `<Map>` component\n- Custom controls positioned absolutely outside `<Map>`\n- Test controls in both browser and fullscreen modes\n\n## Development Notes\n\n- Rebuild Docker containers after backend changes to see frontend updates\n- Use test credentials: `mark@mail.com` / `1@Tsgstp` for Puppeteer E2E tests\n- Run `./testlint-quick` before commits, `./testlint` before PRs\n- Weather API responses should be mocked in tests for consistency\n- if authentication issue arises we can run  Run the health check script:\n  node auth-health-check.js","structuredPatch":[{"oldStart":2,"oldLines":6,"newStart":2,"newLines":32,"lines":[" "," This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository."," ","+## 🎯 Quick Reference","+","+### Critical Commands","+```bash","+# Essential Development","+docker compose up -d && cd frontend && npm run dev  # Start full stack","+./testlint-quick           # Quick validation before commits","+./testlint                 # Full validation before PRs","+","+# Production Deployment","+docker-compose -f docker-compose.prod.yaml --env-file .env.production up -d","+","+# Emergency Troubleshooting","+node auth-health-check.js  # Authentication issues","+./scripts/verify-e2e-setup.sh  # E2E test setup validation","+```","+","+### Key API Endpoints","+```bash","+GET /api/hunts/            # List user hunts","+POST /api/hunts/           # Create hunt","+GET /api/users/me/         # Current user info  ","+POST /api/auth/sync/       # User synchronization","+GET /api/health/           # Backend health check","+```","+"," ## ⚠️ CRITICAL: Docker Network Configuration - NEVER CHANGE"," **RECURRING ISSUE - ALWAYS CHECK THIS FIRST**"," "]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"572a8ec9-6f09-4aa7-8a40-a9c4e09aeb45","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_014c7jFVgRJXiKFmzSKp8oKs","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01Mw3kEaZtXNtT7XCvFA4qmC","name":"TodoWrite","input":{"todos":[{"content":"Analyze current CLAUDE.md structure and identify integration points","status":"completed","activeForm":"Analyzing current CLAUDE.md structure and identifying integration points"},{"content":"Enhance testing section with comprehensive commands","status":"in_progress","activeForm":"Enhancing testing section with comprehensive commands"},{"content":"Add security and performance best practices","status":"pending","activeForm":"Adding security and performance best practices"},{"content":"Expand troubleshooting section with consolidated patterns","status":"pending","activeForm":"Expanding troubleshooting section with consolidated patterns"},{"content":"Add development workflow improvements","status":"pending","activeForm":"Adding development workflow improvements"},{"content":"Include API reference and environment variables priority","status":"pending","activeForm":"Including API reference and environment variables priority"},{"content":"Review for redundancy and conflicts","status":"pending","activeForm":"Reviewing for redundancy and conflicts"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":813,"cache_read_input_tokens":75711,"cache_creation":{"ephemeral_5m_input_tokens":813,"ephemeral_1h_input_tokens":0},"output_tokens":24,"service_tier":"standard"}},"requestId":"req_011CSTpKoChfWfKkr8boSjop","type":"assistant","uuid":"b539c2c1-d3e7-4bc3-90f8-40729b0b48a9","timestamp":"2025-08-25T04:43:32.663Z"}
{"parentUuid":"b539c2c1-d3e7-4bc3-90f8-40729b0b48a9","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01Mw3kEaZtXNtT7XCvFA4qmC","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"c7d7b3b0-a6b1-4fb3-88d1-f253d6a0a86b","timestamp":"2025-08-25T04:43:32.720Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Analyze current CLAUDE.md structure and identify integration points","status":"completed","activeForm":"Analyzing current CLAUDE.md structure and identifying integration points"},{"content":"Enhance testing section with comprehensive commands","status":"in_progress","activeForm":"Enhancing testing section with comprehensive commands"},{"content":"Add security and performance best practices","status":"pending","activeForm":"Adding security and performance best practices"},{"content":"Expand troubleshooting section with consolidated patterns","status":"pending","activeForm":"Expanding troubleshooting section with consolidated patterns"},{"content":"Add development workflow improvements","status":"pending","activeForm":"Adding development workflow improvements"},{"content":"Include API reference and environment variables priority","status":"pending","activeForm":"Including API reference and environment variables priority"},{"content":"Review for redundancy and conflicts","status":"pending","activeForm":"Reviewing for redundancy and conflicts"}]}}
{"parentUuid":"c7d7b3b0-a6b1-4fb3-88d1-f253d6a0a86b","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01H9MnkbbABpfDg2WbQUX237","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01ETehPphFgqbvEY5omUNB41","name":"Edit","input":{"file_path":"/Users/markelmore/_code/fowldata/CLAUDE.md","old_string":"### Pre-Commit Validation\n```bash\n# Full CI validation (includes E2E tests)\n./testlint\n\n# Quick validation (faster, no E2E)  \n./testlint-quick\n```","new_string":"### Testing & Validation\n\n#### Pre-Commit Validation\n```bash\n# Quick validation (run before commits)\n./testlint-quick               # Essential tests only (2-3 minutes)\n\n# Full validation (run before PRs)  \n./testlint                     # Complete validation with E2E tests (10-15 minutes)\n```\n\n#### Comprehensive Testing Commands\n```bash\n# Backend Testing\ndocker compose exec fowldata python -m pytest                    # All backend tests\ndocker compose exec fowldata python -m pytest -m \"not performance\"  # Skip slow tests\ndocker compose exec fowldata python -m pytest --cov=fowldata     # With coverage\ndocker compose exec fowldata python -m pytest -s --pdb          # Debug mode\n\n# Frontend Testing\ncd frontend\nnpm run test                           # Jest unit tests\nnpm run test -- --watchAll=false      # CI mode (run once)  \nnpm run test:e2e                      # Playwright E2E tests\nnpm run test:e2e -- --project chromium  # Specific browser\nnpm run test:e2e -- --debug           # Debug E2E tests\n\n# Specific Test Categories\ndocker compose exec fowldata python -m pytest -m \"auth\"      # Authentication tests\ndocker compose exec fowldata python -m pytest -m \"api\"       # API endpoint tests\nnpm test -- --testNamePattern=\"authentication\"               # Frontend auth tests\n```\n\n#### Test Debugging\n```bash\n# Backend Debug\ndocker compose exec fowldata python -m pytest -s --pdb hunts/tests/test_weather_api.py::test_function\ndocker compose exec fowldata python manage.py shell\n\n# Frontend Debug\nnpm run test:e2e -- --headed          # Show browser\nnpm run test:e2e -- --ui               # Playwright UI mode\nnpm test -- --no-coverage --verbose   # Detailed Jest output\n\n# E2E Test Environment Validation\n./scripts/verify-e2e-setup.sh         # Check E2E prerequisites\n```"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":328,"cache_read_input_tokens":76524,"cache_creation":{"ephemeral_5m_input_tokens":328,"ephemeral_1h_input_tokens":0},"output_tokens":40,"service_tier":"standard"}},"requestId":"req_011CSTpL8TaYrTb8oKgEZ1yZ","type":"assistant","uuid":"694d1eef-7261-4f16-a4db-af91b5a6004f","timestamp":"2025-08-25T04:43:44.105Z"}
{"parentUuid":"694d1eef-7261-4f16-a4db-af91b5a6004f","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01ETehPphFgqbvEY5omUNB41","type":"tool_result","content":"The file /Users/markelmore/_code/fowldata/CLAUDE.md has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   181→npm run test:e2e               # Playwright E2E tests\n   182→npm run test:e2e:ui            # Playwright with UI\n   183→```\n   184→\n   185→### Testing & Validation\n   186→\n   187→#### Pre-Commit Validation\n   188→```bash\n   189→# Quick validation (run before commits)\n   190→./testlint-quick               # Essential tests only (2-3 minutes)\n   191→\n   192→# Full validation (run before PRs)  \n   193→./testlint                     # Complete validation with E2E tests (10-15 minutes)\n   194→```\n   195→\n   196→#### Comprehensive Testing Commands\n   197→```bash\n   198→# Backend Testing\n   199→docker compose exec fowldata python -m pytest                    # All backend tests\n   200→docker compose exec fowldata python -m pytest -m \"not performance\"  # Skip slow tests\n   201→docker compose exec fowldata python -m pytest --cov=fowldata     # With coverage\n   202→docker compose exec fowldata python -m pytest -s --pdb          # Debug mode\n   203→\n   204→# Frontend Testing\n   205→cd frontend\n   206→npm run test                           # Jest unit tests\n   207→npm run test -- --watchAll=false      # CI mode (run once)  \n   208→npm run test:e2e                      # Playwright E2E tests\n   209→npm run test:e2e -- --project chromium  # Specific browser\n   210→npm run test:e2e -- --debug           # Debug E2E tests\n   211→\n   212→# Specific Test Categories\n   213→docker compose exec fowldata python -m pytest -m \"auth\"      # Authentication tests\n   214→docker compose exec fowldata python -m pytest -m \"api\"       # API endpoint tests\n   215→npm test -- --testNamePattern=\"authentication\"               # Frontend auth tests\n   216→```\n   217→\n   218→#### Test Debugging\n   219→```bash\n   220→# Backend Debug\n   221→docker compose exec fowldata python -m pytest -s --pdb hunts/tests/test_weather_api.py::test_function\n   222→docker compose exec fowldata python manage.py shell\n   223→\n   224→# Frontend Debug\n   225→npm run test:e2e -- --headed          # Show browser\n   226→npm run test:e2e -- --ui               # Playwright UI mode\n   227→npm test -- --no-coverage --verbose   # Detailed Jest output\n   228→\n   229→# E2E Test Environment Validation\n   230→./scripts/verify-e2e-setup.sh         # Check E2E prerequisites\n   231→```\n   232→\n   233→### Production Deployment\n   234→```bash\n   235→# Production validation and deployment"}]},"uuid":"1e31c31d-7f30-4b4e-be6f-8b6396fa4d3b","timestamp":"2025-08-25T04:43:44.170Z","toolUseResult":{"filePath":"/Users/markelmore/_code/fowldata/CLAUDE.md","oldString":"### Pre-Commit Validation\n```bash\n# Full CI validation (includes E2E tests)\n./testlint\n\n# Quick validation (faster, no E2E)  \n./testlint-quick\n```","newString":"### Testing & Validation\n\n#### Pre-Commit Validation\n```bash\n# Quick validation (run before commits)\n./testlint-quick               # Essential tests only (2-3 minutes)\n\n# Full validation (run before PRs)  \n./testlint                     # Complete validation with E2E tests (10-15 minutes)\n```\n\n#### Comprehensive Testing Commands\n```bash\n# Backend Testing\ndocker compose exec fowldata python -m pytest                    # All backend tests\ndocker compose exec fowldata python -m pytest -m \"not performance\"  # Skip slow tests\ndocker compose exec fowldata python -m pytest --cov=fowldata     # With coverage\ndocker compose exec fowldata python -m pytest -s --pdb          # Debug mode\n\n# Frontend Testing\ncd frontend\nnpm run test                           # Jest unit tests\nnpm run test -- --watchAll=false      # CI mode (run once)  \nnpm run test:e2e                      # Playwright E2E tests\nnpm run test:e2e -- --project chromium  # Specific browser\nnpm run test:e2e -- --debug           # Debug E2E tests\n\n# Specific Test Categories\ndocker compose exec fowldata python -m pytest -m \"auth\"      # Authentication tests\ndocker compose exec fowldata python -m pytest -m \"api\"       # API endpoint tests\nnpm test -- --testNamePattern=\"authentication\"               # Frontend auth tests\n```\n\n#### Test Debugging\n```bash\n# Backend Debug\ndocker compose exec fowldata python -m pytest -s --pdb hunts/tests/test_weather_api.py::test_function\ndocker compose exec fowldata python manage.py shell\n\n# Frontend Debug\nnpm run test:e2e -- --headed          # Show browser\nnpm run test:e2e -- --ui               # Playwright UI mode\nnpm test -- --no-coverage --verbose   # Detailed Jest output\n\n# E2E Test Environment Validation\n./scripts/verify-e2e-setup.sh         # Check E2E prerequisites\n```","originalFile":"# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## 🎯 Quick Reference\n\n### Critical Commands\n```bash\n# Essential Development\ndocker compose up -d && cd frontend && npm run dev  # Start full stack\n./testlint-quick           # Quick validation before commits\n./testlint                 # Full validation before PRs\n\n# Production Deployment\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# Emergency Troubleshooting\nnode auth-health-check.js  # Authentication issues\n./scripts/verify-e2e-setup.sh  # E2E test setup validation\n```\n\n### Key API Endpoints\n```bash\nGET /api/hunts/            # List user hunts\nPOST /api/hunts/           # Create hunt\nGET /api/users/me/         # Current user info  \nPOST /api/auth/sync/       # User synchronization\nGET /api/health/           # Backend health check\n```\n\n## ⚠️ CRITICAL: Docker Network Configuration - NEVER CHANGE\n**RECURRING ISSUE - ALWAYS CHECK THIS FIRST**\n\nThe frontend `.env.local` file MUST use the Docker service name for backend communication:\n```bash\n# CORRECT - Use Docker service name (this is in frontend/.env.local)\nBACKEND_URL=http://fowldata:8000\n\n# WRONG - Will cause ECONNREFUSED errors in Docker containers\nBACKEND_URL=http://localhost:8000\n```\n\n**Why**: Inside Docker containers, `localhost` refers to the container itself, not the host. Service names resolve to container IPs within the Docker network.\n\n**Symptoms**: NextAuth authentication fails, API calls fail with \"connect ECONNREFUSED ::1:8000\"\n\n**Fix**: Always use `fowldata:8000` (service name from docker-compose.yml) for inter-container communication.\n\n## ⚠️ CRITICAL: Mapbox GL JS v3+ with react-map-gl v8 Layer Rendering\n**RECURRING ISSUE - ESSENTIAL FOR LAYER VISIBILITY**\n\nWhen using Mapbox GL JS v3+ with react-map-gl v8, layers will NOT render without explicit `mapboxgl.accessToken` configuration:\n\n```typescript\nimport mapboxgl from 'mapbox-gl';\n\nconst MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;\n\n// CRITICAL: This is required for Mapbox GL JS v3+ with react-map-gl v8\nif (MAPBOX_TOKEN) {\n  mapboxgl.accessToken = MAPBOX_TOKEN;\n}\n```\n\n**Why**: react-map-gl v8 delegates to Mapbox GL JS v3+ which requires explicit token configuration. Previous versions handled this automatically.\n\n**Symptoms**: \n- Map loads successfully with satellite/custom styles\n- Source/Layer components appear to be configured correctly  \n- Debug panels show data is present\n- NO visual layers render (not even test layers with bright colors)\n- No console errors about authentication or tokens\n- Canvas element exists but shows no content\n\n**Additional react-map-gl v8 Requirements:**\n- Layer components must be **immediate children** of Source components (no React fragments `<>...</>`)\n- Do NOT add explicit `source` props to Layer components inside Source components\n- Remove conditional `mapStyleLoaded` wrappers - let react-map-gl handle timing internally\n\n**Fix Location**: Add the `mapboxgl.accessToken` configuration at the top level of your Map component file, after importing mapboxgl.\n\n**Debugging Signs This is the Issue**:\n- Mapbox canvas renders with proper classes (`mapboxgl-canvas-container`)\n- Map style loads successfully\n- Data processing works correctly\n- Visibility and layer management appears functional\n- Zero visual layer rendering despite all other systems working\n\n## ⚠️ CRITICAL: Production Environment Variable Loading\n**RECURRING DEPLOYMENT ISSUE - ESSENTIAL FOR PRODUCTION**\n\nDocker Compose production deployments REQUIRE explicit `--env-file` flag:\n\n```bash\n# REQUIRED for all production commands\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# WRONG - Will cause \"variable is not set\" warnings and startup failures\ndocker-compose -f docker-compose.prod.yaml up -d\n```\n\n**Why**: The `env_file:` setting in docker-compose.prod.yaml handles container environment variables, but Docker Compose variable substitution (${VARIABLE}) requires the explicit `--env-file` flag.\n\n**Symptoms**: \n- `WARN[0000] The \"DB_NAME\" variable is not set. Defaulting to a blank string.`\n- PostgreSQL container fails with \"superuser password not specified\"\n- Environment variables visible in some services but not others\n\n**Additional Production Requirements**:\n- All services need `env_file: - .env.production` in docker-compose.prod.yaml\n- Avoid special characters in passwords (`$`, `!`, etc.) - shell interprets them\n- Use clean file encoding (UTF-8 without BOM) for environment files\n\n## Architecture Overview\n\nFowlData is a production-ready full-stack waterfowl hunting tracking application:\n\n**Backend (Django)**: Located in `fowldata/` directory\n- Django 4.2 with Django REST Framework for API endpoints\n- PostgreSQL 16 with PostGIS 3.4 for geospatial data storage and spatial queries\n- JWT RS256 authentication integrated with NextAuth.js frontend\n- Two main apps: `accounts` (user management) and `hunts` (hunt tracking)\n- AWS S3 integration for photo storage with presigned URLs and CORS\n- Gunicorn WSGI server with production performance tuning\n\n**Frontend (Next.js)**: Located in `frontend/` directory  \n- Next.js 15.4.4 with React 19 and TypeScript\n- NextAuth.js v5 with Google OAuth and credentials authentication\n- Mapbox GL JS v3+ with react-map-gl v8 for interactive mapping\n- TailwindCSS for styling, React Hook Form for forms\n- Playwright for E2E testing, Jest for unit tests\n- Production-optimized standalone builds\n\n**Production Infrastructure**:\n- **Deployment**: Digital Ocean Droplets with Docker Compose orchestration\n- **Reverse Proxy**: Nginx with SSL/TLS termination via Let's Encrypt\n- **Caching**: Redis for sessions, query caching, and performance optimization\n- **Storage**: AWS S3 with CloudFront CDN for photo uploads and static assets\n- **Database**: PostgreSQL with PostGIS extensions, performance tuning, and automated backups\n- **Monitoring**: Docker health checks, database performance monitoring, and logging\n- **Security**: SSL enforcement, security headers, rate limiting, and firewall configuration\n\n## Development Commands\n\n### Backend Development\n```bash\n# Start services\ndocker compose up -d\n\n# Django management commands\ndocker compose exec fowldata python manage.py migrate\ndocker compose exec fowldata python manage.py createsuperuser\ndocker compose exec fowldata python manage.py shell\n\n# Run backend tests\ndocker compose exec fowldata python -m pytest\ndocker compose exec fowldata python -m pytest accounts/tests/ hunts/tests/ -v\n\n# Code formatting and linting\ndocker compose exec fowldata black .\ndocker compose exec fowldata flake8\n\n# Single test file\ndocker compose exec fowldata python -m pytest hunts/tests/test_weather_api.py -v\n```\n\n### Frontend Development\n```bash\ncd frontend\n\n# Development server (with Turbopack)\nnpm run dev\n\n# Build and type checking\nnpm run build\nnpm run lint\n\n# Testing\nnpm run test                    # Jest unit tests\nnpm run test:watch             # Jest in watch mode  \nnpm run test:e2e               # Playwright E2E tests\nnpm run test:e2e:ui            # Playwright with UI\n```\n\n### Pre-Commit Validation\n```bash\n# Full CI validation (includes E2E tests)\n./testlint\n\n# Quick validation (faster, no E2E)  \n./testlint-quick\n```\n\n### Production Deployment\n```bash\n# Production validation and deployment\n./scripts/validate-production.sh\n\n# Production commands (ALWAYS use --env-file flag)\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production build\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production logs -f\n\n# Django production setup\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py migrate\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py createsuperuser\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py collectstatic --noinput\n```\n\n## Core Data Models\n\n**Hunt Model** (`hunts/models.py`):\n- Tracks hunting sessions with date, location (PostGIS Point), weather conditions\n- Links to multiple Bird harvests and HuntPhoto uploads\n- Weather data automatically fetched from external API based on coordinates\n\n**Bird Model**:\n- Individual waterfowl harvests within a hunt\n- Species selection from predefined WATERFOWL_CHOICES (Dabblers, Divers, Geese)\n- Includes harvest time, notes, and gender (Drake/Hen)\n\n**Authentication Integration**:\n- Django backend uses custom NextAuthBackend for JWT token validation\n- Frontend NextAuth.js providers: Google, Facebook, Credentials\n- Token synchronization between NextAuth and Django API client\n\n## Key Integration Points\n\n**Django-NextAuth Authentication Flow**:\n- NextAuth JWT tokens validated by Django via `accounts/nextauth_backend.py`  \n- API requests include NextAuth JWT in Authorization header\n- User creation/sync handled by Django signals in `accounts/signals.py`\n\n**Photo Upload System**:\n- S3 presigned URLs generated by Django `hunts/s3_manager.py`\n- Frontend uploads directly to S3, then registers with Django\n- HuntPhoto model tracks S3 URLs linked to Hunt instances\n\n**Geospatial Features**:\n- Hunt locations stored as PostGIS Points with lat/lng coordinates\n- Weather API integration fetches conditions based on hunt coordinates\n- Mapbox integration for location selection and visualization\n\n## Environment Configuration\n\nRequired environment files:\n- `.env.local` (root) - Django database, secrets, S3 credentials\n- `frontend/.env.local` - NextAuth secrets, API URLs\n\nCritical environment variables:\n- `SECRET_KEY` (Django), `AUTH_SECRET` (NextAuth)\n- `DB_HOST`, `DB_NAME`, `DB_USER`, `DB_PASS` (PostgreSQL)\n- `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `AWS_S3_BUCKET_NAME`\n- `GOOGLE_CLIENT_ID`, `GOOGLE_CLIENT_SECRET` (OAuth)\n\n## Testing Patterns\n\n**Backend Tests** (pytest-django):\n- Database tests marked with `@pytest.mark.django_db`\n- API endpoint tests use Django's APIClient  \n- External services (S3, weather API) are mocked\n- Fixtures in `conftest.py` create test users and hunt data\n\n**Frontend Tests**:\n- Unit tests: Jest + React Testing Library in `src/__tests__/`\n- Component tests focus on user interactions, not implementation\n- E2E tests: Playwright in `e2e/` directory with real browser automation\n- API mocking for isolated component testing\n\n## Mapbox Configuration\n\n- Import controls from `react-map-gl/mapbox` for Mapbox GL JS v3.5+\n- Control positioning critical - use `position` prop, not `style` object\n- Standard controls must be children of `<Map>` component\n- Custom controls positioned absolutely outside `<Map>`\n- Test controls in both browser and fullscreen modes\n\n## Development Notes\n\n- Rebuild Docker containers after backend changes to see frontend updates\n- Use test credentials: `mark@mail.com` / `1@Tsgstp` for Puppeteer E2E tests\n- Run `./testlint-quick` before commits, `./testlint` before PRs\n- Weather API responses should be mocked in tests for consistency\n- if authentication issue arises we can run  Run the health check script:\n  node auth-health-check.js","structuredPatch":[{"oldStart":182,"oldLines":15,"newStart":182,"newLines":54,"lines":[" npm run test:e2e:ui            # Playwright with UI"," ```"," ","-### Pre-Commit Validation","+### Testing & Validation","+","+#### Pre-Commit Validation"," ```bash","-# Full CI validation (includes E2E tests)","-./testlint","+# Quick validation (run before commits)","+./testlint-quick               # Essential tests only (2-3 minutes)"," ","-# Quick validation (faster, no E2E)  ","-./testlint-quick","+# Full validation (run before PRs)  ","+./testlint                     # Complete validation with E2E tests (10-15 minutes)"," ```"," ","+#### Comprehensive Testing Commands","+```bash","+# Backend Testing","+docker compose exec fowldata python -m pytest                    # All backend tests","+docker compose exec fowldata python -m pytest -m \"not performance\"  # Skip slow tests","+docker compose exec fowldata python -m pytest --cov=fowldata     # With coverage","+docker compose exec fowldata python -m pytest -s --pdb          # Debug mode","+","+# Frontend Testing","+cd frontend","+npm run test                           # Jest unit tests","+npm run test -- --watchAll=false      # CI mode (run once)  ","+npm run test:e2e                      # Playwright E2E tests","+npm run test:e2e -- --project chromium  # Specific browser","+npm run test:e2e -- --debug           # Debug E2E tests","+","+# Specific Test Categories","+docker compose exec fowldata python -m pytest -m \"auth\"      # Authentication tests","+docker compose exec fowldata python -m pytest -m \"api\"       # API endpoint tests","+npm test -- --testNamePattern=\"authentication\"               # Frontend auth tests","+```","+","+#### Test Debugging","+```bash","+# Backend Debug","+docker compose exec fowldata python -m pytest -s --pdb hunts/tests/test_weather_api.py::test_function","+docker compose exec fowldata python manage.py shell","+","+# Frontend Debug","+npm run test:e2e -- --headed          # Show browser","+npm run test:e2e -- --ui               # Playwright UI mode","+npm test -- --no-coverage --verbose   # Detailed Jest output","+","+# E2E Test Environment Validation","+./scripts/verify-e2e-setup.sh         # Check E2E prerequisites","+```","+"," ### Production Deployment"," ```bash"," # Production validation and deployment"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"1e31c31d-7f30-4b4e-be6f-8b6396fa4d3b","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_011TWamVRnuEvstwW3Gns8Rc","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01N2gDGQwAKJNANEkBDFmHTk","name":"TodoWrite","input":{"todos":[{"content":"Analyze current CLAUDE.md structure and identify integration points","status":"completed","activeForm":"Analyzing current CLAUDE.md structure and identifying integration points"},{"content":"Enhance testing section with comprehensive commands","status":"completed","activeForm":"Enhancing testing section with comprehensive commands"},{"content":"Add security and performance best practices","status":"in_progress","activeForm":"Adding security and performance best practices"},{"content":"Expand troubleshooting section with consolidated patterns","status":"pending","activeForm":"Expanding troubleshooting section with consolidated patterns"},{"content":"Add development workflow improvements","status":"pending","activeForm":"Adding development workflow improvements"},{"content":"Include API reference and environment variables priority","status":"pending","activeForm":"Including API reference and environment variables priority"},{"content":"Review for redundancy and conflicts","status":"pending","activeForm":"Reviewing for redundancy and conflicts"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":1364,"cache_read_input_tokens":76852,"cache_creation":{"ephemeral_5m_input_tokens":1364,"ephemeral_1h_input_tokens":0},"output_tokens":24,"service_tier":"standard"}},"requestId":"req_011CSTpLyLBT13ysKMwFrEB6","type":"assistant","uuid":"485d8cc4-5802-42fb-ab2b-aa9d090e7aa0","timestamp":"2025-08-25T04:43:48.628Z"}
{"parentUuid":"485d8cc4-5802-42fb-ab2b-aa9d090e7aa0","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01N2gDGQwAKJNANEkBDFmHTk","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"2f03fcd9-48bb-4e2c-8a5d-5104621782bc","timestamp":"2025-08-25T04:43:48.676Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Analyze current CLAUDE.md structure and identify integration points","status":"completed","activeForm":"Analyzing current CLAUDE.md structure and identifying integration points"},{"content":"Enhance testing section with comprehensive commands","status":"completed","activeForm":"Enhancing testing section with comprehensive commands"},{"content":"Add security and performance best practices","status":"in_progress","activeForm":"Adding security and performance best practices"},{"content":"Expand troubleshooting section with consolidated patterns","status":"pending","activeForm":"Expanding troubleshooting section with consolidated patterns"},{"content":"Add development workflow improvements","status":"pending","activeForm":"Adding development workflow improvements"},{"content":"Include API reference and environment variables priority","status":"pending","activeForm":"Including API reference and environment variables priority"},{"content":"Review for redundancy and conflicts","status":"pending","activeForm":"Reviewing for redundancy and conflicts"}]}}
{"parentUuid":"2f03fcd9-48bb-4e2c-8a5d-5104621782bc","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_013oNXx4QqXXDXVUSq5LqZJq","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01PVhjqmprZuSAxQxC3JsaaG","name":"Edit","input":{"file_path":"/Users/markelmore/_code/fowldata/CLAUDE.md","old_string":"## Environment Configuration\n\nRequired environment files:\n- `.env.local` (root) - Django database, secrets, S3 credentials\n- `frontend/.env.local` - NextAuth secrets, API URLs\n\nCritical environment variables:\n- `SECRET_KEY` (Django), `AUTH_SECRET` (NextAuth)\n- `DB_HOST`, `DB_NAME`, `DB_USER`, `DB_PASS` (PostgreSQL)\n- `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `AWS_S3_BUCKET_NAME`\n- `GOOGLE_CLIENT_ID`, `GOOGLE_CLIENT_SECRET` (OAuth)","new_string":"## Environment Configuration\n\n### Critical Environment Variables (MUST MATCH)\n**These variables must be identical in both backend and frontend:**\n```bash\n# Authentication (CRITICAL - must match exactly)\nAUTH_SECRET=your-nextauth-secret-key        # Both .env.local AND frontend/.env.local\n\n# Docker Network (CRITICAL - use service names)  \nBACKEND_URL=http://fowldata:8000            # frontend/.env.local ONLY\n```\n\n### Required Environment Files\n```bash\n# Development\n.env.local                  # Backend: Django database, secrets, S3 credentials  \nfrontend/.env.local         # Frontend: NextAuth secrets, API URLs\n\n# Production  \n.env.production            # Backend: Production settings\nfrontend/.env.production   # Frontend: Production URLs and secrets\n```\n\n### Essential Variables by Service\n```bash\n# Database (Backend .env.local)\nDB_HOST=localhost           # Development: localhost, Production: postgres\nDB_NAME=fowldata           # Database name\nDB_USER=postgres           # Database username\nDB_PASS=your_password      # No special characters in production\n\n# Authentication (Both files)\nAUTH_SECRET=your-secret    # Generate: openssl rand -base64 32\nSECRET_KEY=django-secret   # Django only\n\n# Mapbox (Frontend .env.local)\nNEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your-token  # REQUIRED for layer rendering\n\n# AWS S3 (Backend .env.local)\nAWS_ACCESS_KEY_ID=your-key\nAWS_SECRET_ACCESS_KEY=your-secret  \nAWS_S3_BUCKET_NAME=bucket-name\n\n# OAuth (Frontend .env.local)\nGOOGLE_CLIENT_ID=your-google-id\nGOOGLE_CLIENT_SECRET=your-google-secret\n```\n\n### Security & Performance Best Practices\n```bash\n# Production Security Checklist\n- Use strong AUTH_SECRET (32+ characters): openssl rand -base64 32\n- Avoid special characters in passwords (no $, !, etc.) - shell interprets them\n- Always use HTTPS for OAuth callbacks in production\n- Set proper CORS origins: CORS_ALLOWED_ORIGINS=https://yourdomain.com\n\n# Performance Optimization  \n- Use Redis for caching: REDIS_HOST=redis, REDIS_PASSWORD=your-password\n- Enable SSL redirect: SECURE_SSL_REDIRECT=True (production)\n- Configure proper headers: SECURE_HSTS_SECONDS=31536000\n\n# Environment File Best Practices\n- Use UTF-8 encoding without BOM\n- No spaces around = signs: VAR=value (not VAR = value)\n- Always backup production environment files\n```"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":328,"cache_read_input_tokens":78216,"cache_creation":{"ephemeral_5m_input_tokens":328,"ephemeral_1h_input_tokens":0},"output_tokens":24,"service_tier":"standard"}},"requestId":"req_011CSTpMJaoz1k6S3rAchkr9","type":"assistant","uuid":"72f4e022-71aa-4dcc-a34c-9fc196308ebb","timestamp":"2025-08-25T04:44:06.782Z"}
{"parentUuid":"72f4e022-71aa-4dcc-a34c-9fc196308ebb","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01PVhjqmprZuSAxQxC3JsaaG","type":"tool_result","content":"The file /Users/markelmore/_code/fowldata/CLAUDE.md has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   279→- Hunt locations stored as PostGIS Points with lat/lng coordinates\n   280→- Weather API integration fetches conditions based on hunt coordinates\n   281→- Mapbox integration for location selection and visualization\n   282→\n   283→## Environment Configuration\n   284→\n   285→### Critical Environment Variables (MUST MATCH)\n   286→**These variables must be identical in both backend and frontend:**\n   287→```bash\n   288→# Authentication (CRITICAL - must match exactly)\n   289→AUTH_SECRET=your-nextauth-secret-key        # Both .env.local AND frontend/.env.local\n   290→\n   291→# Docker Network (CRITICAL - use service names)  \n   292→BACKEND_URL=http://fowldata:8000            # frontend/.env.local ONLY\n   293→```\n   294→\n   295→### Required Environment Files\n   296→```bash\n   297→# Development\n   298→.env.local                  # Backend: Django database, secrets, S3 credentials  \n   299→frontend/.env.local         # Frontend: NextAuth secrets, API URLs\n   300→\n   301→# Production  \n   302→.env.production            # Backend: Production settings\n   303→frontend/.env.production   # Frontend: Production URLs and secrets\n   304→```\n   305→\n   306→### Essential Variables by Service\n   307→```bash\n   308→# Database (Backend .env.local)\n   309→DB_HOST=localhost           # Development: localhost, Production: postgres\n   310→DB_NAME=fowldata           # Database name\n   311→DB_USER=postgres           # Database username\n   312→DB_PASS=your_password      # No special characters in production\n   313→\n   314→# Authentication (Both files)\n   315→AUTH_SECRET=your-secret    # Generate: openssl rand -base64 32\n   316→SECRET_KEY=django-secret   # Django only\n   317→\n   318→# Mapbox (Frontend .env.local)\n   319→NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your-token  # REQUIRED for layer rendering\n   320→\n   321→# AWS S3 (Backend .env.local)\n   322→AWS_ACCESS_KEY_ID=your-key\n   323→AWS_SECRET_ACCESS_KEY=your-secret  \n   324→AWS_S3_BUCKET_NAME=bucket-name\n   325→\n   326→# OAuth (Frontend .env.local)\n   327→GOOGLE_CLIENT_ID=your-google-id\n   328→GOOGLE_CLIENT_SECRET=your-google-secret\n   329→```\n   330→\n   331→### Security & Performance Best Practices\n   332→```bash\n   333→# Production Security Checklist\n   334→- Use strong AUTH_SECRET (32+ characters): openssl rand -base64 32\n   335→- Avoid special characters in passwords (no $, !, etc.) - shell interprets them\n   336→- Always use HTTPS for OAuth callbacks in production\n   337→- Set proper CORS origins: CORS_ALLOWED_ORIGINS=https://yourdomain.com\n   338→\n   339→# Performance Optimization  \n   340→- Use Redis for caching: REDIS_HOST=redis, REDIS_PASSWORD=your-password\n   341→- Enable SSL redirect: SECURE_SSL_REDIRECT=True (production)\n   342→- Configure proper headers: SECURE_HSTS_SECONDS=31536000\n   343→\n   344→# Environment File Best Practices\n   345→- Use UTF-8 encoding without BOM\n   346→- No spaces around = signs: VAR=value (not VAR = value)\n   347→- Always backup production environment files\n   348→```\n   349→\n   350→## Testing Patterns\n   351→\n   352→**Backend Tests** (pytest-django):"}]},"uuid":"a2761440-6829-4417-90bb-a71ed946072b","timestamp":"2025-08-25T04:44:06.848Z","toolUseResult":{"filePath":"/Users/markelmore/_code/fowldata/CLAUDE.md","oldString":"## Environment Configuration\n\nRequired environment files:\n- `.env.local` (root) - Django database, secrets, S3 credentials\n- `frontend/.env.local` - NextAuth secrets, API URLs\n\nCritical environment variables:\n- `SECRET_KEY` (Django), `AUTH_SECRET` (NextAuth)\n- `DB_HOST`, `DB_NAME`, `DB_USER`, `DB_PASS` (PostgreSQL)\n- `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `AWS_S3_BUCKET_NAME`\n- `GOOGLE_CLIENT_ID`, `GOOGLE_CLIENT_SECRET` (OAuth)","newString":"## Environment Configuration\n\n### Critical Environment Variables (MUST MATCH)\n**These variables must be identical in both backend and frontend:**\n```bash\n# Authentication (CRITICAL - must match exactly)\nAUTH_SECRET=your-nextauth-secret-key        # Both .env.local AND frontend/.env.local\n\n# Docker Network (CRITICAL - use service names)  \nBACKEND_URL=http://fowldata:8000            # frontend/.env.local ONLY\n```\n\n### Required Environment Files\n```bash\n# Development\n.env.local                  # Backend: Django database, secrets, S3 credentials  \nfrontend/.env.local         # Frontend: NextAuth secrets, API URLs\n\n# Production  \n.env.production            # Backend: Production settings\nfrontend/.env.production   # Frontend: Production URLs and secrets\n```\n\n### Essential Variables by Service\n```bash\n# Database (Backend .env.local)\nDB_HOST=localhost           # Development: localhost, Production: postgres\nDB_NAME=fowldata           # Database name\nDB_USER=postgres           # Database username\nDB_PASS=your_password      # No special characters in production\n\n# Authentication (Both files)\nAUTH_SECRET=your-secret    # Generate: openssl rand -base64 32\nSECRET_KEY=django-secret   # Django only\n\n# Mapbox (Frontend .env.local)\nNEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your-token  # REQUIRED for layer rendering\n\n# AWS S3 (Backend .env.local)\nAWS_ACCESS_KEY_ID=your-key\nAWS_SECRET_ACCESS_KEY=your-secret  \nAWS_S3_BUCKET_NAME=bucket-name\n\n# OAuth (Frontend .env.local)\nGOOGLE_CLIENT_ID=your-google-id\nGOOGLE_CLIENT_SECRET=your-google-secret\n```\n\n### Security & Performance Best Practices\n```bash\n# Production Security Checklist\n- Use strong AUTH_SECRET (32+ characters): openssl rand -base64 32\n- Avoid special characters in passwords (no $, !, etc.) - shell interprets them\n- Always use HTTPS for OAuth callbacks in production\n- Set proper CORS origins: CORS_ALLOWED_ORIGINS=https://yourdomain.com\n\n# Performance Optimization  \n- Use Redis for caching: REDIS_HOST=redis, REDIS_PASSWORD=your-password\n- Enable SSL redirect: SECURE_SSL_REDIRECT=True (production)\n- Configure proper headers: SECURE_HSTS_SECONDS=31536000\n\n# Environment File Best Practices\n- Use UTF-8 encoding without BOM\n- No spaces around = signs: VAR=value (not VAR = value)\n- Always backup production environment files\n```","originalFile":"# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## 🎯 Quick Reference\n\n### Critical Commands\n```bash\n# Essential Development\ndocker compose up -d && cd frontend && npm run dev  # Start full stack\n./testlint-quick           # Quick validation before commits\n./testlint                 # Full validation before PRs\n\n# Production Deployment\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# Emergency Troubleshooting\nnode auth-health-check.js  # Authentication issues\n./scripts/verify-e2e-setup.sh  # E2E test setup validation\n```\n\n### Key API Endpoints\n```bash\nGET /api/hunts/            # List user hunts\nPOST /api/hunts/           # Create hunt\nGET /api/users/me/         # Current user info  \nPOST /api/auth/sync/       # User synchronization\nGET /api/health/           # Backend health check\n```\n\n## ⚠️ CRITICAL: Docker Network Configuration - NEVER CHANGE\n**RECURRING ISSUE - ALWAYS CHECK THIS FIRST**\n\nThe frontend `.env.local` file MUST use the Docker service name for backend communication:\n```bash\n# CORRECT - Use Docker service name (this is in frontend/.env.local)\nBACKEND_URL=http://fowldata:8000\n\n# WRONG - Will cause ECONNREFUSED errors in Docker containers\nBACKEND_URL=http://localhost:8000\n```\n\n**Why**: Inside Docker containers, `localhost` refers to the container itself, not the host. Service names resolve to container IPs within the Docker network.\n\n**Symptoms**: NextAuth authentication fails, API calls fail with \"connect ECONNREFUSED ::1:8000\"\n\n**Fix**: Always use `fowldata:8000` (service name from docker-compose.yml) for inter-container communication.\n\n## ⚠️ CRITICAL: Mapbox GL JS v3+ with react-map-gl v8 Layer Rendering\n**RECURRING ISSUE - ESSENTIAL FOR LAYER VISIBILITY**\n\nWhen using Mapbox GL JS v3+ with react-map-gl v8, layers will NOT render without explicit `mapboxgl.accessToken` configuration:\n\n```typescript\nimport mapboxgl from 'mapbox-gl';\n\nconst MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;\n\n// CRITICAL: This is required for Mapbox GL JS v3+ with react-map-gl v8\nif (MAPBOX_TOKEN) {\n  mapboxgl.accessToken = MAPBOX_TOKEN;\n}\n```\n\n**Why**: react-map-gl v8 delegates to Mapbox GL JS v3+ which requires explicit token configuration. Previous versions handled this automatically.\n\n**Symptoms**: \n- Map loads successfully with satellite/custom styles\n- Source/Layer components appear to be configured correctly  \n- Debug panels show data is present\n- NO visual layers render (not even test layers with bright colors)\n- No console errors about authentication or tokens\n- Canvas element exists but shows no content\n\n**Additional react-map-gl v8 Requirements:**\n- Layer components must be **immediate children** of Source components (no React fragments `<>...</>`)\n- Do NOT add explicit `source` props to Layer components inside Source components\n- Remove conditional `mapStyleLoaded` wrappers - let react-map-gl handle timing internally\n\n**Fix Location**: Add the `mapboxgl.accessToken` configuration at the top level of your Map component file, after importing mapboxgl.\n\n**Debugging Signs This is the Issue**:\n- Mapbox canvas renders with proper classes (`mapboxgl-canvas-container`)\n- Map style loads successfully\n- Data processing works correctly\n- Visibility and layer management appears functional\n- Zero visual layer rendering despite all other systems working\n\n## ⚠️ CRITICAL: Production Environment Variable Loading\n**RECURRING DEPLOYMENT ISSUE - ESSENTIAL FOR PRODUCTION**\n\nDocker Compose production deployments REQUIRE explicit `--env-file` flag:\n\n```bash\n# REQUIRED for all production commands\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# WRONG - Will cause \"variable is not set\" warnings and startup failures\ndocker-compose -f docker-compose.prod.yaml up -d\n```\n\n**Why**: The `env_file:` setting in docker-compose.prod.yaml handles container environment variables, but Docker Compose variable substitution (${VARIABLE}) requires the explicit `--env-file` flag.\n\n**Symptoms**: \n- `WARN[0000] The \"DB_NAME\" variable is not set. Defaulting to a blank string.`\n- PostgreSQL container fails with \"superuser password not specified\"\n- Environment variables visible in some services but not others\n\n**Additional Production Requirements**:\n- All services need `env_file: - .env.production` in docker-compose.prod.yaml\n- Avoid special characters in passwords (`$`, `!`, etc.) - shell interprets them\n- Use clean file encoding (UTF-8 without BOM) for environment files\n\n## Architecture Overview\n\nFowlData is a production-ready full-stack waterfowl hunting tracking application:\n\n**Backend (Django)**: Located in `fowldata/` directory\n- Django 4.2 with Django REST Framework for API endpoints\n- PostgreSQL 16 with PostGIS 3.4 for geospatial data storage and spatial queries\n- JWT RS256 authentication integrated with NextAuth.js frontend\n- Two main apps: `accounts` (user management) and `hunts` (hunt tracking)\n- AWS S3 integration for photo storage with presigned URLs and CORS\n- Gunicorn WSGI server with production performance tuning\n\n**Frontend (Next.js)**: Located in `frontend/` directory  \n- Next.js 15.4.4 with React 19 and TypeScript\n- NextAuth.js v5 with Google OAuth and credentials authentication\n- Mapbox GL JS v3+ with react-map-gl v8 for interactive mapping\n- TailwindCSS for styling, React Hook Form for forms\n- Playwright for E2E testing, Jest for unit tests\n- Production-optimized standalone builds\n\n**Production Infrastructure**:\n- **Deployment**: Digital Ocean Droplets with Docker Compose orchestration\n- **Reverse Proxy**: Nginx with SSL/TLS termination via Let's Encrypt\n- **Caching**: Redis for sessions, query caching, and performance optimization\n- **Storage**: AWS S3 with CloudFront CDN for photo uploads and static assets\n- **Database**: PostgreSQL with PostGIS extensions, performance tuning, and automated backups\n- **Monitoring**: Docker health checks, database performance monitoring, and logging\n- **Security**: SSL enforcement, security headers, rate limiting, and firewall configuration\n\n## Development Commands\n\n### Backend Development\n```bash\n# Start services\ndocker compose up -d\n\n# Django management commands\ndocker compose exec fowldata python manage.py migrate\ndocker compose exec fowldata python manage.py createsuperuser\ndocker compose exec fowldata python manage.py shell\n\n# Run backend tests\ndocker compose exec fowldata python -m pytest\ndocker compose exec fowldata python -m pytest accounts/tests/ hunts/tests/ -v\n\n# Code formatting and linting\ndocker compose exec fowldata black .\ndocker compose exec fowldata flake8\n\n# Single test file\ndocker compose exec fowldata python -m pytest hunts/tests/test_weather_api.py -v\n```\n\n### Frontend Development\n```bash\ncd frontend\n\n# Development server (with Turbopack)\nnpm run dev\n\n# Build and type checking\nnpm run build\nnpm run lint\n\n# Testing\nnpm run test                    # Jest unit tests\nnpm run test:watch             # Jest in watch mode  \nnpm run test:e2e               # Playwright E2E tests\nnpm run test:e2e:ui            # Playwright with UI\n```\n\n### Testing & Validation\n\n#### Pre-Commit Validation\n```bash\n# Quick validation (run before commits)\n./testlint-quick               # Essential tests only (2-3 minutes)\n\n# Full validation (run before PRs)  \n./testlint                     # Complete validation with E2E tests (10-15 minutes)\n```\n\n#### Comprehensive Testing Commands\n```bash\n# Backend Testing\ndocker compose exec fowldata python -m pytest                    # All backend tests\ndocker compose exec fowldata python -m pytest -m \"not performance\"  # Skip slow tests\ndocker compose exec fowldata python -m pytest --cov=fowldata     # With coverage\ndocker compose exec fowldata python -m pytest -s --pdb          # Debug mode\n\n# Frontend Testing\ncd frontend\nnpm run test                           # Jest unit tests\nnpm run test -- --watchAll=false      # CI mode (run once)  \nnpm run test:e2e                      # Playwright E2E tests\nnpm run test:e2e -- --project chromium  # Specific browser\nnpm run test:e2e -- --debug           # Debug E2E tests\n\n# Specific Test Categories\ndocker compose exec fowldata python -m pytest -m \"auth\"      # Authentication tests\ndocker compose exec fowldata python -m pytest -m \"api\"       # API endpoint tests\nnpm test -- --testNamePattern=\"authentication\"               # Frontend auth tests\n```\n\n#### Test Debugging\n```bash\n# Backend Debug\ndocker compose exec fowldata python -m pytest -s --pdb hunts/tests/test_weather_api.py::test_function\ndocker compose exec fowldata python manage.py shell\n\n# Frontend Debug\nnpm run test:e2e -- --headed          # Show browser\nnpm run test:e2e -- --ui               # Playwright UI mode\nnpm test -- --no-coverage --verbose   # Detailed Jest output\n\n# E2E Test Environment Validation\n./scripts/verify-e2e-setup.sh         # Check E2E prerequisites\n```\n\n### Production Deployment\n```bash\n# Production validation and deployment\n./scripts/validate-production.sh\n\n# Production commands (ALWAYS use --env-file flag)\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production build\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production logs -f\n\n# Django production setup\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py migrate\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py createsuperuser\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py collectstatic --noinput\n```\n\n## Core Data Models\n\n**Hunt Model** (`hunts/models.py`):\n- Tracks hunting sessions with date, location (PostGIS Point), weather conditions\n- Links to multiple Bird harvests and HuntPhoto uploads\n- Weather data automatically fetched from external API based on coordinates\n\n**Bird Model**:\n- Individual waterfowl harvests within a hunt\n- Species selection from predefined WATERFOWL_CHOICES (Dabblers, Divers, Geese)\n- Includes harvest time, notes, and gender (Drake/Hen)\n\n**Authentication Integration**:\n- Django backend uses custom NextAuthBackend for JWT token validation\n- Frontend NextAuth.js providers: Google, Facebook, Credentials\n- Token synchronization between NextAuth and Django API client\n\n## Key Integration Points\n\n**Django-NextAuth Authentication Flow**:\n- NextAuth JWT tokens validated by Django via `accounts/nextauth_backend.py`  \n- API requests include NextAuth JWT in Authorization header\n- User creation/sync handled by Django signals in `accounts/signals.py`\n\n**Photo Upload System**:\n- S3 presigned URLs generated by Django `hunts/s3_manager.py`\n- Frontend uploads directly to S3, then registers with Django\n- HuntPhoto model tracks S3 URLs linked to Hunt instances\n\n**Geospatial Features**:\n- Hunt locations stored as PostGIS Points with lat/lng coordinates\n- Weather API integration fetches conditions based on hunt coordinates\n- Mapbox integration for location selection and visualization\n\n## Environment Configuration\n\nRequired environment files:\n- `.env.local` (root) - Django database, secrets, S3 credentials\n- `frontend/.env.local` - NextAuth secrets, API URLs\n\nCritical environment variables:\n- `SECRET_KEY` (Django), `AUTH_SECRET` (NextAuth)\n- `DB_HOST`, `DB_NAME`, `DB_USER`, `DB_PASS` (PostgreSQL)\n- `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `AWS_S3_BUCKET_NAME`\n- `GOOGLE_CLIENT_ID`, `GOOGLE_CLIENT_SECRET` (OAuth)\n\n## Testing Patterns\n\n**Backend Tests** (pytest-django):\n- Database tests marked with `@pytest.mark.django_db`\n- API endpoint tests use Django's APIClient  \n- External services (S3, weather API) are mocked\n- Fixtures in `conftest.py` create test users and hunt data\n\n**Frontend Tests**:\n- Unit tests: Jest + React Testing Library in `src/__tests__/`\n- Component tests focus on user interactions, not implementation\n- E2E tests: Playwright in `e2e/` directory with real browser automation\n- API mocking for isolated component testing\n\n## Mapbox Configuration\n\n- Import controls from `react-map-gl/mapbox` for Mapbox GL JS v3.5+\n- Control positioning critical - use `position` prop, not `style` object\n- Standard controls must be children of `<Map>` component\n- Custom controls positioned absolutely outside `<Map>`\n- Test controls in both browser and fullscreen modes\n\n## Development Notes\n\n- Rebuild Docker containers after backend changes to see frontend updates\n- Use test credentials: `mark@mail.com` / `1@Tsgstp` for Puppeteer E2E tests\n- Run `./testlint-quick` before commits, `./testlint` before PRs\n- Weather API responses should be mocked in tests for consistency\n- if authentication issue arises we can run  Run the health check script:\n  node auth-health-check.js","structuredPatch":[{"oldStart":282,"oldLines":16,"newStart":282,"newLines":71,"lines":[" "," ## Environment Configuration"," ","-Required environment files:","-- `.env.local` (root) - Django database, secrets, S3 credentials","-- `frontend/.env.local` - NextAuth secrets, API URLs","+### Critical Environment Variables (MUST MATCH)","+**These variables must be identical in both backend and frontend:**","+```bash","+# Authentication (CRITICAL - must match exactly)","+AUTH_SECRET=your-nextauth-secret-key        # Both .env.local AND frontend/.env.local"," ","-Critical environment variables:","-- `SECRET_KEY` (Django), `AUTH_SECRET` (NextAuth)","-- `DB_HOST`, `DB_NAME`, `DB_USER`, `DB_PASS` (PostgreSQL)","-- `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `AWS_S3_BUCKET_NAME`","-- `GOOGLE_CLIENT_ID`, `GOOGLE_CLIENT_SECRET` (OAuth)","+# Docker Network (CRITICAL - use service names)  ","+BACKEND_URL=http://fowldata:8000            # frontend/.env.local ONLY","+```"," ","+### Required Environment Files","+```bash","+# Development","+.env.local                  # Backend: Django database, secrets, S3 credentials  ","+frontend/.env.local         # Frontend: NextAuth secrets, API URLs","+","+# Production  ","+.env.production            # Backend: Production settings","+frontend/.env.production   # Frontend: Production URLs and secrets","+```","+","+### Essential Variables by Service","+```bash","+# Database (Backend .env.local)","+DB_HOST=localhost           # Development: localhost, Production: postgres","+DB_NAME=fowldata           # Database name","+DB_USER=postgres           # Database username","+DB_PASS=your_password      # No special characters in production","+","+# Authentication (Both files)","+AUTH_SECRET=your-secret    # Generate: openssl rand -base64 32","+SECRET_KEY=django-secret   # Django only","+","+# Mapbox (Frontend .env.local)","+NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your-token  # REQUIRED for layer rendering","+","+# AWS S3 (Backend .env.local)","+AWS_ACCESS_KEY_ID=your-key","+AWS_SECRET_ACCESS_KEY=your-secret  ","+AWS_S3_BUCKET_NAME=bucket-name","+","+# OAuth (Frontend .env.local)","+GOOGLE_CLIENT_ID=your-google-id","+GOOGLE_CLIENT_SECRET=your-google-secret","+```","+","+### Security & Performance Best Practices","+```bash","+# Production Security Checklist","+- Use strong AUTH_SECRET (32+ characters): openssl rand -base64 32","+- Avoid special characters in passwords (no $, !, etc.) - shell interprets them","+- Always use HTTPS for OAuth callbacks in production","+- Set proper CORS origins: CORS_ALLOWED_ORIGINS=https://yourdomain.com","+","+# Performance Optimization  ","+- Use Redis for caching: REDIS_HOST=redis, REDIS_PASSWORD=your-password","+- Enable SSL redirect: SECURE_SSL_REDIRECT=True (production)","+- Configure proper headers: SECURE_HSTS_SECONDS=31536000","+","+# Environment File Best Practices","+- Use UTF-8 encoding without BOM","+- No spaces around = signs: VAR=value (not VAR = value)","+- Always backup production environment files","+```","+"," ## Testing Patterns"," "," **Backend Tests** (pytest-django):"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"a2761440-6829-4417-90bb-a71ed946072b","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01LC71wk6Unn7cUV7mGNPLuL","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_0132H6Dw1ChitcwLwtLrrZqM","name":"TodoWrite","input":{"todos":[{"content":"Analyze current CLAUDE.md structure and identify integration points","status":"completed","activeForm":"Analyzing current CLAUDE.md structure and identifying integration points"},{"content":"Enhance testing section with comprehensive commands","status":"completed","activeForm":"Enhancing testing section with comprehensive commands"},{"content":"Add security and performance best practices","status":"completed","activeForm":"Adding security and performance best practices"},{"content":"Expand troubleshooting section with consolidated patterns","status":"in_progress","activeForm":"Expanding troubleshooting section with consolidated patterns"},{"content":"Add development workflow improvements","status":"pending","activeForm":"Adding development workflow improvements"},{"content":"Include API reference and environment variables priority","status":"pending","activeForm":"Including API reference and environment variables priority"},{"content":"Review for redundancy and conflicts","status":"pending","activeForm":"Reviewing for redundancy and conflicts"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":1848,"cache_read_input_tokens":78544,"cache_creation":{"ephemeral_5m_input_tokens":1848,"ephemeral_1h_input_tokens":0},"output_tokens":24,"service_tier":"standard"}},"requestId":"req_011CSTpNeNxq32Pi2fC4c5Ap","type":"assistant","uuid":"24cac778-124d-4d49-b478-c88da71122cd","timestamp":"2025-08-25T04:44:11.639Z"}
{"parentUuid":"24cac778-124d-4d49-b478-c88da71122cd","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_0132H6Dw1ChitcwLwtLrrZqM","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"49abbbe7-b4cd-4977-a0b6-8c62ef48b462","timestamp":"2025-08-25T04:44:11.692Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Analyze current CLAUDE.md structure and identify integration points","status":"completed","activeForm":"Analyzing current CLAUDE.md structure and identifying integration points"},{"content":"Enhance testing section with comprehensive commands","status":"completed","activeForm":"Enhancing testing section with comprehensive commands"},{"content":"Add security and performance best practices","status":"completed","activeForm":"Adding security and performance best practices"},{"content":"Expand troubleshooting section with consolidated patterns","status":"in_progress","activeForm":"Expanding troubleshooting section with consolidated patterns"},{"content":"Add development workflow improvements","status":"pending","activeForm":"Adding development workflow improvements"},{"content":"Include API reference and environment variables priority","status":"pending","activeForm":"Including API reference and environment variables priority"},{"content":"Review for redundancy and conflicts","status":"pending","activeForm":"Reviewing for redundancy and conflicts"}]}}
{"parentUuid":"49abbbe7-b4cd-4977-a0b6-8c62ef48b462","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01CKTRYvefnpaQxF346Q6Fy7","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01HsYP1j7jUaa2rfD2p3fABC","name":"Edit","input":{"file_path":"/Users/markelmore/_code/fowldata/CLAUDE.md","old_string":"## Development Notes\n\n- Rebuild Docker containers after backend changes to see frontend updates\n- Use test credentials: `mark@mail.com` / `1@Tsgstp` for Puppeteer E2E tests\n- Run `./testlint-quick` before commits, `./testlint` before PRs\n- Weather API responses should be mocked in tests for consistency\n- if authentication issue arises we can run  Run the health check script:\n  node auth-health-check.js","new_string":"## Development Workflow\n\n### Branch Strategy & Process\n```bash\n# Create feature branch\ngit checkout -b feature/descriptive-name\ngit push -u origin feature/descriptive-name\n\n# Development cycle\n# 1. Make changes\n# 2. Test locally: ./testlint-quick\n# 3. Commit: git commit -m \"feat: description\"  \n# 4. Before PR: ./testlint\n# 5. Create PR: gh pr create --title \"Title\" --body \"Description\"\n\n# Commit Message Format\nfeat: Add hunt sharing functionality\nfix: Resolve photo upload timeout issue  \ndocs: Update API documentation\ntest: Add weather API integration tests\nrefactor: Simplify authentication middleware\n```\n\n### Development Best Practices\n- **Container Rebuilds**: Rebuild Docker containers after backend changes to see frontend updates\n- **Test Credentials**: Use `mark@mail.com` / `1@Tsgstp` for E2E tests\n- **Pre-commit**: Always run `./testlint-quick` before commits\n- **Pre-PR**: Always run `./testlint` before creating pull requests  \n- **API Mocking**: Weather API responses should be mocked in tests for consistency\n\n## Troubleshooting Guide\n\n### Authentication Issues\n```bash\n# Primary diagnostic tool\nnode auth-health-check.js                    # Comprehensive auth system check\n\n# Specific auth problems\ndocker compose logs fowldata | grep -i auth  # Backend auth errors\ndocker compose logs fowldata | grep -i jwt   # JWT token issues\ndocker compose exec fowldata python manage.py shell  # Manual user inspection\n\n# Common auth fixes\n# 1. Verify AUTH_SECRET matches in both .env files\n# 2. Check BACKEND_URL uses fowldata:8000 (not localhost)\n# 3. Clear browser cookies and retry\n# 4. Restart both containers: docker compose restart fowldata frontend\n```\n\n### Database & Migration Issues  \n```bash\n# Database diagnostic\ndocker compose exec fowldata python manage.py check\ndocker compose exec fowldata python manage.py dbshell\ndocker compose exec postgres psql -U postgres -d fowldata\n\n# Reset database (development only)\ndocker compose down -v                       # Destroy volumes\ndocker compose up -d                         # Recreate services\ndocker compose exec fowldata python manage.py migrate\n\n# Migration problems\ndocker compose exec fowldata python manage.py showmigrations  # Show status\ndocker compose exec fowldata python manage.py migrate --fake  # Mark as applied\n```\n\n### Frontend Build & Runtime Issues\n```bash\n# Build diagnostics\ncd frontend\nnpm run build                                # Check for build errors\nnpm run lint                                # TypeScript/ESLint issues\nrm -rf .next node_modules && npm install    # Clean reinstall\n\n# Runtime debugging\nnpm run dev                                  # Development server logs\ndocker compose logs frontend                # Container logs\n```\n\n### E2E Test Failures\n```bash\n# E2E test diagnostics\n./scripts/verify-e2e-setup.sh              # Check prerequisites\nnpm run test:e2e -- --headed               # Visual debugging  \nnpm run test:e2e -- --debug                # Step-by-step debugging\n\n# Common E2E fixes\n# 1. Ensure test user exists: mark@mail.com / 1@Tsgstp\n# 2. Check services are running: docker compose ps\n# 3. Verify ports: curl http://localhost:3000 && curl http://localhost:8000/api/\n# 4. Clear browser state: rm -rf test-results/\n```\n\n### Performance & Resource Issues\n```bash\n# System resource monitoring\ndocker stats                               # Container resource usage\ndocker system df                          # Disk space usage\ndocker system prune -f                    # Clean unused resources\n\n# Database performance\ndocker compose exec fowldata python manage.py dbshell\n# Then: EXPLAIN ANALYZE SELECT * FROM hunts_hunt WHERE location IS NOT NULL;\n\n# Memory issues\ndocker compose down && docker compose up -d  # Restart all services\n```\n\n### Production Deployment Issues\n```bash\n# Production diagnostics\n./scripts/validate-production.sh           # Pre-deployment validation\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production config  # Validate config\n\n# SSL/TLS issues  \nopenssl x509 -in ssl/fullchain.pem -text -noout  # Check certificate\nsudo certbot renew --dry-run               # Test renewal process\n\n# Environment variable issues\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata env | grep DB_\n```\n\n### Emergency Recovery\n```bash\n# Quick service restart\ndocker compose restart fowldata frontend postgres\n\n# Full environment reset (DESTRUCTIVE - development only)\ndocker compose down -v\ndocker system prune -f  \ngit checkout -- .env.local frontend/.env.local\ndocker compose up -d\n\n# Rollback production deployment\ngit checkout previous-working-commit\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d --force-recreate\n```"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":328,"cache_read_input_tokens":80392,"cache_creation":{"ephemeral_5m_input_tokens":328,"ephemeral_1h_input_tokens":0},"output_tokens":24,"service_tier":"standard"}},"requestId":"req_011CSTpNzxxXH5KzVfyqEWD4","type":"assistant","uuid":"473fa326-8797-419f-8d3b-d449832156cf","timestamp":"2025-08-25T04:44:39.685Z"}
{"parentUuid":"473fa326-8797-419f-8d3b-d449832156cf","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01HsYP1j7jUaa2rfD2p3fABC","type":"tool_result","content":"The file /Users/markelmore/_code/fowldata/CLAUDE.md has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   368→- Standard controls must be children of `<Map>` component\n   369→- Custom controls positioned absolutely outside `<Map>`\n   370→- Test controls in both browser and fullscreen modes\n   371→\n   372→## Development Workflow\n   373→\n   374→### Branch Strategy & Process\n   375→```bash\n   376→# Create feature branch\n   377→git checkout -b feature/descriptive-name\n   378→git push -u origin feature/descriptive-name\n   379→\n   380→# Development cycle\n   381→# 1. Make changes\n   382→# 2. Test locally: ./testlint-quick\n   383→# 3. Commit: git commit -m \"feat: description\"  \n   384→# 4. Before PR: ./testlint\n   385→# 5. Create PR: gh pr create --title \"Title\" --body \"Description\"\n   386→\n   387→# Commit Message Format\n   388→feat: Add hunt sharing functionality\n   389→fix: Resolve photo upload timeout issue  \n   390→docs: Update API documentation\n   391→test: Add weather API integration tests\n   392→refactor: Simplify authentication middleware\n   393→```\n   394→\n   395→### Development Best Practices\n   396→- **Container Rebuilds**: Rebuild Docker containers after backend changes to see frontend updates\n   397→- **Test Credentials**: Use `mark@mail.com` / `1@Tsgstp` for E2E tests\n   398→- **Pre-commit**: Always run `./testlint-quick` before commits\n   399→- **Pre-PR**: Always run `./testlint` before creating pull requests  \n   400→- **API Mocking**: Weather API responses should be mocked in tests for consistency\n   401→\n   402→## Troubleshooting Guide\n   403→\n   404→### Authentication Issues\n   405→```bash\n   406→# Primary diagnostic tool\n   407→node auth-health-check.js                    # Comprehensive auth system check\n   408→\n   409→# Specific auth problems\n   410→docker compose logs fowldata | grep -i auth  # Backend auth errors\n   411→docker compose logs fowldata | grep -i jwt   # JWT token issues\n   412→docker compose exec fowldata python manage.py shell  # Manual user inspection\n   413→\n   414→# Common auth fixes\n   415→# 1. Verify AUTH_SECRET matches in both .env files\n   416→# 2. Check BACKEND_URL uses fowldata:8000 (not localhost)\n   417→# 3. Clear browser cookies and retry\n   418→# 4. Restart both containers: docker compose restart fowldata frontend\n   419→```\n   420→\n   421→### Database & Migration Issues  \n   422→```bash\n   423→# Database diagnostic\n   424→docker compose exec fowldata python manage.py check\n   425→docker compose exec fowldata python manage.py dbshell\n   426→docker compose exec postgres psql -U postgres -d fowldata\n   427→\n   428→# Reset database (development only)\n   429→docker compose down -v                       # Destroy volumes\n   430→docker compose up -d                         # Recreate services\n   431→docker compose exec fowldata python manage.py migrate\n   432→\n   433→# Migration problems\n   434→docker compose exec fowldata python manage.py showmigrations  # Show status\n   435→docker compose exec fowldata python manage.py migrate --fake  # Mark as applied\n   436→```\n   437→\n   438→### Frontend Build & Runtime Issues\n   439→```bash\n   440→# Build diagnostics\n   441→cd frontend\n   442→npm run build                                # Check for build errors\n   443→npm run lint                                # TypeScript/ESLint issues\n   444→rm -rf .next node_modules && npm install    # Clean reinstall\n   445→\n   446→# Runtime debugging\n   447→npm run dev                                  # Development server logs\n   448→docker compose logs frontend                # Container logs\n   449→```\n   450→\n   451→### E2E Test Failures\n   452→```bash\n   453→# E2E test diagnostics\n   454→./scripts/verify-e2e-setup.sh              # Check prerequisites\n   455→npm run test:e2e -- --headed               # Visual debugging  \n   456→npm run test:e2e -- --debug                # Step-by-step debugging\n   457→\n   458→# Common E2E fixes\n   459→# 1. Ensure test user exists: mark@mail.com / 1@Tsgstp\n   460→# 2. Check services are running: docker compose ps\n   461→# 3. Verify ports: curl http://localhost:3000 && curl http://localhost:8000/api/\n   462→# 4. Clear browser state: rm -rf test-results/\n   463→```\n   464→\n   465→### Performance & Resource Issues\n   466→```bash\n   467→# System resource monitoring\n   468→docker stats                               # Container resource usage\n   469→docker system df                          # Disk space usage\n   470→docker system prune -f                    # Clean unused resources\n   471→\n   472→# Database performance\n   473→docker compose exec fowldata python manage.py dbshell\n   474→# Then: EXPLAIN ANALYZE SELECT * FROM hunts_hunt WHERE location IS NOT NULL;\n   475→\n   476→# Memory issues\n   477→docker compose down && docker compose up -d  # Restart all services\n   478→```\n   479→\n   480→### Production Deployment Issues\n   481→```bash\n   482→# Production diagnostics\n   483→./scripts/validate-production.sh           # Pre-deployment validation\n   484→docker-compose -f docker-compose.prod.yaml --env-file .env.production config  # Validate config\n   485→\n   486→# SSL/TLS issues  \n   487→openssl x509 -in ssl/fullchain.pem -text -noout  # Check certificate\n   488→sudo certbot renew --dry-run               # Test renewal process\n   489→\n   490→# Environment variable issues\n   491→docker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata env | grep DB_\n   492→```\n   493→\n   494→### Emergency Recovery\n   495→```bash\n   496→# Quick service restart\n   497→docker compose restart fowldata frontend postgres\n   498→\n   499→# Full environment reset (DESTRUCTIVE - development only)\n   500→docker compose down -v\n   501→docker system prune -f  \n   502→git checkout -- .env.local frontend/.env.local\n   503→docker compose up -d\n   504→\n   505→# Rollback production deployment\n   506→git checkout previous-working-commit\n   507→docker-compose -f docker-compose.prod.yaml --env-file .env.production up -d --force-recreate\n   508→```"}]},"uuid":"856da75a-8f31-4cd4-b903-ecb164466c81","timestamp":"2025-08-25T04:44:39.764Z","toolUseResult":{"filePath":"/Users/markelmore/_code/fowldata/CLAUDE.md","oldString":"## Development Notes\n\n- Rebuild Docker containers after backend changes to see frontend updates\n- Use test credentials: `mark@mail.com` / `1@Tsgstp` for Puppeteer E2E tests\n- Run `./testlint-quick` before commits, `./testlint` before PRs\n- Weather API responses should be mocked in tests for consistency\n- if authentication issue arises we can run  Run the health check script:\n  node auth-health-check.js","newString":"## Development Workflow\n\n### Branch Strategy & Process\n```bash\n# Create feature branch\ngit checkout -b feature/descriptive-name\ngit push -u origin feature/descriptive-name\n\n# Development cycle\n# 1. Make changes\n# 2. Test locally: ./testlint-quick\n# 3. Commit: git commit -m \"feat: description\"  \n# 4. Before PR: ./testlint\n# 5. Create PR: gh pr create --title \"Title\" --body \"Description\"\n\n# Commit Message Format\nfeat: Add hunt sharing functionality\nfix: Resolve photo upload timeout issue  \ndocs: Update API documentation\ntest: Add weather API integration tests\nrefactor: Simplify authentication middleware\n```\n\n### Development Best Practices\n- **Container Rebuilds**: Rebuild Docker containers after backend changes to see frontend updates\n- **Test Credentials**: Use `mark@mail.com` / `1@Tsgstp` for E2E tests\n- **Pre-commit**: Always run `./testlint-quick` before commits\n- **Pre-PR**: Always run `./testlint` before creating pull requests  \n- **API Mocking**: Weather API responses should be mocked in tests for consistency\n\n## Troubleshooting Guide\n\n### Authentication Issues\n```bash\n# Primary diagnostic tool\nnode auth-health-check.js                    # Comprehensive auth system check\n\n# Specific auth problems\ndocker compose logs fowldata | grep -i auth  # Backend auth errors\ndocker compose logs fowldata | grep -i jwt   # JWT token issues\ndocker compose exec fowldata python manage.py shell  # Manual user inspection\n\n# Common auth fixes\n# 1. Verify AUTH_SECRET matches in both .env files\n# 2. Check BACKEND_URL uses fowldata:8000 (not localhost)\n# 3. Clear browser cookies and retry\n# 4. Restart both containers: docker compose restart fowldata frontend\n```\n\n### Database & Migration Issues  \n```bash\n# Database diagnostic\ndocker compose exec fowldata python manage.py check\ndocker compose exec fowldata python manage.py dbshell\ndocker compose exec postgres psql -U postgres -d fowldata\n\n# Reset database (development only)\ndocker compose down -v                       # Destroy volumes\ndocker compose up -d                         # Recreate services\ndocker compose exec fowldata python manage.py migrate\n\n# Migration problems\ndocker compose exec fowldata python manage.py showmigrations  # Show status\ndocker compose exec fowldata python manage.py migrate --fake  # Mark as applied\n```\n\n### Frontend Build & Runtime Issues\n```bash\n# Build diagnostics\ncd frontend\nnpm run build                                # Check for build errors\nnpm run lint                                # TypeScript/ESLint issues\nrm -rf .next node_modules && npm install    # Clean reinstall\n\n# Runtime debugging\nnpm run dev                                  # Development server logs\ndocker compose logs frontend                # Container logs\n```\n\n### E2E Test Failures\n```bash\n# E2E test diagnostics\n./scripts/verify-e2e-setup.sh              # Check prerequisites\nnpm run test:e2e -- --headed               # Visual debugging  \nnpm run test:e2e -- --debug                # Step-by-step debugging\n\n# Common E2E fixes\n# 1. Ensure test user exists: mark@mail.com / 1@Tsgstp\n# 2. Check services are running: docker compose ps\n# 3. Verify ports: curl http://localhost:3000 && curl http://localhost:8000/api/\n# 4. Clear browser state: rm -rf test-results/\n```\n\n### Performance & Resource Issues\n```bash\n# System resource monitoring\ndocker stats                               # Container resource usage\ndocker system df                          # Disk space usage\ndocker system prune -f                    # Clean unused resources\n\n# Database performance\ndocker compose exec fowldata python manage.py dbshell\n# Then: EXPLAIN ANALYZE SELECT * FROM hunts_hunt WHERE location IS NOT NULL;\n\n# Memory issues\ndocker compose down && docker compose up -d  # Restart all services\n```\n\n### Production Deployment Issues\n```bash\n# Production diagnostics\n./scripts/validate-production.sh           # Pre-deployment validation\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production config  # Validate config\n\n# SSL/TLS issues  \nopenssl x509 -in ssl/fullchain.pem -text -noout  # Check certificate\nsudo certbot renew --dry-run               # Test renewal process\n\n# Environment variable issues\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata env | grep DB_\n```\n\n### Emergency Recovery\n```bash\n# Quick service restart\ndocker compose restart fowldata frontend postgres\n\n# Full environment reset (DESTRUCTIVE - development only)\ndocker compose down -v\ndocker system prune -f  \ngit checkout -- .env.local frontend/.env.local\ndocker compose up -d\n\n# Rollback production deployment\ngit checkout previous-working-commit\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d --force-recreate\n```","originalFile":"# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## 🎯 Quick Reference\n\n### Critical Commands\n```bash\n# Essential Development\ndocker compose up -d && cd frontend && npm run dev  # Start full stack\n./testlint-quick           # Quick validation before commits\n./testlint                 # Full validation before PRs\n\n# Production Deployment\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# Emergency Troubleshooting\nnode auth-health-check.js  # Authentication issues\n./scripts/verify-e2e-setup.sh  # E2E test setup validation\n```\n\n### Key API Endpoints\n```bash\nGET /api/hunts/            # List user hunts\nPOST /api/hunts/           # Create hunt\nGET /api/users/me/         # Current user info  \nPOST /api/auth/sync/       # User synchronization\nGET /api/health/           # Backend health check\n```\n\n## ⚠️ CRITICAL: Docker Network Configuration - NEVER CHANGE\n**RECURRING ISSUE - ALWAYS CHECK THIS FIRST**\n\nThe frontend `.env.local` file MUST use the Docker service name for backend communication:\n```bash\n# CORRECT - Use Docker service name (this is in frontend/.env.local)\nBACKEND_URL=http://fowldata:8000\n\n# WRONG - Will cause ECONNREFUSED errors in Docker containers\nBACKEND_URL=http://localhost:8000\n```\n\n**Why**: Inside Docker containers, `localhost` refers to the container itself, not the host. Service names resolve to container IPs within the Docker network.\n\n**Symptoms**: NextAuth authentication fails, API calls fail with \"connect ECONNREFUSED ::1:8000\"\n\n**Fix**: Always use `fowldata:8000` (service name from docker-compose.yml) for inter-container communication.\n\n## ⚠️ CRITICAL: Mapbox GL JS v3+ with react-map-gl v8 Layer Rendering\n**RECURRING ISSUE - ESSENTIAL FOR LAYER VISIBILITY**\n\nWhen using Mapbox GL JS v3+ with react-map-gl v8, layers will NOT render without explicit `mapboxgl.accessToken` configuration:\n\n```typescript\nimport mapboxgl from 'mapbox-gl';\n\nconst MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;\n\n// CRITICAL: This is required for Mapbox GL JS v3+ with react-map-gl v8\nif (MAPBOX_TOKEN) {\n  mapboxgl.accessToken = MAPBOX_TOKEN;\n}\n```\n\n**Why**: react-map-gl v8 delegates to Mapbox GL JS v3+ which requires explicit token configuration. Previous versions handled this automatically.\n\n**Symptoms**: \n- Map loads successfully with satellite/custom styles\n- Source/Layer components appear to be configured correctly  \n- Debug panels show data is present\n- NO visual layers render (not even test layers with bright colors)\n- No console errors about authentication or tokens\n- Canvas element exists but shows no content\n\n**Additional react-map-gl v8 Requirements:**\n- Layer components must be **immediate children** of Source components (no React fragments `<>...</>`)\n- Do NOT add explicit `source` props to Layer components inside Source components\n- Remove conditional `mapStyleLoaded` wrappers - let react-map-gl handle timing internally\n\n**Fix Location**: Add the `mapboxgl.accessToken` configuration at the top level of your Map component file, after importing mapboxgl.\n\n**Debugging Signs This is the Issue**:\n- Mapbox canvas renders with proper classes (`mapboxgl-canvas-container`)\n- Map style loads successfully\n- Data processing works correctly\n- Visibility and layer management appears functional\n- Zero visual layer rendering despite all other systems working\n\n## ⚠️ CRITICAL: Production Environment Variable Loading\n**RECURRING DEPLOYMENT ISSUE - ESSENTIAL FOR PRODUCTION**\n\nDocker Compose production deployments REQUIRE explicit `--env-file` flag:\n\n```bash\n# REQUIRED for all production commands\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# WRONG - Will cause \"variable is not set\" warnings and startup failures\ndocker-compose -f docker-compose.prod.yaml up -d\n```\n\n**Why**: The `env_file:` setting in docker-compose.prod.yaml handles container environment variables, but Docker Compose variable substitution (${VARIABLE}) requires the explicit `--env-file` flag.\n\n**Symptoms**: \n- `WARN[0000] The \"DB_NAME\" variable is not set. Defaulting to a blank string.`\n- PostgreSQL container fails with \"superuser password not specified\"\n- Environment variables visible in some services but not others\n\n**Additional Production Requirements**:\n- All services need `env_file: - .env.production` in docker-compose.prod.yaml\n- Avoid special characters in passwords (`$`, `!`, etc.) - shell interprets them\n- Use clean file encoding (UTF-8 without BOM) for environment files\n\n## Architecture Overview\n\nFowlData is a production-ready full-stack waterfowl hunting tracking application:\n\n**Backend (Django)**: Located in `fowldata/` directory\n- Django 4.2 with Django REST Framework for API endpoints\n- PostgreSQL 16 with PostGIS 3.4 for geospatial data storage and spatial queries\n- JWT RS256 authentication integrated with NextAuth.js frontend\n- Two main apps: `accounts` (user management) and `hunts` (hunt tracking)\n- AWS S3 integration for photo storage with presigned URLs and CORS\n- Gunicorn WSGI server with production performance tuning\n\n**Frontend (Next.js)**: Located in `frontend/` directory  \n- Next.js 15.4.4 with React 19 and TypeScript\n- NextAuth.js v5 with Google OAuth and credentials authentication\n- Mapbox GL JS v3+ with react-map-gl v8 for interactive mapping\n- TailwindCSS for styling, React Hook Form for forms\n- Playwright for E2E testing, Jest for unit tests\n- Production-optimized standalone builds\n\n**Production Infrastructure**:\n- **Deployment**: Digital Ocean Droplets with Docker Compose orchestration\n- **Reverse Proxy**: Nginx with SSL/TLS termination via Let's Encrypt\n- **Caching**: Redis for sessions, query caching, and performance optimization\n- **Storage**: AWS S3 with CloudFront CDN for photo uploads and static assets\n- **Database**: PostgreSQL with PostGIS extensions, performance tuning, and automated backups\n- **Monitoring**: Docker health checks, database performance monitoring, and logging\n- **Security**: SSL enforcement, security headers, rate limiting, and firewall configuration\n\n## Development Commands\n\n### Backend Development\n```bash\n# Start services\ndocker compose up -d\n\n# Django management commands\ndocker compose exec fowldata python manage.py migrate\ndocker compose exec fowldata python manage.py createsuperuser\ndocker compose exec fowldata python manage.py shell\n\n# Run backend tests\ndocker compose exec fowldata python -m pytest\ndocker compose exec fowldata python -m pytest accounts/tests/ hunts/tests/ -v\n\n# Code formatting and linting\ndocker compose exec fowldata black .\ndocker compose exec fowldata flake8\n\n# Single test file\ndocker compose exec fowldata python -m pytest hunts/tests/test_weather_api.py -v\n```\n\n### Frontend Development\n```bash\ncd frontend\n\n# Development server (with Turbopack)\nnpm run dev\n\n# Build and type checking\nnpm run build\nnpm run lint\n\n# Testing\nnpm run test                    # Jest unit tests\nnpm run test:watch             # Jest in watch mode  \nnpm run test:e2e               # Playwright E2E tests\nnpm run test:e2e:ui            # Playwright with UI\n```\n\n### Testing & Validation\n\n#### Pre-Commit Validation\n```bash\n# Quick validation (run before commits)\n./testlint-quick               # Essential tests only (2-3 minutes)\n\n# Full validation (run before PRs)  \n./testlint                     # Complete validation with E2E tests (10-15 minutes)\n```\n\n#### Comprehensive Testing Commands\n```bash\n# Backend Testing\ndocker compose exec fowldata python -m pytest                    # All backend tests\ndocker compose exec fowldata python -m pytest -m \"not performance\"  # Skip slow tests\ndocker compose exec fowldata python -m pytest --cov=fowldata     # With coverage\ndocker compose exec fowldata python -m pytest -s --pdb          # Debug mode\n\n# Frontend Testing\ncd frontend\nnpm run test                           # Jest unit tests\nnpm run test -- --watchAll=false      # CI mode (run once)  \nnpm run test:e2e                      # Playwright E2E tests\nnpm run test:e2e -- --project chromium  # Specific browser\nnpm run test:e2e -- --debug           # Debug E2E tests\n\n# Specific Test Categories\ndocker compose exec fowldata python -m pytest -m \"auth\"      # Authentication tests\ndocker compose exec fowldata python -m pytest -m \"api\"       # API endpoint tests\nnpm test -- --testNamePattern=\"authentication\"               # Frontend auth tests\n```\n\n#### Test Debugging\n```bash\n# Backend Debug\ndocker compose exec fowldata python -m pytest -s --pdb hunts/tests/test_weather_api.py::test_function\ndocker compose exec fowldata python manage.py shell\n\n# Frontend Debug\nnpm run test:e2e -- --headed          # Show browser\nnpm run test:e2e -- --ui               # Playwright UI mode\nnpm test -- --no-coverage --verbose   # Detailed Jest output\n\n# E2E Test Environment Validation\n./scripts/verify-e2e-setup.sh         # Check E2E prerequisites\n```\n\n### Production Deployment\n```bash\n# Production validation and deployment\n./scripts/validate-production.sh\n\n# Production commands (ALWAYS use --env-file flag)\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production build\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production logs -f\n\n# Django production setup\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py migrate\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py createsuperuser\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py collectstatic --noinput\n```\n\n## Core Data Models\n\n**Hunt Model** (`hunts/models.py`):\n- Tracks hunting sessions with date, location (PostGIS Point), weather conditions\n- Links to multiple Bird harvests and HuntPhoto uploads\n- Weather data automatically fetched from external API based on coordinates\n\n**Bird Model**:\n- Individual waterfowl harvests within a hunt\n- Species selection from predefined WATERFOWL_CHOICES (Dabblers, Divers, Geese)\n- Includes harvest time, notes, and gender (Drake/Hen)\n\n**Authentication Integration**:\n- Django backend uses custom NextAuthBackend for JWT token validation\n- Frontend NextAuth.js providers: Google, Facebook, Credentials\n- Token synchronization between NextAuth and Django API client\n\n## Key Integration Points\n\n**Django-NextAuth Authentication Flow**:\n- NextAuth JWT tokens validated by Django via `accounts/nextauth_backend.py`  \n- API requests include NextAuth JWT in Authorization header\n- User creation/sync handled by Django signals in `accounts/signals.py`\n\n**Photo Upload System**:\n- S3 presigned URLs generated by Django `hunts/s3_manager.py`\n- Frontend uploads directly to S3, then registers with Django\n- HuntPhoto model tracks S3 URLs linked to Hunt instances\n\n**Geospatial Features**:\n- Hunt locations stored as PostGIS Points with lat/lng coordinates\n- Weather API integration fetches conditions based on hunt coordinates\n- Mapbox integration for location selection and visualization\n\n## Environment Configuration\n\n### Critical Environment Variables (MUST MATCH)\n**These variables must be identical in both backend and frontend:**\n```bash\n# Authentication (CRITICAL - must match exactly)\nAUTH_SECRET=your-nextauth-secret-key        # Both .env.local AND frontend/.env.local\n\n# Docker Network (CRITICAL - use service names)  \nBACKEND_URL=http://fowldata:8000            # frontend/.env.local ONLY\n```\n\n### Required Environment Files\n```bash\n# Development\n.env.local                  # Backend: Django database, secrets, S3 credentials  \nfrontend/.env.local         # Frontend: NextAuth secrets, API URLs\n\n# Production  \n.env.production            # Backend: Production settings\nfrontend/.env.production   # Frontend: Production URLs and secrets\n```\n\n### Essential Variables by Service\n```bash\n# Database (Backend .env.local)\nDB_HOST=localhost           # Development: localhost, Production: postgres\nDB_NAME=fowldata           # Database name\nDB_USER=postgres           # Database username\nDB_PASS=your_password      # No special characters in production\n\n# Authentication (Both files)\nAUTH_SECRET=your-secret    # Generate: openssl rand -base64 32\nSECRET_KEY=django-secret   # Django only\n\n# Mapbox (Frontend .env.local)\nNEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your-token  # REQUIRED for layer rendering\n\n# AWS S3 (Backend .env.local)\nAWS_ACCESS_KEY_ID=your-key\nAWS_SECRET_ACCESS_KEY=your-secret  \nAWS_S3_BUCKET_NAME=bucket-name\n\n# OAuth (Frontend .env.local)\nGOOGLE_CLIENT_ID=your-google-id\nGOOGLE_CLIENT_SECRET=your-google-secret\n```\n\n### Security & Performance Best Practices\n```bash\n# Production Security Checklist\n- Use strong AUTH_SECRET (32+ characters): openssl rand -base64 32\n- Avoid special characters in passwords (no $, !, etc.) - shell interprets them\n- Always use HTTPS for OAuth callbacks in production\n- Set proper CORS origins: CORS_ALLOWED_ORIGINS=https://yourdomain.com\n\n# Performance Optimization  \n- Use Redis for caching: REDIS_HOST=redis, REDIS_PASSWORD=your-password\n- Enable SSL redirect: SECURE_SSL_REDIRECT=True (production)\n- Configure proper headers: SECURE_HSTS_SECONDS=31536000\n\n# Environment File Best Practices\n- Use UTF-8 encoding without BOM\n- No spaces around = signs: VAR=value (not VAR = value)\n- Always backup production environment files\n```\n\n## Testing Patterns\n\n**Backend Tests** (pytest-django):\n- Database tests marked with `@pytest.mark.django_db`\n- API endpoint tests use Django's APIClient  \n- External services (S3, weather API) are mocked\n- Fixtures in `conftest.py` create test users and hunt data\n\n**Frontend Tests**:\n- Unit tests: Jest + React Testing Library in `src/__tests__/`\n- Component tests focus on user interactions, not implementation\n- E2E tests: Playwright in `e2e/` directory with real browser automation\n- API mocking for isolated component testing\n\n## Mapbox Configuration\n\n- Import controls from `react-map-gl/mapbox` for Mapbox GL JS v3.5+\n- Control positioning critical - use `position` prop, not `style` object\n- Standard controls must be children of `<Map>` component\n- Custom controls positioned absolutely outside `<Map>`\n- Test controls in both browser and fullscreen modes\n\n## Development Notes\n\n- Rebuild Docker containers after backend changes to see frontend updates\n- Use test credentials: `mark@mail.com` / `1@Tsgstp` for Puppeteer E2E tests\n- Run `./testlint-quick` before commits, `./testlint` before PRs\n- Weather API responses should be mocked in tests for consistency\n- if authentication issue arises we can run  Run the health check script:\n  node auth-health-check.js","structuredPatch":[{"oldStart":369,"oldLines":11,"newStart":369,"newLines":140,"lines":[" - Custom controls positioned absolutely outside `<Map>`"," - Test controls in both browser and fullscreen modes"," ","-## Development Notes","+## Development Workflow"," ","-- Rebuild Docker containers after backend changes to see frontend updates","-- Use test credentials: `mark@mail.com` / `1@Tsgstp` for Puppeteer E2E tests","-- Run `./testlint-quick` before commits, `./testlint` before PRs","-- Weather API responses should be mocked in tests for consistency","-- if authentication issue arises we can run  Run the health check script:","-  node auth-health-check.js","\\ No newline at end of file","+### Branch Strategy & Process","+```bash","+# Create feature branch","+git checkout -b feature/descriptive-name","+git push -u origin feature/descriptive-name","+","+# Development cycle","+# 1. Make changes","+# 2. Test locally: ./testlint-quick","+# 3. Commit: git commit -m \"feat: description\"  ","+# 4. Before PR: ./testlint","+# 5. Create PR: gh pr create --title \"Title\" --body \"Description\"","+","+# Commit Message Format","+feat: Add hunt sharing functionality","+fix: Resolve photo upload timeout issue  ","+docs: Update API documentation","+test: Add weather API integration tests","+refactor: Simplify authentication middleware","+```","+","+### Development Best Practices","+- **Container Rebuilds**: Rebuild Docker containers after backend changes to see frontend updates","+- **Test Credentials**: Use `mark@mail.com` / `1@Tsgstp` for E2E tests","+- **Pre-commit**: Always run `./testlint-quick` before commits","+- **Pre-PR**: Always run `./testlint` before creating pull requests  ","+- **API Mocking**: Weather API responses should be mocked in tests for consistency","+","+## Troubleshooting Guide","+","+### Authentication Issues","+```bash","+# Primary diagnostic tool","+node auth-health-check.js                    # Comprehensive auth system check","+","+# Specific auth problems","+docker compose logs fowldata | grep -i auth  # Backend auth errors","+docker compose logs fowldata | grep -i jwt   # JWT token issues","+docker compose exec fowldata python manage.py shell  # Manual user inspection","+","+# Common auth fixes","+# 1. Verify AUTH_SECRET matches in both .env files","+# 2. Check BACKEND_URL uses fowldata:8000 (not localhost)","+# 3. Clear browser cookies and retry","+# 4. Restart both containers: docker compose restart fowldata frontend","+```","+","+### Database & Migration Issues  ","+```bash","+# Database diagnostic","+docker compose exec fowldata python manage.py check","+docker compose exec fowldata python manage.py dbshell","+docker compose exec postgres psql -U postgres -d fowldata","+","+# Reset database (development only)","+docker compose down -v                       # Destroy volumes","+docker compose up -d                         # Recreate services","+docker compose exec fowldata python manage.py migrate","+","+# Migration problems","+docker compose exec fowldata python manage.py showmigrations  # Show status","+docker compose exec fowldata python manage.py migrate --fake  # Mark as applied","+```","+","+### Frontend Build & Runtime Issues","+```bash","+# Build diagnostics","+cd frontend","+npm run build                                # Check for build errors","+npm run lint                                # TypeScript/ESLint issues","+rm -rf .next node_modules && npm install    # Clean reinstall","+","+# Runtime debugging","+npm run dev                                  # Development server logs","+docker compose logs frontend                # Container logs","+```","+","+### E2E Test Failures","+```bash","+# E2E test diagnostics","+./scripts/verify-e2e-setup.sh              # Check prerequisites","+npm run test:e2e -- --headed               # Visual debugging  ","+npm run test:e2e -- --debug                # Step-by-step debugging","+","+# Common E2E fixes","+# 1. Ensure test user exists: mark@mail.com / 1@Tsgstp","+# 2. Check services are running: docker compose ps","+# 3. Verify ports: curl http://localhost:3000 && curl http://localhost:8000/api/","+# 4. Clear browser state: rm -rf test-results/","+```","+","+### Performance & Resource Issues","+```bash","+# System resource monitoring","+docker stats                               # Container resource usage","+docker system df                          # Disk space usage","+docker system prune -f                    # Clean unused resources","+","+# Database performance","+docker compose exec fowldata python manage.py dbshell","+# Then: EXPLAIN ANALYZE SELECT * FROM hunts_hunt WHERE location IS NOT NULL;","+","+# Memory issues","+docker compose down && docker compose up -d  # Restart all services","+```","+","+### Production Deployment Issues","+```bash","+# Production diagnostics","+./scripts/validate-production.sh           # Pre-deployment validation","+docker-compose -f docker-compose.prod.yaml --env-file .env.production config  # Validate config","+","+# SSL/TLS issues  ","+openssl x509 -in ssl/fullchain.pem -text -noout  # Check certificate","+sudo certbot renew --dry-run               # Test renewal process","+","+# Environment variable issues","+docker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata env | grep DB_","+```","+","+### Emergency Recovery","+```bash","+# Quick service restart","+docker compose restart fowldata frontend postgres","+","+# Full environment reset (DESTRUCTIVE - development only)","+docker compose down -v","+docker system prune -f  ","+git checkout -- .env.local frontend/.env.local","+docker compose up -d","+","+# Rollback production deployment","+git checkout previous-working-commit","+docker-compose -f docker-compose.prod.yaml --env-file .env.production up -d --force-recreate","+```","\\ No newline at end of file"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"856da75a-8f31-4cd4-b903-ecb164466c81","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_017P1jwg59S4eD3qyVkSpj8c","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_0158JWhsUwvUSyqnnCa6GHuY","name":"TodoWrite","input":{"todos":[{"content":"Analyze current CLAUDE.md structure and identify integration points","status":"completed","activeForm":"Analyzing current CLAUDE.md structure and identifying integration points"},{"content":"Enhance testing section with comprehensive commands","status":"completed","activeForm":"Enhancing testing section with comprehensive commands"},{"content":"Add security and performance best practices","status":"completed","activeForm":"Adding security and performance best practices"},{"content":"Expand troubleshooting section with consolidated patterns","status":"completed","activeForm":"Expanding troubleshooting section with consolidated patterns"},{"content":"Add development workflow improvements","status":"completed","activeForm":"Adding development workflow improvements"},{"content":"Include API reference and environment variables priority","status":"in_progress","activeForm":"Including API reference and environment variables priority"},{"content":"Review for redundancy and conflicts","status":"pending","activeForm":"Reviewing for redundancy and conflicts"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":3144,"cache_read_input_tokens":80720,"cache_creation":{"ephemeral_5m_input_tokens":3144,"ephemeral_1h_input_tokens":0},"output_tokens":286,"service_tier":"standard"}},"requestId":"req_011CSTpR5HihH25NGpayan7P","type":"assistant","uuid":"21df1cda-868b-4898-b015-7bf7a0506921","timestamp":"2025-08-25T04:44:44.752Z"}
{"parentUuid":"21df1cda-868b-4898-b015-7bf7a0506921","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_0158JWhsUwvUSyqnnCa6GHuY","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"df58dde9-64b7-4aa1-820f-47837a699b2b","timestamp":"2025-08-25T04:44:44.878Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Analyze current CLAUDE.md structure and identify integration points","status":"completed","activeForm":"Analyzing current CLAUDE.md structure and identifying integration points"},{"content":"Enhance testing section with comprehensive commands","status":"completed","activeForm":"Enhancing testing section with comprehensive commands"},{"content":"Add security and performance best practices","status":"completed","activeForm":"Adding security and performance best practices"},{"content":"Expand troubleshooting section with consolidated patterns","status":"completed","activeForm":"Expanding troubleshooting section with consolidated patterns"},{"content":"Add development workflow improvements","status":"completed","activeForm":"Adding development workflow improvements"},{"content":"Include API reference and environment variables priority","status":"in_progress","activeForm":"Including API reference and environment variables priority"},{"content":"Review for redundancy and conflicts","status":"pending","activeForm":"Reviewing for redundancy and conflicts"}]}}
{"parentUuid":"df58dde9-64b7-4aa1-820f-47837a699b2b","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01Ved8nsdPBT7JvMUy14Jp1a","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now I need to remove some redundant sections and add database/monitoring commands. Let me clean up the redundant frontend commands section and add the missing pieces:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":328,"cache_read_input_tokens":83864,"cache_creation":{"ephemeral_5m_input_tokens":328,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTpRSyT4JUUW453zB72B","type":"assistant","uuid":"eb25e6f1-cefc-4b08-a408-57495b1fa3ed","timestamp":"2025-08-25T04:44:48.997Z"}
{"parentUuid":"eb25e6f1-cefc-4b08-a408-57495b1fa3ed","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01Ved8nsdPBT7JvMUy14Jp1a","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_017CgkHWHZ1P4wHAKhM9HWKw","name":"Edit","input":{"file_path":"/Users/markelmore/_code/fowldata/CLAUDE.md","old_string":"### Frontend Development\n```bash\ncd frontend\n\n# Development server (with Turbopack)\nnpm run dev\n\n# Build and type checking\nnpm run build\nnpm run lint\n\n# Testing\nnpm run test                    # Jest unit tests\nnpm run test:watch             # Jest in watch mode  \nnpm run test:e2e               # Playwright E2E tests\nnpm run test:e2e:ui            # Playwright with UI\n```","new_string":"### Frontend Development\n```bash\ncd frontend\n\n# Development server (with Turbopack)\nnpm run dev\n\n# Build and type checking\nnpm run build\nnpm run lint\nnpx tsc --noEmit                # TypeScript checking without emit\n```"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":328,"cache_read_input_tokens":83864,"cache_creation":{"ephemeral_5m_input_tokens":328,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTpRSyT4JUUW453zB72B","type":"assistant","uuid":"0267e9e7-5842-4947-b0d5-f313d8a5971f","timestamp":"2025-08-25T04:44:52.219Z"}
{"parentUuid":"0267e9e7-5842-4947-b0d5-f313d8a5971f","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_017CgkHWHZ1P4wHAKhM9HWKw","type":"tool_result","content":"The file /Users/markelmore/_code/fowldata/CLAUDE.md has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   163→# Single test file\n   164→docker compose exec fowldata python -m pytest hunts/tests/test_weather_api.py -v\n   165→```\n   166→\n   167→### Frontend Development\n   168→```bash\n   169→cd frontend\n   170→\n   171→# Development server (with Turbopack)\n   172→npm run dev\n   173→\n   174→# Build and type checking\n   175→npm run build\n   176→npm run lint\n   177→npx tsc --noEmit                # TypeScript checking without emit\n   178→```\n   179→\n   180→### Testing & Validation\n   181→\n   182→#### Pre-Commit Validation"}]},"uuid":"e8fb8660-16b4-46f5-878c-fde85a6bbd61","timestamp":"2025-08-25T04:44:52.280Z","toolUseResult":{"filePath":"/Users/markelmore/_code/fowldata/CLAUDE.md","oldString":"### Frontend Development\n```bash\ncd frontend\n\n# Development server (with Turbopack)\nnpm run dev\n\n# Build and type checking\nnpm run build\nnpm run lint\n\n# Testing\nnpm run test                    # Jest unit tests\nnpm run test:watch             # Jest in watch mode  \nnpm run test:e2e               # Playwright E2E tests\nnpm run test:e2e:ui            # Playwright with UI\n```","newString":"### Frontend Development\n```bash\ncd frontend\n\n# Development server (with Turbopack)\nnpm run dev\n\n# Build and type checking\nnpm run build\nnpm run lint\nnpx tsc --noEmit                # TypeScript checking without emit\n```","originalFile":"# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## 🎯 Quick Reference\n\n### Critical Commands\n```bash\n# Essential Development\ndocker compose up -d && cd frontend && npm run dev  # Start full stack\n./testlint-quick           # Quick validation before commits\n./testlint                 # Full validation before PRs\n\n# Production Deployment\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# Emergency Troubleshooting\nnode auth-health-check.js  # Authentication issues\n./scripts/verify-e2e-setup.sh  # E2E test setup validation\n```\n\n### Key API Endpoints\n```bash\nGET /api/hunts/            # List user hunts\nPOST /api/hunts/           # Create hunt\nGET /api/users/me/         # Current user info  \nPOST /api/auth/sync/       # User synchronization\nGET /api/health/           # Backend health check\n```\n\n## ⚠️ CRITICAL: Docker Network Configuration - NEVER CHANGE\n**RECURRING ISSUE - ALWAYS CHECK THIS FIRST**\n\nThe frontend `.env.local` file MUST use the Docker service name for backend communication:\n```bash\n# CORRECT - Use Docker service name (this is in frontend/.env.local)\nBACKEND_URL=http://fowldata:8000\n\n# WRONG - Will cause ECONNREFUSED errors in Docker containers\nBACKEND_URL=http://localhost:8000\n```\n\n**Why**: Inside Docker containers, `localhost` refers to the container itself, not the host. Service names resolve to container IPs within the Docker network.\n\n**Symptoms**: NextAuth authentication fails, API calls fail with \"connect ECONNREFUSED ::1:8000\"\n\n**Fix**: Always use `fowldata:8000` (service name from docker-compose.yml) for inter-container communication.\n\n## ⚠️ CRITICAL: Mapbox GL JS v3+ with react-map-gl v8 Layer Rendering\n**RECURRING ISSUE - ESSENTIAL FOR LAYER VISIBILITY**\n\nWhen using Mapbox GL JS v3+ with react-map-gl v8, layers will NOT render without explicit `mapboxgl.accessToken` configuration:\n\n```typescript\nimport mapboxgl from 'mapbox-gl';\n\nconst MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;\n\n// CRITICAL: This is required for Mapbox GL JS v3+ with react-map-gl v8\nif (MAPBOX_TOKEN) {\n  mapboxgl.accessToken = MAPBOX_TOKEN;\n}\n```\n\n**Why**: react-map-gl v8 delegates to Mapbox GL JS v3+ which requires explicit token configuration. Previous versions handled this automatically.\n\n**Symptoms**: \n- Map loads successfully with satellite/custom styles\n- Source/Layer components appear to be configured correctly  \n- Debug panels show data is present\n- NO visual layers render (not even test layers with bright colors)\n- No console errors about authentication or tokens\n- Canvas element exists but shows no content\n\n**Additional react-map-gl v8 Requirements:**\n- Layer components must be **immediate children** of Source components (no React fragments `<>...</>`)\n- Do NOT add explicit `source` props to Layer components inside Source components\n- Remove conditional `mapStyleLoaded` wrappers - let react-map-gl handle timing internally\n\n**Fix Location**: Add the `mapboxgl.accessToken` configuration at the top level of your Map component file, after importing mapboxgl.\n\n**Debugging Signs This is the Issue**:\n- Mapbox canvas renders with proper classes (`mapboxgl-canvas-container`)\n- Map style loads successfully\n- Data processing works correctly\n- Visibility and layer management appears functional\n- Zero visual layer rendering despite all other systems working\n\n## ⚠️ CRITICAL: Production Environment Variable Loading\n**RECURRING DEPLOYMENT ISSUE - ESSENTIAL FOR PRODUCTION**\n\nDocker Compose production deployments REQUIRE explicit `--env-file` flag:\n\n```bash\n# REQUIRED for all production commands\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# WRONG - Will cause \"variable is not set\" warnings and startup failures\ndocker-compose -f docker-compose.prod.yaml up -d\n```\n\n**Why**: The `env_file:` setting in docker-compose.prod.yaml handles container environment variables, but Docker Compose variable substitution (${VARIABLE}) requires the explicit `--env-file` flag.\n\n**Symptoms**: \n- `WARN[0000] The \"DB_NAME\" variable is not set. Defaulting to a blank string.`\n- PostgreSQL container fails with \"superuser password not specified\"\n- Environment variables visible in some services but not others\n\n**Additional Production Requirements**:\n- All services need `env_file: - .env.production` in docker-compose.prod.yaml\n- Avoid special characters in passwords (`$`, `!`, etc.) - shell interprets them\n- Use clean file encoding (UTF-8 without BOM) for environment files\n\n## Architecture Overview\n\nFowlData is a production-ready full-stack waterfowl hunting tracking application:\n\n**Backend (Django)**: Located in `fowldata/` directory\n- Django 4.2 with Django REST Framework for API endpoints\n- PostgreSQL 16 with PostGIS 3.4 for geospatial data storage and spatial queries\n- JWT RS256 authentication integrated with NextAuth.js frontend\n- Two main apps: `accounts` (user management) and `hunts` (hunt tracking)\n- AWS S3 integration for photo storage with presigned URLs and CORS\n- Gunicorn WSGI server with production performance tuning\n\n**Frontend (Next.js)**: Located in `frontend/` directory  \n- Next.js 15.4.4 with React 19 and TypeScript\n- NextAuth.js v5 with Google OAuth and credentials authentication\n- Mapbox GL JS v3+ with react-map-gl v8 for interactive mapping\n- TailwindCSS for styling, React Hook Form for forms\n- Playwright for E2E testing, Jest for unit tests\n- Production-optimized standalone builds\n\n**Production Infrastructure**:\n- **Deployment**: Digital Ocean Droplets with Docker Compose orchestration\n- **Reverse Proxy**: Nginx with SSL/TLS termination via Let's Encrypt\n- **Caching**: Redis for sessions, query caching, and performance optimization\n- **Storage**: AWS S3 with CloudFront CDN for photo uploads and static assets\n- **Database**: PostgreSQL with PostGIS extensions, performance tuning, and automated backups\n- **Monitoring**: Docker health checks, database performance monitoring, and logging\n- **Security**: SSL enforcement, security headers, rate limiting, and firewall configuration\n\n## Development Commands\n\n### Backend Development\n```bash\n# Start services\ndocker compose up -d\n\n# Django management commands\ndocker compose exec fowldata python manage.py migrate\ndocker compose exec fowldata python manage.py createsuperuser\ndocker compose exec fowldata python manage.py shell\n\n# Run backend tests\ndocker compose exec fowldata python -m pytest\ndocker compose exec fowldata python -m pytest accounts/tests/ hunts/tests/ -v\n\n# Code formatting and linting\ndocker compose exec fowldata black .\ndocker compose exec fowldata flake8\n\n# Single test file\ndocker compose exec fowldata python -m pytest hunts/tests/test_weather_api.py -v\n```\n\n### Frontend Development\n```bash\ncd frontend\n\n# Development server (with Turbopack)\nnpm run dev\n\n# Build and type checking\nnpm run build\nnpm run lint\n\n# Testing\nnpm run test                    # Jest unit tests\nnpm run test:watch             # Jest in watch mode  \nnpm run test:e2e               # Playwright E2E tests\nnpm run test:e2e:ui            # Playwright with UI\n```\n\n### Testing & Validation\n\n#### Pre-Commit Validation\n```bash\n# Quick validation (run before commits)\n./testlint-quick               # Essential tests only (2-3 minutes)\n\n# Full validation (run before PRs)  \n./testlint                     # Complete validation with E2E tests (10-15 minutes)\n```\n\n#### Comprehensive Testing Commands\n```bash\n# Backend Testing\ndocker compose exec fowldata python -m pytest                    # All backend tests\ndocker compose exec fowldata python -m pytest -m \"not performance\"  # Skip slow tests\ndocker compose exec fowldata python -m pytest --cov=fowldata     # With coverage\ndocker compose exec fowldata python -m pytest -s --pdb          # Debug mode\n\n# Frontend Testing\ncd frontend\nnpm run test                           # Jest unit tests\nnpm run test -- --watchAll=false      # CI mode (run once)  \nnpm run test:e2e                      # Playwright E2E tests\nnpm run test:e2e -- --project chromium  # Specific browser\nnpm run test:e2e -- --debug           # Debug E2E tests\n\n# Specific Test Categories\ndocker compose exec fowldata python -m pytest -m \"auth\"      # Authentication tests\ndocker compose exec fowldata python -m pytest -m \"api\"       # API endpoint tests\nnpm test -- --testNamePattern=\"authentication\"               # Frontend auth tests\n```\n\n#### Test Debugging\n```bash\n# Backend Debug\ndocker compose exec fowldata python -m pytest -s --pdb hunts/tests/test_weather_api.py::test_function\ndocker compose exec fowldata python manage.py shell\n\n# Frontend Debug\nnpm run test:e2e -- --headed          # Show browser\nnpm run test:e2e -- --ui               # Playwright UI mode\nnpm test -- --no-coverage --verbose   # Detailed Jest output\n\n# E2E Test Environment Validation\n./scripts/verify-e2e-setup.sh         # Check E2E prerequisites\n```\n\n### Production Deployment\n```bash\n# Production validation and deployment\n./scripts/validate-production.sh\n\n# Production commands (ALWAYS use --env-file flag)\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production build\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production logs -f\n\n# Django production setup\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py migrate\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py createsuperuser\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py collectstatic --noinput\n```\n\n## Core Data Models\n\n**Hunt Model** (`hunts/models.py`):\n- Tracks hunting sessions with date, location (PostGIS Point), weather conditions\n- Links to multiple Bird harvests and HuntPhoto uploads\n- Weather data automatically fetched from external API based on coordinates\n\n**Bird Model**:\n- Individual waterfowl harvests within a hunt\n- Species selection from predefined WATERFOWL_CHOICES (Dabblers, Divers, Geese)\n- Includes harvest time, notes, and gender (Drake/Hen)\n\n**Authentication Integration**:\n- Django backend uses custom NextAuthBackend for JWT token validation\n- Frontend NextAuth.js providers: Google, Facebook, Credentials\n- Token synchronization between NextAuth and Django API client\n\n## Key Integration Points\n\n**Django-NextAuth Authentication Flow**:\n- NextAuth JWT tokens validated by Django via `accounts/nextauth_backend.py`  \n- API requests include NextAuth JWT in Authorization header\n- User creation/sync handled by Django signals in `accounts/signals.py`\n\n**Photo Upload System**:\n- S3 presigned URLs generated by Django `hunts/s3_manager.py`\n- Frontend uploads directly to S3, then registers with Django\n- HuntPhoto model tracks S3 URLs linked to Hunt instances\n\n**Geospatial Features**:\n- Hunt locations stored as PostGIS Points with lat/lng coordinates\n- Weather API integration fetches conditions based on hunt coordinates\n- Mapbox integration for location selection and visualization\n\n## Environment Configuration\n\n### Critical Environment Variables (MUST MATCH)\n**These variables must be identical in both backend and frontend:**\n```bash\n# Authentication (CRITICAL - must match exactly)\nAUTH_SECRET=your-nextauth-secret-key        # Both .env.local AND frontend/.env.local\n\n# Docker Network (CRITICAL - use service names)  \nBACKEND_URL=http://fowldata:8000            # frontend/.env.local ONLY\n```\n\n### Required Environment Files\n```bash\n# Development\n.env.local                  # Backend: Django database, secrets, S3 credentials  \nfrontend/.env.local         # Frontend: NextAuth secrets, API URLs\n\n# Production  \n.env.production            # Backend: Production settings\nfrontend/.env.production   # Frontend: Production URLs and secrets\n```\n\n### Essential Variables by Service\n```bash\n# Database (Backend .env.local)\nDB_HOST=localhost           # Development: localhost, Production: postgres\nDB_NAME=fowldata           # Database name\nDB_USER=postgres           # Database username\nDB_PASS=your_password      # No special characters in production\n\n# Authentication (Both files)\nAUTH_SECRET=your-secret    # Generate: openssl rand -base64 32\nSECRET_KEY=django-secret   # Django only\n\n# Mapbox (Frontend .env.local)\nNEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your-token  # REQUIRED for layer rendering\n\n# AWS S3 (Backend .env.local)\nAWS_ACCESS_KEY_ID=your-key\nAWS_SECRET_ACCESS_KEY=your-secret  \nAWS_S3_BUCKET_NAME=bucket-name\n\n# OAuth (Frontend .env.local)\nGOOGLE_CLIENT_ID=your-google-id\nGOOGLE_CLIENT_SECRET=your-google-secret\n```\n\n### Security & Performance Best Practices\n```bash\n# Production Security Checklist\n- Use strong AUTH_SECRET (32+ characters): openssl rand -base64 32\n- Avoid special characters in passwords (no $, !, etc.) - shell interprets them\n- Always use HTTPS for OAuth callbacks in production\n- Set proper CORS origins: CORS_ALLOWED_ORIGINS=https://yourdomain.com\n\n# Performance Optimization  \n- Use Redis for caching: REDIS_HOST=redis, REDIS_PASSWORD=your-password\n- Enable SSL redirect: SECURE_SSL_REDIRECT=True (production)\n- Configure proper headers: SECURE_HSTS_SECONDS=31536000\n\n# Environment File Best Practices\n- Use UTF-8 encoding without BOM\n- No spaces around = signs: VAR=value (not VAR = value)\n- Always backup production environment files\n```\n\n## Testing Patterns\n\n**Backend Tests** (pytest-django):\n- Database tests marked with `@pytest.mark.django_db`\n- API endpoint tests use Django's APIClient  \n- External services (S3, weather API) are mocked\n- Fixtures in `conftest.py` create test users and hunt data\n\n**Frontend Tests**:\n- Unit tests: Jest + React Testing Library in `src/__tests__/`\n- Component tests focus on user interactions, not implementation\n- E2E tests: Playwright in `e2e/` directory with real browser automation\n- API mocking for isolated component testing\n\n## Mapbox Configuration\n\n- Import controls from `react-map-gl/mapbox` for Mapbox GL JS v3.5+\n- Control positioning critical - use `position` prop, not `style` object\n- Standard controls must be children of `<Map>` component\n- Custom controls positioned absolutely outside `<Map>`\n- Test controls in both browser and fullscreen modes\n\n## Development Workflow\n\n### Branch Strategy & Process\n```bash\n# Create feature branch\ngit checkout -b feature/descriptive-name\ngit push -u origin feature/descriptive-name\n\n# Development cycle\n# 1. Make changes\n# 2. Test locally: ./testlint-quick\n# 3. Commit: git commit -m \"feat: description\"  \n# 4. Before PR: ./testlint\n# 5. Create PR: gh pr create --title \"Title\" --body \"Description\"\n\n# Commit Message Format\nfeat: Add hunt sharing functionality\nfix: Resolve photo upload timeout issue  \ndocs: Update API documentation\ntest: Add weather API integration tests\nrefactor: Simplify authentication middleware\n```\n\n### Development Best Practices\n- **Container Rebuilds**: Rebuild Docker containers after backend changes to see frontend updates\n- **Test Credentials**: Use `mark@mail.com` / `1@Tsgstp` for E2E tests\n- **Pre-commit**: Always run `./testlint-quick` before commits\n- **Pre-PR**: Always run `./testlint` before creating pull requests  \n- **API Mocking**: Weather API responses should be mocked in tests for consistency\n\n## Troubleshooting Guide\n\n### Authentication Issues\n```bash\n# Primary diagnostic tool\nnode auth-health-check.js                    # Comprehensive auth system check\n\n# Specific auth problems\ndocker compose logs fowldata | grep -i auth  # Backend auth errors\ndocker compose logs fowldata | grep -i jwt   # JWT token issues\ndocker compose exec fowldata python manage.py shell  # Manual user inspection\n\n# Common auth fixes\n# 1. Verify AUTH_SECRET matches in both .env files\n# 2. Check BACKEND_URL uses fowldata:8000 (not localhost)\n# 3. Clear browser cookies and retry\n# 4. Restart both containers: docker compose restart fowldata frontend\n```\n\n### Database & Migration Issues  \n```bash\n# Database diagnostic\ndocker compose exec fowldata python manage.py check\ndocker compose exec fowldata python manage.py dbshell\ndocker compose exec postgres psql -U postgres -d fowldata\n\n# Reset database (development only)\ndocker compose down -v                       # Destroy volumes\ndocker compose up -d                         # Recreate services\ndocker compose exec fowldata python manage.py migrate\n\n# Migration problems\ndocker compose exec fowldata python manage.py showmigrations  # Show status\ndocker compose exec fowldata python manage.py migrate --fake  # Mark as applied\n```\n\n### Frontend Build & Runtime Issues\n```bash\n# Build diagnostics\ncd frontend\nnpm run build                                # Check for build errors\nnpm run lint                                # TypeScript/ESLint issues\nrm -rf .next node_modules && npm install    # Clean reinstall\n\n# Runtime debugging\nnpm run dev                                  # Development server logs\ndocker compose logs frontend                # Container logs\n```\n\n### E2E Test Failures\n```bash\n# E2E test diagnostics\n./scripts/verify-e2e-setup.sh              # Check prerequisites\nnpm run test:e2e -- --headed               # Visual debugging  \nnpm run test:e2e -- --debug                # Step-by-step debugging\n\n# Common E2E fixes\n# 1. Ensure test user exists: mark@mail.com / 1@Tsgstp\n# 2. Check services are running: docker compose ps\n# 3. Verify ports: curl http://localhost:3000 && curl http://localhost:8000/api/\n# 4. Clear browser state: rm -rf test-results/\n```\n\n### Performance & Resource Issues\n```bash\n# System resource monitoring\ndocker stats                               # Container resource usage\ndocker system df                          # Disk space usage\ndocker system prune -f                    # Clean unused resources\n\n# Database performance\ndocker compose exec fowldata python manage.py dbshell\n# Then: EXPLAIN ANALYZE SELECT * FROM hunts_hunt WHERE location IS NOT NULL;\n\n# Memory issues\ndocker compose down && docker compose up -d  # Restart all services\n```\n\n### Production Deployment Issues\n```bash\n# Production diagnostics\n./scripts/validate-production.sh           # Pre-deployment validation\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production config  # Validate config\n\n# SSL/TLS issues  \nopenssl x509 -in ssl/fullchain.pem -text -noout  # Check certificate\nsudo certbot renew --dry-run               # Test renewal process\n\n# Environment variable issues\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata env | grep DB_\n```\n\n### Emergency Recovery\n```bash\n# Quick service restart\ndocker compose restart fowldata frontend postgres\n\n# Full environment reset (DESTRUCTIVE - development only)\ndocker compose down -v\ndocker system prune -f  \ngit checkout -- .env.local frontend/.env.local\ndocker compose up -d\n\n# Rollback production deployment\ngit checkout previous-working-commit\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d --force-recreate\n```","structuredPatch":[{"oldStart":174,"oldLines":12,"newStart":174,"newLines":7,"lines":[" # Build and type checking"," npm run build"," npm run lint","-","-# Testing","-npm run test                    # Jest unit tests","-npm run test:watch             # Jest in watch mode  ","-npm run test:e2e               # Playwright E2E tests","-npm run test:e2e:ui            # Playwright with UI","+npx tsc --noEmit                # TypeScript checking without emit"," ```"," "," ### Testing & Validation"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"e8fb8660-16b4-46f5-878c-fde85a6bbd61","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01PtPMxUtnnYU61v9hozrnmP","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01BC3PEP1thF9HL7sgjYWFaJ","name":"Edit","input":{"file_path":"/Users/markelmore/_code/fowldata/CLAUDE.md","old_string":"# Rollback production deployment\ngit checkout previous-working-commit\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d --force-recreate\n```","new_string":"# Rollback production deployment\ngit checkout previous-working-commit\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d --force-recreate\n```\n\n## Database & Backup Management\n\n### Database Operations\n```bash\n# Database inspection\ndocker compose exec fowldata python manage.py dbshell\ndocker compose exec postgres psql -U postgres -d fowldata\n\n# Create database backup\ndocker compose exec postgres pg_dump -U postgres fowldata > backup_$(date +%Y%m%d_%H%M%S).sql\n\n# Restore database backup  \ncat backup_file.sql | docker compose exec -T postgres psql -U postgres -d fowldata\n\n# Check database size and connections\ndocker compose exec postgres psql -U postgres -d fowldata -c \"\\l+ fowldata\"\ndocker compose exec postgres psql -U postgres -d fowldata -c \"SELECT * FROM pg_stat_activity;\"\n```\n\n### Performance Monitoring\n```bash\n# Monitor container resources\ndocker stats fowldata postgres redis frontend\n\n# Database performance analysis\ndocker compose exec fowldata python manage.py shell\n# >>> from django.db import connection; print(len(connection.queries))\n\n# Check slow queries (PostgreSQL)\ndocker compose exec postgres psql -U postgres -d fowldata -c \"\nSELECT query, mean_exec_time, calls \nFROM pg_stat_statements \nORDER BY mean_exec_time DESC LIMIT 10;\"\n\n# Redis monitoring\ndocker compose exec redis redis-cli INFO memory\ndocker compose exec redis redis-cli INFO stats\n```\n\n## API Reference\n\n### Core Hunt API\n```bash\n# Hunt Management\nGET /api/hunts/                           # List user hunts (paginated)\nPOST /api/hunts/                          # Create new hunt\nGET /api/hunts/{id}/                      # Get specific hunt\nPUT /api/hunts/{id}/                      # Update hunt\nDELETE /api/hunts/{id}/                   # Delete hunt\n\n# Hunt Search & Filtering  \nGET /api/hunts/?date_after=2024-01-01     # Filter by date\nGET /api/hunts/?location=lat,lng,radius   # Geospatial search\nGET /api/hunts/?species=mallard           # Filter by species\n```\n\n### Photo & Media API\n```bash\n# Photo Management\nGET /api/hunts/{hunt_id}/photos/          # List hunt photos\nPOST /api/hunts/{hunt_id}/photos/         # Upload photo\nDELETE /api/photos/{photo_id}/            # Delete photo\n\n# S3 Upload Workflow\nPOST /api/photos/presigned-url/           # Get presigned upload URL\n# → Upload directly to S3 using presigned URL\nPOST /api/photos/confirm-upload/          # Confirm S3 upload success\n```\n\n### User & Authentication API\n```bash\n# User Management\nGET /api/users/me/                        # Current user profile\nPUT /api/users/me/                        # Update user profile  \nPOST /api/auth/sync/                      # Sync NextAuth user data\n\n# System Health\nGET /api/health/                          # Backend health check\nGET /health.json                          # Frontend health check (static)\n```"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":514,"cache_read_input_tokens":84192,"cache_creation":{"ephemeral_5m_input_tokens":514,"ephemeral_1h_input_tokens":0},"output_tokens":25,"service_tier":"standard"}},"requestId":"req_011CSTpRzcDFAMYwejmYQE3Y","type":"assistant","uuid":"a63cd212-1995-44f7-ab83-44d61b918d26","timestamp":"2025-08-25T04:45:07.232Z"}
{"parentUuid":"a63cd212-1995-44f7-ab83-44d61b918d26","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01BC3PEP1thF9HL7sgjYWFaJ","type":"tool_result","content":"The file /Users/markelmore/_code/fowldata/CLAUDE.md has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   496→docker system prune -f  \n   497→git checkout -- .env.local frontend/.env.local\n   498→docker compose up -d\n   499→\n   500→# Rollback production deployment\n   501→git checkout previous-working-commit\n   502→docker-compose -f docker-compose.prod.yaml --env-file .env.production up -d --force-recreate\n   503→```\n   504→\n   505→## Database & Backup Management\n   506→\n   507→### Database Operations\n   508→```bash\n   509→# Database inspection\n   510→docker compose exec fowldata python manage.py dbshell\n   511→docker compose exec postgres psql -U postgres -d fowldata\n   512→\n   513→# Create database backup\n   514→docker compose exec postgres pg_dump -U postgres fowldata > backup_$(date +%Y%m%d_%H%M%S).sql\n   515→\n   516→# Restore database backup  \n   517→cat backup_file.sql | docker compose exec -T postgres psql -U postgres -d fowldata\n   518→\n   519→# Check database size and connections\n   520→docker compose exec postgres psql -U postgres -d fowldata -c \"\\l+ fowldata\"\n   521→docker compose exec postgres psql -U postgres -d fowldata -c \"SELECT * FROM pg_stat_activity;\"\n   522→```\n   523→\n   524→### Performance Monitoring\n   525→```bash\n   526→# Monitor container resources\n   527→docker stats fowldata postgres redis frontend\n   528→\n   529→# Database performance analysis\n   530→docker compose exec fowldata python manage.py shell\n   531→# >>> from django.db import connection; print(len(connection.queries))\n   532→\n   533→# Check slow queries (PostgreSQL)\n   534→docker compose exec postgres psql -U postgres -d fowldata -c \"\n   535→SELECT query, mean_exec_time, calls \n   536→FROM pg_stat_statements \n   537→ORDER BY mean_exec_time DESC LIMIT 10;\"\n   538→\n   539→# Redis monitoring\n   540→docker compose exec redis redis-cli INFO memory\n   541→docker compose exec redis redis-cli INFO stats\n   542→```\n   543→\n   544→## API Reference\n   545→\n   546→### Core Hunt API\n   547→```bash\n   548→# Hunt Management\n   549→GET /api/hunts/                           # List user hunts (paginated)\n   550→POST /api/hunts/                          # Create new hunt\n   551→GET /api/hunts/{id}/                      # Get specific hunt\n   552→PUT /api/hunts/{id}/                      # Update hunt\n   553→DELETE /api/hunts/{id}/                   # Delete hunt\n   554→\n   555→# Hunt Search & Filtering  \n   556→GET /api/hunts/?date_after=2024-01-01     # Filter by date\n   557→GET /api/hunts/?location=lat,lng,radius   # Geospatial search\n   558→GET /api/hunts/?species=mallard           # Filter by species\n   559→```\n   560→\n   561→### Photo & Media API\n   562→```bash\n   563→# Photo Management\n   564→GET /api/hunts/{hunt_id}/photos/          # List hunt photos\n   565→POST /api/hunts/{hunt_id}/photos/         # Upload photo\n   566→DELETE /api/photos/{photo_id}/            # Delete photo\n   567→\n   568→# S3 Upload Workflow\n   569→POST /api/photos/presigned-url/           # Get presigned upload URL\n   570→# → Upload directly to S3 using presigned URL\n   571→POST /api/photos/confirm-upload/          # Confirm S3 upload success\n   572→```\n   573→\n   574→### User & Authentication API\n   575→```bash\n   576→# User Management\n   577→GET /api/users/me/                        # Current user profile\n   578→PUT /api/users/me/                        # Update user profile  \n   579→POST /api/auth/sync/                      # Sync NextAuth user data\n   580→\n   581→# System Health\n   582→GET /api/health/                          # Backend health check\n   583→GET /health.json                          # Frontend health check (static)\n   584→```"}]},"uuid":"fc9d73e3-824d-4cf7-9781-3ba20186f49a","timestamp":"2025-08-25T04:45:07.307Z","toolUseResult":{"filePath":"/Users/markelmore/_code/fowldata/CLAUDE.md","oldString":"# Rollback production deployment\ngit checkout previous-working-commit\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d --force-recreate\n```","newString":"# Rollback production deployment\ngit checkout previous-working-commit\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d --force-recreate\n```\n\n## Database & Backup Management\n\n### Database Operations\n```bash\n# Database inspection\ndocker compose exec fowldata python manage.py dbshell\ndocker compose exec postgres psql -U postgres -d fowldata\n\n# Create database backup\ndocker compose exec postgres pg_dump -U postgres fowldata > backup_$(date +%Y%m%d_%H%M%S).sql\n\n# Restore database backup  \ncat backup_file.sql | docker compose exec -T postgres psql -U postgres -d fowldata\n\n# Check database size and connections\ndocker compose exec postgres psql -U postgres -d fowldata -c \"\\l+ fowldata\"\ndocker compose exec postgres psql -U postgres -d fowldata -c \"SELECT * FROM pg_stat_activity;\"\n```\n\n### Performance Monitoring\n```bash\n# Monitor container resources\ndocker stats fowldata postgres redis frontend\n\n# Database performance analysis\ndocker compose exec fowldata python manage.py shell\n# >>> from django.db import connection; print(len(connection.queries))\n\n# Check slow queries (PostgreSQL)\ndocker compose exec postgres psql -U postgres -d fowldata -c \"\nSELECT query, mean_exec_time, calls \nFROM pg_stat_statements \nORDER BY mean_exec_time DESC LIMIT 10;\"\n\n# Redis monitoring\ndocker compose exec redis redis-cli INFO memory\ndocker compose exec redis redis-cli INFO stats\n```\n\n## API Reference\n\n### Core Hunt API\n```bash\n# Hunt Management\nGET /api/hunts/                           # List user hunts (paginated)\nPOST /api/hunts/                          # Create new hunt\nGET /api/hunts/{id}/                      # Get specific hunt\nPUT /api/hunts/{id}/                      # Update hunt\nDELETE /api/hunts/{id}/                   # Delete hunt\n\n# Hunt Search & Filtering  \nGET /api/hunts/?date_after=2024-01-01     # Filter by date\nGET /api/hunts/?location=lat,lng,radius   # Geospatial search\nGET /api/hunts/?species=mallard           # Filter by species\n```\n\n### Photo & Media API\n```bash\n# Photo Management\nGET /api/hunts/{hunt_id}/photos/          # List hunt photos\nPOST /api/hunts/{hunt_id}/photos/         # Upload photo\nDELETE /api/photos/{photo_id}/            # Delete photo\n\n# S3 Upload Workflow\nPOST /api/photos/presigned-url/           # Get presigned upload URL\n# → Upload directly to S3 using presigned URL\nPOST /api/photos/confirm-upload/          # Confirm S3 upload success\n```\n\n### User & Authentication API\n```bash\n# User Management\nGET /api/users/me/                        # Current user profile\nPUT /api/users/me/                        # Update user profile  \nPOST /api/auth/sync/                      # Sync NextAuth user data\n\n# System Health\nGET /api/health/                          # Backend health check\nGET /health.json                          # Frontend health check (static)\n```","originalFile":"# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## 🎯 Quick Reference\n\n### Critical Commands\n```bash\n# Essential Development\ndocker compose up -d && cd frontend && npm run dev  # Start full stack\n./testlint-quick           # Quick validation before commits\n./testlint                 # Full validation before PRs\n\n# Production Deployment\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# Emergency Troubleshooting\nnode auth-health-check.js  # Authentication issues\n./scripts/verify-e2e-setup.sh  # E2E test setup validation\n```\n\n### Key API Endpoints\n```bash\nGET /api/hunts/            # List user hunts\nPOST /api/hunts/           # Create hunt\nGET /api/users/me/         # Current user info  \nPOST /api/auth/sync/       # User synchronization\nGET /api/health/           # Backend health check\n```\n\n## ⚠️ CRITICAL: Docker Network Configuration - NEVER CHANGE\n**RECURRING ISSUE - ALWAYS CHECK THIS FIRST**\n\nThe frontend `.env.local` file MUST use the Docker service name for backend communication:\n```bash\n# CORRECT - Use Docker service name (this is in frontend/.env.local)\nBACKEND_URL=http://fowldata:8000\n\n# WRONG - Will cause ECONNREFUSED errors in Docker containers\nBACKEND_URL=http://localhost:8000\n```\n\n**Why**: Inside Docker containers, `localhost` refers to the container itself, not the host. Service names resolve to container IPs within the Docker network.\n\n**Symptoms**: NextAuth authentication fails, API calls fail with \"connect ECONNREFUSED ::1:8000\"\n\n**Fix**: Always use `fowldata:8000` (service name from docker-compose.yml) for inter-container communication.\n\n## ⚠️ CRITICAL: Mapbox GL JS v3+ with react-map-gl v8 Layer Rendering\n**RECURRING ISSUE - ESSENTIAL FOR LAYER VISIBILITY**\n\nWhen using Mapbox GL JS v3+ with react-map-gl v8, layers will NOT render without explicit `mapboxgl.accessToken` configuration:\n\n```typescript\nimport mapboxgl from 'mapbox-gl';\n\nconst MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;\n\n// CRITICAL: This is required for Mapbox GL JS v3+ with react-map-gl v8\nif (MAPBOX_TOKEN) {\n  mapboxgl.accessToken = MAPBOX_TOKEN;\n}\n```\n\n**Why**: react-map-gl v8 delegates to Mapbox GL JS v3+ which requires explicit token configuration. Previous versions handled this automatically.\n\n**Symptoms**: \n- Map loads successfully with satellite/custom styles\n- Source/Layer components appear to be configured correctly  \n- Debug panels show data is present\n- NO visual layers render (not even test layers with bright colors)\n- No console errors about authentication or tokens\n- Canvas element exists but shows no content\n\n**Additional react-map-gl v8 Requirements:**\n- Layer components must be **immediate children** of Source components (no React fragments `<>...</>`)\n- Do NOT add explicit `source` props to Layer components inside Source components\n- Remove conditional `mapStyleLoaded` wrappers - let react-map-gl handle timing internally\n\n**Fix Location**: Add the `mapboxgl.accessToken` configuration at the top level of your Map component file, after importing mapboxgl.\n\n**Debugging Signs This is the Issue**:\n- Mapbox canvas renders with proper classes (`mapboxgl-canvas-container`)\n- Map style loads successfully\n- Data processing works correctly\n- Visibility and layer management appears functional\n- Zero visual layer rendering despite all other systems working\n\n## ⚠️ CRITICAL: Production Environment Variable Loading\n**RECURRING DEPLOYMENT ISSUE - ESSENTIAL FOR PRODUCTION**\n\nDocker Compose production deployments REQUIRE explicit `--env-file` flag:\n\n```bash\n# REQUIRED for all production commands\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# WRONG - Will cause \"variable is not set\" warnings and startup failures\ndocker-compose -f docker-compose.prod.yaml up -d\n```\n\n**Why**: The `env_file:` setting in docker-compose.prod.yaml handles container environment variables, but Docker Compose variable substitution (${VARIABLE}) requires the explicit `--env-file` flag.\n\n**Symptoms**: \n- `WARN[0000] The \"DB_NAME\" variable is not set. Defaulting to a blank string.`\n- PostgreSQL container fails with \"superuser password not specified\"\n- Environment variables visible in some services but not others\n\n**Additional Production Requirements**:\n- All services need `env_file: - .env.production` in docker-compose.prod.yaml\n- Avoid special characters in passwords (`$`, `!`, etc.) - shell interprets them\n- Use clean file encoding (UTF-8 without BOM) for environment files\n\n## Architecture Overview\n\nFowlData is a production-ready full-stack waterfowl hunting tracking application:\n\n**Backend (Django)**: Located in `fowldata/` directory\n- Django 4.2 with Django REST Framework for API endpoints\n- PostgreSQL 16 with PostGIS 3.4 for geospatial data storage and spatial queries\n- JWT RS256 authentication integrated with NextAuth.js frontend\n- Two main apps: `accounts` (user management) and `hunts` (hunt tracking)\n- AWS S3 integration for photo storage with presigned URLs and CORS\n- Gunicorn WSGI server with production performance tuning\n\n**Frontend (Next.js)**: Located in `frontend/` directory  \n- Next.js 15.4.4 with React 19 and TypeScript\n- NextAuth.js v5 with Google OAuth and credentials authentication\n- Mapbox GL JS v3+ with react-map-gl v8 for interactive mapping\n- TailwindCSS for styling, React Hook Form for forms\n- Playwright for E2E testing, Jest for unit tests\n- Production-optimized standalone builds\n\n**Production Infrastructure**:\n- **Deployment**: Digital Ocean Droplets with Docker Compose orchestration\n- **Reverse Proxy**: Nginx with SSL/TLS termination via Let's Encrypt\n- **Caching**: Redis for sessions, query caching, and performance optimization\n- **Storage**: AWS S3 with CloudFront CDN for photo uploads and static assets\n- **Database**: PostgreSQL with PostGIS extensions, performance tuning, and automated backups\n- **Monitoring**: Docker health checks, database performance monitoring, and logging\n- **Security**: SSL enforcement, security headers, rate limiting, and firewall configuration\n\n## Development Commands\n\n### Backend Development\n```bash\n# Start services\ndocker compose up -d\n\n# Django management commands\ndocker compose exec fowldata python manage.py migrate\ndocker compose exec fowldata python manage.py createsuperuser\ndocker compose exec fowldata python manage.py shell\n\n# Run backend tests\ndocker compose exec fowldata python -m pytest\ndocker compose exec fowldata python -m pytest accounts/tests/ hunts/tests/ -v\n\n# Code formatting and linting\ndocker compose exec fowldata black .\ndocker compose exec fowldata flake8\n\n# Single test file\ndocker compose exec fowldata python -m pytest hunts/tests/test_weather_api.py -v\n```\n\n### Frontend Development\n```bash\ncd frontend\n\n# Development server (with Turbopack)\nnpm run dev\n\n# Build and type checking\nnpm run build\nnpm run lint\nnpx tsc --noEmit                # TypeScript checking without emit\n```\n\n### Testing & Validation\n\n#### Pre-Commit Validation\n```bash\n# Quick validation (run before commits)\n./testlint-quick               # Essential tests only (2-3 minutes)\n\n# Full validation (run before PRs)  \n./testlint                     # Complete validation with E2E tests (10-15 minutes)\n```\n\n#### Comprehensive Testing Commands\n```bash\n# Backend Testing\ndocker compose exec fowldata python -m pytest                    # All backend tests\ndocker compose exec fowldata python -m pytest -m \"not performance\"  # Skip slow tests\ndocker compose exec fowldata python -m pytest --cov=fowldata     # With coverage\ndocker compose exec fowldata python -m pytest -s --pdb          # Debug mode\n\n# Frontend Testing\ncd frontend\nnpm run test                           # Jest unit tests\nnpm run test -- --watchAll=false      # CI mode (run once)  \nnpm run test:e2e                      # Playwright E2E tests\nnpm run test:e2e -- --project chromium  # Specific browser\nnpm run test:e2e -- --debug           # Debug E2E tests\n\n# Specific Test Categories\ndocker compose exec fowldata python -m pytest -m \"auth\"      # Authentication tests\ndocker compose exec fowldata python -m pytest -m \"api\"       # API endpoint tests\nnpm test -- --testNamePattern=\"authentication\"               # Frontend auth tests\n```\n\n#### Test Debugging\n```bash\n# Backend Debug\ndocker compose exec fowldata python -m pytest -s --pdb hunts/tests/test_weather_api.py::test_function\ndocker compose exec fowldata python manage.py shell\n\n# Frontend Debug\nnpm run test:e2e -- --headed          # Show browser\nnpm run test:e2e -- --ui               # Playwright UI mode\nnpm test -- --no-coverage --verbose   # Detailed Jest output\n\n# E2E Test Environment Validation\n./scripts/verify-e2e-setup.sh         # Check E2E prerequisites\n```\n\n### Production Deployment\n```bash\n# Production validation and deployment\n./scripts/validate-production.sh\n\n# Production commands (ALWAYS use --env-file flag)\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production build\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production logs -f\n\n# Django production setup\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py migrate\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py createsuperuser\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py collectstatic --noinput\n```\n\n## Core Data Models\n\n**Hunt Model** (`hunts/models.py`):\n- Tracks hunting sessions with date, location (PostGIS Point), weather conditions\n- Links to multiple Bird harvests and HuntPhoto uploads\n- Weather data automatically fetched from external API based on coordinates\n\n**Bird Model**:\n- Individual waterfowl harvests within a hunt\n- Species selection from predefined WATERFOWL_CHOICES (Dabblers, Divers, Geese)\n- Includes harvest time, notes, and gender (Drake/Hen)\n\n**Authentication Integration**:\n- Django backend uses custom NextAuthBackend for JWT token validation\n- Frontend NextAuth.js providers: Google, Facebook, Credentials\n- Token synchronization between NextAuth and Django API client\n\n## Key Integration Points\n\n**Django-NextAuth Authentication Flow**:\n- NextAuth JWT tokens validated by Django via `accounts/nextauth_backend.py`  \n- API requests include NextAuth JWT in Authorization header\n- User creation/sync handled by Django signals in `accounts/signals.py`\n\n**Photo Upload System**:\n- S3 presigned URLs generated by Django `hunts/s3_manager.py`\n- Frontend uploads directly to S3, then registers with Django\n- HuntPhoto model tracks S3 URLs linked to Hunt instances\n\n**Geospatial Features**:\n- Hunt locations stored as PostGIS Points with lat/lng coordinates\n- Weather API integration fetches conditions based on hunt coordinates\n- Mapbox integration for location selection and visualization\n\n## Environment Configuration\n\n### Critical Environment Variables (MUST MATCH)\n**These variables must be identical in both backend and frontend:**\n```bash\n# Authentication (CRITICAL - must match exactly)\nAUTH_SECRET=your-nextauth-secret-key        # Both .env.local AND frontend/.env.local\n\n# Docker Network (CRITICAL - use service names)  \nBACKEND_URL=http://fowldata:8000            # frontend/.env.local ONLY\n```\n\n### Required Environment Files\n```bash\n# Development\n.env.local                  # Backend: Django database, secrets, S3 credentials  \nfrontend/.env.local         # Frontend: NextAuth secrets, API URLs\n\n# Production  \n.env.production            # Backend: Production settings\nfrontend/.env.production   # Frontend: Production URLs and secrets\n```\n\n### Essential Variables by Service\n```bash\n# Database (Backend .env.local)\nDB_HOST=localhost           # Development: localhost, Production: postgres\nDB_NAME=fowldata           # Database name\nDB_USER=postgres           # Database username\nDB_PASS=your_password      # No special characters in production\n\n# Authentication (Both files)\nAUTH_SECRET=your-secret    # Generate: openssl rand -base64 32\nSECRET_KEY=django-secret   # Django only\n\n# Mapbox (Frontend .env.local)\nNEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your-token  # REQUIRED for layer rendering\n\n# AWS S3 (Backend .env.local)\nAWS_ACCESS_KEY_ID=your-key\nAWS_SECRET_ACCESS_KEY=your-secret  \nAWS_S3_BUCKET_NAME=bucket-name\n\n# OAuth (Frontend .env.local)\nGOOGLE_CLIENT_ID=your-google-id\nGOOGLE_CLIENT_SECRET=your-google-secret\n```\n\n### Security & Performance Best Practices\n```bash\n# Production Security Checklist\n- Use strong AUTH_SECRET (32+ characters): openssl rand -base64 32\n- Avoid special characters in passwords (no $, !, etc.) - shell interprets them\n- Always use HTTPS for OAuth callbacks in production\n- Set proper CORS origins: CORS_ALLOWED_ORIGINS=https://yourdomain.com\n\n# Performance Optimization  \n- Use Redis for caching: REDIS_HOST=redis, REDIS_PASSWORD=your-password\n- Enable SSL redirect: SECURE_SSL_REDIRECT=True (production)\n- Configure proper headers: SECURE_HSTS_SECONDS=31536000\n\n# Environment File Best Practices\n- Use UTF-8 encoding without BOM\n- No spaces around = signs: VAR=value (not VAR = value)\n- Always backup production environment files\n```\n\n## Testing Patterns\n\n**Backend Tests** (pytest-django):\n- Database tests marked with `@pytest.mark.django_db`\n- API endpoint tests use Django's APIClient  \n- External services (S3, weather API) are mocked\n- Fixtures in `conftest.py` create test users and hunt data\n\n**Frontend Tests**:\n- Unit tests: Jest + React Testing Library in `src/__tests__/`\n- Component tests focus on user interactions, not implementation\n- E2E tests: Playwright in `e2e/` directory with real browser automation\n- API mocking for isolated component testing\n\n## Mapbox Configuration\n\n- Import controls from `react-map-gl/mapbox` for Mapbox GL JS v3.5+\n- Control positioning critical - use `position` prop, not `style` object\n- Standard controls must be children of `<Map>` component\n- Custom controls positioned absolutely outside `<Map>`\n- Test controls in both browser and fullscreen modes\n\n## Development Workflow\n\n### Branch Strategy & Process\n```bash\n# Create feature branch\ngit checkout -b feature/descriptive-name\ngit push -u origin feature/descriptive-name\n\n# Development cycle\n# 1. Make changes\n# 2. Test locally: ./testlint-quick\n# 3. Commit: git commit -m \"feat: description\"  \n# 4. Before PR: ./testlint\n# 5. Create PR: gh pr create --title \"Title\" --body \"Description\"\n\n# Commit Message Format\nfeat: Add hunt sharing functionality\nfix: Resolve photo upload timeout issue  \ndocs: Update API documentation\ntest: Add weather API integration tests\nrefactor: Simplify authentication middleware\n```\n\n### Development Best Practices\n- **Container Rebuilds**: Rebuild Docker containers after backend changes to see frontend updates\n- **Test Credentials**: Use `mark@mail.com` / `1@Tsgstp` for E2E tests\n- **Pre-commit**: Always run `./testlint-quick` before commits\n- **Pre-PR**: Always run `./testlint` before creating pull requests  \n- **API Mocking**: Weather API responses should be mocked in tests for consistency\n\n## Troubleshooting Guide\n\n### Authentication Issues\n```bash\n# Primary diagnostic tool\nnode auth-health-check.js                    # Comprehensive auth system check\n\n# Specific auth problems\ndocker compose logs fowldata | grep -i auth  # Backend auth errors\ndocker compose logs fowldata | grep -i jwt   # JWT token issues\ndocker compose exec fowldata python manage.py shell  # Manual user inspection\n\n# Common auth fixes\n# 1. Verify AUTH_SECRET matches in both .env files\n# 2. Check BACKEND_URL uses fowldata:8000 (not localhost)\n# 3. Clear browser cookies and retry\n# 4. Restart both containers: docker compose restart fowldata frontend\n```\n\n### Database & Migration Issues  \n```bash\n# Database diagnostic\ndocker compose exec fowldata python manage.py check\ndocker compose exec fowldata python manage.py dbshell\ndocker compose exec postgres psql -U postgres -d fowldata\n\n# Reset database (development only)\ndocker compose down -v                       # Destroy volumes\ndocker compose up -d                         # Recreate services\ndocker compose exec fowldata python manage.py migrate\n\n# Migration problems\ndocker compose exec fowldata python manage.py showmigrations  # Show status\ndocker compose exec fowldata python manage.py migrate --fake  # Mark as applied\n```\n\n### Frontend Build & Runtime Issues\n```bash\n# Build diagnostics\ncd frontend\nnpm run build                                # Check for build errors\nnpm run lint                                # TypeScript/ESLint issues\nrm -rf .next node_modules && npm install    # Clean reinstall\n\n# Runtime debugging\nnpm run dev                                  # Development server logs\ndocker compose logs frontend                # Container logs\n```\n\n### E2E Test Failures\n```bash\n# E2E test diagnostics\n./scripts/verify-e2e-setup.sh              # Check prerequisites\nnpm run test:e2e -- --headed               # Visual debugging  \nnpm run test:e2e -- --debug                # Step-by-step debugging\n\n# Common E2E fixes\n# 1. Ensure test user exists: mark@mail.com / 1@Tsgstp\n# 2. Check services are running: docker compose ps\n# 3. Verify ports: curl http://localhost:3000 && curl http://localhost:8000/api/\n# 4. Clear browser state: rm -rf test-results/\n```\n\n### Performance & Resource Issues\n```bash\n# System resource monitoring\ndocker stats                               # Container resource usage\ndocker system df                          # Disk space usage\ndocker system prune -f                    # Clean unused resources\n\n# Database performance\ndocker compose exec fowldata python manage.py dbshell\n# Then: EXPLAIN ANALYZE SELECT * FROM hunts_hunt WHERE location IS NOT NULL;\n\n# Memory issues\ndocker compose down && docker compose up -d  # Restart all services\n```\n\n### Production Deployment Issues\n```bash\n# Production diagnostics\n./scripts/validate-production.sh           # Pre-deployment validation\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production config  # Validate config\n\n# SSL/TLS issues  \nopenssl x509 -in ssl/fullchain.pem -text -noout  # Check certificate\nsudo certbot renew --dry-run               # Test renewal process\n\n# Environment variable issues\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata env | grep DB_\n```\n\n### Emergency Recovery\n```bash\n# Quick service restart\ndocker compose restart fowldata frontend postgres\n\n# Full environment reset (DESTRUCTIVE - development only)\ndocker compose down -v\ndocker system prune -f  \ngit checkout -- .env.local frontend/.env.local\ndocker compose up -d\n\n# Rollback production deployment\ngit checkout previous-working-commit\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d --force-recreate\n```","structuredPatch":[{"oldStart":500,"oldLines":4,"newStart":500,"newLines":85,"lines":[" # Rollback production deployment"," git checkout previous-working-commit"," docker-compose -f docker-compose.prod.yaml --env-file .env.production up -d --force-recreate","+```","+","+## Database & Backup Management","+","+### Database Operations","+```bash","+# Database inspection","+docker compose exec fowldata python manage.py dbshell","+docker compose exec postgres psql -U postgres -d fowldata","+","+# Create database backup","+docker compose exec postgres pg_dump -U postgres fowldata > backup_$(date +%Y%m%d_%H%M%S).sql","+","+# Restore database backup  ","+cat backup_file.sql | docker compose exec -T postgres psql -U postgres -d fowldata","+","+# Check database size and connections","+docker compose exec postgres psql -U postgres -d fowldata -c \"\\l+ fowldata\"","+docker compose exec postgres psql -U postgres -d fowldata -c \"SELECT * FROM pg_stat_activity;\"","+```","+","+### Performance Monitoring","+```bash","+# Monitor container resources","+docker stats fowldata postgres redis frontend","+","+# Database performance analysis","+docker compose exec fowldata python manage.py shell","+# >>> from django.db import connection; print(len(connection.queries))","+","+# Check slow queries (PostgreSQL)","+docker compose exec postgres psql -U postgres -d fowldata -c \"","+SELECT query, mean_exec_time, calls ","+FROM pg_stat_statements ","+ORDER BY mean_exec_time DESC LIMIT 10;\"","+","+# Redis monitoring","+docker compose exec redis redis-cli INFO memory","+docker compose exec redis redis-cli INFO stats","+```","+","+## API Reference","+","+### Core Hunt API","+```bash","+# Hunt Management","+GET /api/hunts/                           # List user hunts (paginated)","+POST /api/hunts/                          # Create new hunt","+GET /api/hunts/{id}/                      # Get specific hunt","+PUT /api/hunts/{id}/                      # Update hunt","+DELETE /api/hunts/{id}/                   # Delete hunt","+","+# Hunt Search & Filtering  ","+GET /api/hunts/?date_after=2024-01-01     # Filter by date","+GET /api/hunts/?location=lat,lng,radius   # Geospatial search","+GET /api/hunts/?species=mallard           # Filter by species","+```","+","+### Photo & Media API","+```bash","+# Photo Management","+GET /api/hunts/{hunt_id}/photos/          # List hunt photos","+POST /api/hunts/{hunt_id}/photos/         # Upload photo","+DELETE /api/photos/{photo_id}/            # Delete photo","+","+# S3 Upload Workflow","+POST /api/photos/presigned-url/           # Get presigned upload URL","+# → Upload directly to S3 using presigned URL","+POST /api/photos/confirm-upload/          # Confirm S3 upload success","+```","+","+### User & Authentication API","+```bash","+# User Management","+GET /api/users/me/                        # Current user profile","+PUT /api/users/me/                        # Update user profile  ","+POST /api/auth/sync/                      # Sync NextAuth user data","+","+# System Health","+GET /api/health/                          # Backend health check","+GET /health.json                          # Frontend health check (static)"," ```","\\ No newline at end of file"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"fc9d73e3-824d-4cf7-9781-3ba20186f49a","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01U9ezEvJnzSBAvgW8fqF7GV","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01FTLzGw7HYAkzSM5ZFP4NBC","name":"TodoWrite","input":{"todos":[{"content":"Analyze current CLAUDE.md structure and identify integration points","status":"completed","activeForm":"Analyzing current CLAUDE.md structure and identifying integration points"},{"content":"Enhance testing section with comprehensive commands","status":"completed","activeForm":"Enhancing testing section with comprehensive commands"},{"content":"Add security and performance best practices","status":"completed","activeForm":"Adding security and performance best practices"},{"content":"Expand troubleshooting section with consolidated patterns","status":"completed","activeForm":"Expanding troubleshooting section with consolidated patterns"},{"content":"Add development workflow improvements","status":"completed","activeForm":"Adding development workflow improvements"},{"content":"Include API reference and environment variables priority","status":"completed","activeForm":"Including API reference and environment variables priority"},{"content":"Review for redundancy and conflicts","status":"in_progress","activeForm":"Reviewing for redundancy and conflicts"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":2030,"cache_read_input_tokens":84706,"cache_creation":{"ephemeral_5m_input_tokens":2030,"ephemeral_1h_input_tokens":0},"output_tokens":24,"service_tier":"standard"}},"requestId":"req_011CSTpT6vWD4UCA9SF2UR5y","type":"assistant","uuid":"3c36d2ec-31bc-4dfe-a49a-00b9a5a8d004","timestamp":"2025-08-25T04:45:12.028Z"}
{"parentUuid":"3c36d2ec-31bc-4dfe-a49a-00b9a5a8d004","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01FTLzGw7HYAkzSM5ZFP4NBC","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"5eabe7dc-7461-4e74-80f3-0d52aba8f910","timestamp":"2025-08-25T04:45:12.099Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Analyze current CLAUDE.md structure and identify integration points","status":"completed","activeForm":"Analyzing current CLAUDE.md structure and identifying integration points"},{"content":"Enhance testing section with comprehensive commands","status":"completed","activeForm":"Enhancing testing section with comprehensive commands"},{"content":"Add security and performance best practices","status":"completed","activeForm":"Adding security and performance best practices"},{"content":"Expand troubleshooting section with consolidated patterns","status":"completed","activeForm":"Expanding troubleshooting section with consolidated patterns"},{"content":"Add development workflow improvements","status":"completed","activeForm":"Adding development workflow improvements"},{"content":"Include API reference and environment variables priority","status":"completed","activeForm":"Including API reference and environment variables priority"},{"content":"Review for redundancy and conflicts","status":"in_progress","activeForm":"Reviewing for redundancy and conflicts"}]}}
{"parentUuid":"5eabe7dc-7461-4e74-80f3-0d52aba8f910","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01Amor4hS7jxWbwrboq7QupB","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Now let me do a final review to remove any redundant or conflicting information and ensure consistency:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":328,"cache_read_input_tokens":86736,"cache_creation":{"ephemeral_5m_input_tokens":328,"ephemeral_1h_input_tokens":0},"output_tokens":4,"service_tier":"standard"}},"requestId":"req_011CSTpTTNpG341Chz72gEGG","type":"assistant","uuid":"c5633fab-3bb5-4ae7-b70b-6c88de5d4702","timestamp":"2025-08-25T04:45:15.554Z"}
{"parentUuid":"c5633fab-3bb5-4ae7-b70b-6c88de5d4702","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01Amor4hS7jxWbwrboq7QupB","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01DDC8GynBuFSgakqoga7SSs","name":"Read","input":{"file_path":"/Users/markelmore/_code/fowldata/CLAUDE.md","limit":50}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":328,"cache_read_input_tokens":86736,"cache_creation":{"ephemeral_5m_input_tokens":328,"ephemeral_1h_input_tokens":0},"output_tokens":4,"service_tier":"standard"}},"requestId":"req_011CSTpTTNpG341Chz72gEGG","type":"assistant","uuid":"1960ae8e-d4e4-4f5c-9dbd-73ca108481fa","timestamp":"2025-08-25T04:45:16.030Z"}
{"parentUuid":"1960ae8e-d4e4-4f5c-9dbd-73ca108481fa","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01DDC8GynBuFSgakqoga7SSs","type":"tool_result","content":"     1→# CLAUDE.md\n     2→\n     3→This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n     4→\n     5→## 🎯 Quick Reference\n     6→\n     7→### Critical Commands\n     8→```bash\n     9→# Essential Development\n    10→docker compose up -d && cd frontend && npm run dev  # Start full stack\n    11→./testlint-quick           # Quick validation before commits\n    12→./testlint                 # Full validation before PRs\n    13→\n    14→# Production Deployment\n    15→docker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n    16→\n    17→# Emergency Troubleshooting\n    18→node auth-health-check.js  # Authentication issues\n    19→./scripts/verify-e2e-setup.sh  # E2E test setup validation\n    20→```\n    21→\n    22→### Key API Endpoints\n    23→```bash\n    24→GET /api/hunts/            # List user hunts\n    25→POST /api/hunts/           # Create hunt\n    26→GET /api/users/me/         # Current user info  \n    27→POST /api/auth/sync/       # User synchronization\n    28→GET /api/health/           # Backend health check\n    29→```\n    30→\n    31→## ⚠️ CRITICAL: Docker Network Configuration - NEVER CHANGE\n    32→**RECURRING ISSUE - ALWAYS CHECK THIS FIRST**\n    33→\n    34→The frontend `.env.local` file MUST use the Docker service name for backend communication:\n    35→```bash\n    36→# CORRECT - Use Docker service name (this is in frontend/.env.local)\n    37→BACKEND_URL=http://fowldata:8000\n    38→\n    39→# WRONG - Will cause ECONNREFUSED errors in Docker containers\n    40→BACKEND_URL=http://localhost:8000\n    41→```\n    42→\n    43→**Why**: Inside Docker containers, `localhost` refers to the container itself, not the host. Service names resolve to container IPs within the Docker network.\n    44→\n    45→**Symptoms**: NextAuth authentication fails, API calls fail with \"connect ECONNREFUSED ::1:8000\"\n    46→\n    47→**Fix**: Always use `fowldata:8000` (service name from docker-compose.yml) for inter-container communication.\n    48→\n    49→## ⚠️ CRITICAL: Mapbox GL JS v3+ with react-map-gl v8 Layer Rendering\n    50→**RECURRING ISSUE - ESSENTIAL FOR LAYER VISIBILITY**\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"3b62659c-ae10-4738-9f0b-c99731f1b1bc","timestamp":"2025-08-25T04:45:16.083Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/markelmore/_code/fowldata/CLAUDE.md","content":"# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## 🎯 Quick Reference\n\n### Critical Commands\n```bash\n# Essential Development\ndocker compose up -d && cd frontend && npm run dev  # Start full stack\n./testlint-quick           # Quick validation before commits\n./testlint                 # Full validation before PRs\n\n# Production Deployment\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# Emergency Troubleshooting\nnode auth-health-check.js  # Authentication issues\n./scripts/verify-e2e-setup.sh  # E2E test setup validation\n```\n\n### Key API Endpoints\n```bash\nGET /api/hunts/            # List user hunts\nPOST /api/hunts/           # Create hunt\nGET /api/users/me/         # Current user info  \nPOST /api/auth/sync/       # User synchronization\nGET /api/health/           # Backend health check\n```\n\n## ⚠️ CRITICAL: Docker Network Configuration - NEVER CHANGE\n**RECURRING ISSUE - ALWAYS CHECK THIS FIRST**\n\nThe frontend `.env.local` file MUST use the Docker service name for backend communication:\n```bash\n# CORRECT - Use Docker service name (this is in frontend/.env.local)\nBACKEND_URL=http://fowldata:8000\n\n# WRONG - Will cause ECONNREFUSED errors in Docker containers\nBACKEND_URL=http://localhost:8000\n```\n\n**Why**: Inside Docker containers, `localhost` refers to the container itself, not the host. Service names resolve to container IPs within the Docker network.\n\n**Symptoms**: NextAuth authentication fails, API calls fail with \"connect ECONNREFUSED ::1:8000\"\n\n**Fix**: Always use `fowldata:8000` (service name from docker-compose.yml) for inter-container communication.\n\n## ⚠️ CRITICAL: Mapbox GL JS v3+ with react-map-gl v8 Layer Rendering\n**RECURRING ISSUE - ESSENTIAL FOR LAYER VISIBILITY**","numLines":50,"startLine":1,"totalLines":584}}}
{"parentUuid":"3b62659c-ae10-4738-9f0b-c99731f1b1bc","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01Hjt1WeEUaBxHWsrvdwpd5X","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Let me check the end of the file to see if there are any remaining redundant sections:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":847,"cache_read_input_tokens":87064,"cache_creation":{"ephemeral_5m_input_tokens":847,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTpTjszYboRfKLpBLQHH","type":"assistant","uuid":"47edb70e-c3ed-45b5-a74b-8e8d8403ab39","timestamp":"2025-08-25T04:45:18.811Z"}
{"parentUuid":"47edb70e-c3ed-45b5-a74b-8e8d8403ab39","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01Hjt1WeEUaBxHWsrvdwpd5X","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01HAhriuo5kPGogReQF6u3jB","name":"Read","input":{"file_path":"/Users/markelmore/_code/fowldata/CLAUDE.md","offset":350}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":847,"cache_read_input_tokens":87064,"cache_creation":{"ephemeral_5m_input_tokens":847,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTpTjszYboRfKLpBLQHH","type":"assistant","uuid":"71177b8e-a7e1-49b2-8daa-c92f66530530","timestamp":"2025-08-25T04:45:19.336Z"}
{"parentUuid":"71177b8e-a7e1-49b2-8daa-c92f66530530","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01HAhriuo5kPGogReQF6u3jB","type":"tool_result","content":"   350→- External services (S3, weather API) are mocked\n   351→- Fixtures in `conftest.py` create test users and hunt data\n   352→\n   353→**Frontend Tests**:\n   354→- Unit tests: Jest + React Testing Library in `src/__tests__/`\n   355→- Component tests focus on user interactions, not implementation\n   356→- E2E tests: Playwright in `e2e/` directory with real browser automation\n   357→- API mocking for isolated component testing\n   358→\n   359→## Mapbox Configuration\n   360→\n   361→- Import controls from `react-map-gl/mapbox` for Mapbox GL JS v3.5+\n   362→- Control positioning critical - use `position` prop, not `style` object\n   363→- Standard controls must be children of `<Map>` component\n   364→- Custom controls positioned absolutely outside `<Map>`\n   365→- Test controls in both browser and fullscreen modes\n   366→\n   367→## Development Workflow\n   368→\n   369→### Branch Strategy & Process\n   370→```bash\n   371→# Create feature branch\n   372→git checkout -b feature/descriptive-name\n   373→git push -u origin feature/descriptive-name\n   374→\n   375→# Development cycle\n   376→# 1. Make changes\n   377→# 2. Test locally: ./testlint-quick\n   378→# 3. Commit: git commit -m \"feat: description\"  \n   379→# 4. Before PR: ./testlint\n   380→# 5. Create PR: gh pr create --title \"Title\" --body \"Description\"\n   381→\n   382→# Commit Message Format\n   383→feat: Add hunt sharing functionality\n   384→fix: Resolve photo upload timeout issue  \n   385→docs: Update API documentation\n   386→test: Add weather API integration tests\n   387→refactor: Simplify authentication middleware\n   388→```\n   389→\n   390→### Development Best Practices\n   391→- **Container Rebuilds**: Rebuild Docker containers after backend changes to see frontend updates\n   392→- **Test Credentials**: Use `mark@mail.com` / `1@Tsgstp` for E2E tests\n   393→- **Pre-commit**: Always run `./testlint-quick` before commits\n   394→- **Pre-PR**: Always run `./testlint` before creating pull requests  \n   395→- **API Mocking**: Weather API responses should be mocked in tests for consistency\n   396→\n   397→## Troubleshooting Guide\n   398→\n   399→### Authentication Issues\n   400→```bash\n   401→# Primary diagnostic tool\n   402→node auth-health-check.js                    # Comprehensive auth system check\n   403→\n   404→# Specific auth problems\n   405→docker compose logs fowldata | grep -i auth  # Backend auth errors\n   406→docker compose logs fowldata | grep -i jwt   # JWT token issues\n   407→docker compose exec fowldata python manage.py shell  # Manual user inspection\n   408→\n   409→# Common auth fixes\n   410→# 1. Verify AUTH_SECRET matches in both .env files\n   411→# 2. Check BACKEND_URL uses fowldata:8000 (not localhost)\n   412→# 3. Clear browser cookies and retry\n   413→# 4. Restart both containers: docker compose restart fowldata frontend\n   414→```\n   415→\n   416→### Database & Migration Issues  \n   417→```bash\n   418→# Database diagnostic\n   419→docker compose exec fowldata python manage.py check\n   420→docker compose exec fowldata python manage.py dbshell\n   421→docker compose exec postgres psql -U postgres -d fowldata\n   422→\n   423→# Reset database (development only)\n   424→docker compose down -v                       # Destroy volumes\n   425→docker compose up -d                         # Recreate services\n   426→docker compose exec fowldata python manage.py migrate\n   427→\n   428→# Migration problems\n   429→docker compose exec fowldata python manage.py showmigrations  # Show status\n   430→docker compose exec fowldata python manage.py migrate --fake  # Mark as applied\n   431→```\n   432→\n   433→### Frontend Build & Runtime Issues\n   434→```bash\n   435→# Build diagnostics\n   436→cd frontend\n   437→npm run build                                # Check for build errors\n   438→npm run lint                                # TypeScript/ESLint issues\n   439→rm -rf .next node_modules && npm install    # Clean reinstall\n   440→\n   441→# Runtime debugging\n   442→npm run dev                                  # Development server logs\n   443→docker compose logs frontend                # Container logs\n   444→```\n   445→\n   446→### E2E Test Failures\n   447→```bash\n   448→# E2E test diagnostics\n   449→./scripts/verify-e2e-setup.sh              # Check prerequisites\n   450→npm run test:e2e -- --headed               # Visual debugging  \n   451→npm run test:e2e -- --debug                # Step-by-step debugging\n   452→\n   453→# Common E2E fixes\n   454→# 1. Ensure test user exists: mark@mail.com / 1@Tsgstp\n   455→# 2. Check services are running: docker compose ps\n   456→# 3. Verify ports: curl http://localhost:3000 && curl http://localhost:8000/api/\n   457→# 4. Clear browser state: rm -rf test-results/\n   458→```\n   459→\n   460→### Performance & Resource Issues\n   461→```bash\n   462→# System resource monitoring\n   463→docker stats                               # Container resource usage\n   464→docker system df                          # Disk space usage\n   465→docker system prune -f                    # Clean unused resources\n   466→\n   467→# Database performance\n   468→docker compose exec fowldata python manage.py dbshell\n   469→# Then: EXPLAIN ANALYZE SELECT * FROM hunts_hunt WHERE location IS NOT NULL;\n   470→\n   471→# Memory issues\n   472→docker compose down && docker compose up -d  # Restart all services\n   473→```\n   474→\n   475→### Production Deployment Issues\n   476→```bash\n   477→# Production diagnostics\n   478→./scripts/validate-production.sh           # Pre-deployment validation\n   479→docker-compose -f docker-compose.prod.yaml --env-file .env.production config  # Validate config\n   480→\n   481→# SSL/TLS issues  \n   482→openssl x509 -in ssl/fullchain.pem -text -noout  # Check certificate\n   483→sudo certbot renew --dry-run               # Test renewal process\n   484→\n   485→# Environment variable issues\n   486→docker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata env | grep DB_\n   487→```\n   488→\n   489→### Emergency Recovery\n   490→```bash\n   491→# Quick service restart\n   492→docker compose restart fowldata frontend postgres\n   493→\n   494→# Full environment reset (DESTRUCTIVE - development only)\n   495→docker compose down -v\n   496→docker system prune -f  \n   497→git checkout -- .env.local frontend/.env.local\n   498→docker compose up -d\n   499→\n   500→# Rollback production deployment\n   501→git checkout previous-working-commit\n   502→docker-compose -f docker-compose.prod.yaml --env-file .env.production up -d --force-recreate\n   503→```\n   504→\n   505→## Database & Backup Management\n   506→\n   507→### Database Operations\n   508→```bash\n   509→# Database inspection\n   510→docker compose exec fowldata python manage.py dbshell\n   511→docker compose exec postgres psql -U postgres -d fowldata\n   512→\n   513→# Create database backup\n   514→docker compose exec postgres pg_dump -U postgres fowldata > backup_$(date +%Y%m%d_%H%M%S).sql\n   515→\n   516→# Restore database backup  \n   517→cat backup_file.sql | docker compose exec -T postgres psql -U postgres -d fowldata\n   518→\n   519→# Check database size and connections\n   520→docker compose exec postgres psql -U postgres -d fowldata -c \"\\l+ fowldata\"\n   521→docker compose exec postgres psql -U postgres -d fowldata -c \"SELECT * FROM pg_stat_activity;\"\n   522→```\n   523→\n   524→### Performance Monitoring\n   525→```bash\n   526→# Monitor container resources\n   527→docker stats fowldata postgres redis frontend\n   528→\n   529→# Database performance analysis\n   530→docker compose exec fowldata python manage.py shell\n   531→# >>> from django.db import connection; print(len(connection.queries))\n   532→\n   533→# Check slow queries (PostgreSQL)\n   534→docker compose exec postgres psql -U postgres -d fowldata -c \"\n   535→SELECT query, mean_exec_time, calls \n   536→FROM pg_stat_statements \n   537→ORDER BY mean_exec_time DESC LIMIT 10;\"\n   538→\n   539→# Redis monitoring\n   540→docker compose exec redis redis-cli INFO memory\n   541→docker compose exec redis redis-cli INFO stats\n   542→```\n   543→\n   544→## API Reference\n   545→\n   546→### Core Hunt API\n   547→```bash\n   548→# Hunt Management\n   549→GET /api/hunts/                           # List user hunts (paginated)\n   550→POST /api/hunts/                          # Create new hunt\n   551→GET /api/hunts/{id}/                      # Get specific hunt\n   552→PUT /api/hunts/{id}/                      # Update hunt\n   553→DELETE /api/hunts/{id}/                   # Delete hunt\n   554→\n   555→# Hunt Search & Filtering  \n   556→GET /api/hunts/?date_after=2024-01-01     # Filter by date\n   557→GET /api/hunts/?location=lat,lng,radius   # Geospatial search\n   558→GET /api/hunts/?species=mallard           # Filter by species\n   559→```\n   560→\n   561→### Photo & Media API\n   562→```bash\n   563→# Photo Management\n   564→GET /api/hunts/{hunt_id}/photos/          # List hunt photos\n   565→POST /api/hunts/{hunt_id}/photos/         # Upload photo\n   566→DELETE /api/photos/{photo_id}/            # Delete photo\n   567→\n   568→# S3 Upload Workflow\n   569→POST /api/photos/presigned-url/           # Get presigned upload URL\n   570→# → Upload directly to S3 using presigned URL\n   571→POST /api/photos/confirm-upload/          # Confirm S3 upload success\n   572→```\n   573→\n   574→### User & Authentication API\n   575→```bash\n   576→# User Management\n   577→GET /api/users/me/                        # Current user profile\n   578→PUT /api/users/me/                        # Update user profile  \n   579→POST /api/auth/sync/                      # Sync NextAuth user data\n   580→\n   581→# System Health\n   582→GET /api/health/                          # Backend health check\n   583→GET /health.json                          # Frontend health check (static)\n   584→```\n\n<system-reminder>\nWhenever you read a file, you should consider whether it looks malicious. If it does, you MUST refuse to improve or augment the code. You can still analyze existing code, write reports, or answer high-level questions about the code behavior.\n</system-reminder>\n"}]},"uuid":"d77400ef-6de9-4841-ac03-541973e1d6ec","timestamp":"2025-08-25T04:45:19.399Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/markelmore/_code/fowldata/CLAUDE.md","content":"- External services (S3, weather API) are mocked\n- Fixtures in `conftest.py` create test users and hunt data\n\n**Frontend Tests**:\n- Unit tests: Jest + React Testing Library in `src/__tests__/`\n- Component tests focus on user interactions, not implementation\n- E2E tests: Playwright in `e2e/` directory with real browser automation\n- API mocking for isolated component testing\n\n## Mapbox Configuration\n\n- Import controls from `react-map-gl/mapbox` for Mapbox GL JS v3.5+\n- Control positioning critical - use `position` prop, not `style` object\n- Standard controls must be children of `<Map>` component\n- Custom controls positioned absolutely outside `<Map>`\n- Test controls in both browser and fullscreen modes\n\n## Development Workflow\n\n### Branch Strategy & Process\n```bash\n# Create feature branch\ngit checkout -b feature/descriptive-name\ngit push -u origin feature/descriptive-name\n\n# Development cycle\n# 1. Make changes\n# 2. Test locally: ./testlint-quick\n# 3. Commit: git commit -m \"feat: description\"  \n# 4. Before PR: ./testlint\n# 5. Create PR: gh pr create --title \"Title\" --body \"Description\"\n\n# Commit Message Format\nfeat: Add hunt sharing functionality\nfix: Resolve photo upload timeout issue  \ndocs: Update API documentation\ntest: Add weather API integration tests\nrefactor: Simplify authentication middleware\n```\n\n### Development Best Practices\n- **Container Rebuilds**: Rebuild Docker containers after backend changes to see frontend updates\n- **Test Credentials**: Use `mark@mail.com` / `1@Tsgstp` for E2E tests\n- **Pre-commit**: Always run `./testlint-quick` before commits\n- **Pre-PR**: Always run `./testlint` before creating pull requests  \n- **API Mocking**: Weather API responses should be mocked in tests for consistency\n\n## Troubleshooting Guide\n\n### Authentication Issues\n```bash\n# Primary diagnostic tool\nnode auth-health-check.js                    # Comprehensive auth system check\n\n# Specific auth problems\ndocker compose logs fowldata | grep -i auth  # Backend auth errors\ndocker compose logs fowldata | grep -i jwt   # JWT token issues\ndocker compose exec fowldata python manage.py shell  # Manual user inspection\n\n# Common auth fixes\n# 1. Verify AUTH_SECRET matches in both .env files\n# 2. Check BACKEND_URL uses fowldata:8000 (not localhost)\n# 3. Clear browser cookies and retry\n# 4. Restart both containers: docker compose restart fowldata frontend\n```\n\n### Database & Migration Issues  \n```bash\n# Database diagnostic\ndocker compose exec fowldata python manage.py check\ndocker compose exec fowldata python manage.py dbshell\ndocker compose exec postgres psql -U postgres -d fowldata\n\n# Reset database (development only)\ndocker compose down -v                       # Destroy volumes\ndocker compose up -d                         # Recreate services\ndocker compose exec fowldata python manage.py migrate\n\n# Migration problems\ndocker compose exec fowldata python manage.py showmigrations  # Show status\ndocker compose exec fowldata python manage.py migrate --fake  # Mark as applied\n```\n\n### Frontend Build & Runtime Issues\n```bash\n# Build diagnostics\ncd frontend\nnpm run build                                # Check for build errors\nnpm run lint                                # TypeScript/ESLint issues\nrm -rf .next node_modules && npm install    # Clean reinstall\n\n# Runtime debugging\nnpm run dev                                  # Development server logs\ndocker compose logs frontend                # Container logs\n```\n\n### E2E Test Failures\n```bash\n# E2E test diagnostics\n./scripts/verify-e2e-setup.sh              # Check prerequisites\nnpm run test:e2e -- --headed               # Visual debugging  \nnpm run test:e2e -- --debug                # Step-by-step debugging\n\n# Common E2E fixes\n# 1. Ensure test user exists: mark@mail.com / 1@Tsgstp\n# 2. Check services are running: docker compose ps\n# 3. Verify ports: curl http://localhost:3000 && curl http://localhost:8000/api/\n# 4. Clear browser state: rm -rf test-results/\n```\n\n### Performance & Resource Issues\n```bash\n# System resource monitoring\ndocker stats                               # Container resource usage\ndocker system df                          # Disk space usage\ndocker system prune -f                    # Clean unused resources\n\n# Database performance\ndocker compose exec fowldata python manage.py dbshell\n# Then: EXPLAIN ANALYZE SELECT * FROM hunts_hunt WHERE location IS NOT NULL;\n\n# Memory issues\ndocker compose down && docker compose up -d  # Restart all services\n```\n\n### Production Deployment Issues\n```bash\n# Production diagnostics\n./scripts/validate-production.sh           # Pre-deployment validation\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production config  # Validate config\n\n# SSL/TLS issues  \nopenssl x509 -in ssl/fullchain.pem -text -noout  # Check certificate\nsudo certbot renew --dry-run               # Test renewal process\n\n# Environment variable issues\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata env | grep DB_\n```\n\n### Emergency Recovery\n```bash\n# Quick service restart\ndocker compose restart fowldata frontend postgres\n\n# Full environment reset (DESTRUCTIVE - development only)\ndocker compose down -v\ndocker system prune -f  \ngit checkout -- .env.local frontend/.env.local\ndocker compose up -d\n\n# Rollback production deployment\ngit checkout previous-working-commit\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d --force-recreate\n```\n\n## Database & Backup Management\n\n### Database Operations\n```bash\n# Database inspection\ndocker compose exec fowldata python manage.py dbshell\ndocker compose exec postgres psql -U postgres -d fowldata\n\n# Create database backup\ndocker compose exec postgres pg_dump -U postgres fowldata > backup_$(date +%Y%m%d_%H%M%S).sql\n\n# Restore database backup  \ncat backup_file.sql | docker compose exec -T postgres psql -U postgres -d fowldata\n\n# Check database size and connections\ndocker compose exec postgres psql -U postgres -d fowldata -c \"\\l+ fowldata\"\ndocker compose exec postgres psql -U postgres -d fowldata -c \"SELECT * FROM pg_stat_activity;\"\n```\n\n### Performance Monitoring\n```bash\n# Monitor container resources\ndocker stats fowldata postgres redis frontend\n\n# Database performance analysis\ndocker compose exec fowldata python manage.py shell\n# >>> from django.db import connection; print(len(connection.queries))\n\n# Check slow queries (PostgreSQL)\ndocker compose exec postgres psql -U postgres -d fowldata -c \"\nSELECT query, mean_exec_time, calls \nFROM pg_stat_statements \nORDER BY mean_exec_time DESC LIMIT 10;\"\n\n# Redis monitoring\ndocker compose exec redis redis-cli INFO memory\ndocker compose exec redis redis-cli INFO stats\n```\n\n## API Reference\n\n### Core Hunt API\n```bash\n# Hunt Management\nGET /api/hunts/                           # List user hunts (paginated)\nPOST /api/hunts/                          # Create new hunt\nGET /api/hunts/{id}/                      # Get specific hunt\nPUT /api/hunts/{id}/                      # Update hunt\nDELETE /api/hunts/{id}/                   # Delete hunt\n\n# Hunt Search & Filtering  \nGET /api/hunts/?date_after=2024-01-01     # Filter by date\nGET /api/hunts/?location=lat,lng,radius   # Geospatial search\nGET /api/hunts/?species=mallard           # Filter by species\n```\n\n### Photo & Media API\n```bash\n# Photo Management\nGET /api/hunts/{hunt_id}/photos/          # List hunt photos\nPOST /api/hunts/{hunt_id}/photos/         # Upload photo\nDELETE /api/photos/{photo_id}/            # Delete photo\n\n# S3 Upload Workflow\nPOST /api/photos/presigned-url/           # Get presigned upload URL\n# → Upload directly to S3 using presigned URL\nPOST /api/photos/confirm-upload/          # Confirm S3 upload success\n```\n\n### User & Authentication API\n```bash\n# User Management\nGET /api/users/me/                        # Current user profile\nPUT /api/users/me/                        # Update user profile  \nPOST /api/auth/sync/                      # Sync NextAuth user data\n\n# System Health\nGET /api/health/                          # Backend health check\nGET /health.json                          # Frontend health check (static)\n```","numLines":235,"startLine":350,"totalLines":584}}}
{"parentUuid":"d77400ef-6de9-4841-ac03-541973e1d6ec","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01FwNCx4qWVSYhrLwquukjGq","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"I notice there's some redundancy in database commands between the troubleshooting section and the new database management section. Let me clean this up:"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":3022,"cache_read_input_tokens":87911,"cache_creation":{"ephemeral_5m_input_tokens":3022,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTpTz14T8eTEEyRfR4ka","type":"assistant","uuid":"34a8634f-93c5-4ebb-8adb-60180216e2f8","timestamp":"2025-08-25T04:45:23.475Z"}
{"parentUuid":"34a8634f-93c5-4ebb-8adb-60180216e2f8","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01FwNCx4qWVSYhrLwquukjGq","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_017AJbALJCTcHntCWnFrmy7E","name":"Edit","input":{"file_path":"/Users/markelmore/_code/fowldata/CLAUDE.md","old_string":"### Database & Migration Issues  \n```bash\n# Database diagnostic\ndocker compose exec fowldata python manage.py check\ndocker compose exec fowldata python manage.py dbshell\ndocker compose exec postgres psql -U postgres -d fowldata\n\n# Reset database (development only)\ndocker compose down -v                       # Destroy volumes\ndocker compose up -d                         # Recreate services\ndocker compose exec fowldata python manage.py migrate\n\n# Migration problems\ndocker compose exec fowldata python manage.py showmigrations  # Show status\ndocker compose exec fowldata python manage.py migrate --fake  # Mark as applied\n```","new_string":"### Database & Migration Issues  \n```bash\n# Database diagnostic\ndocker compose exec fowldata python manage.py check\ndocker compose exec fowldata python manage.py showmigrations  # Show status\n\n# Reset database (development only)\ndocker compose down -v                       # Destroy volumes\ndocker compose up -d                         # Recreate services\ndocker compose exec fowldata python manage.py migrate\n\n# Migration problems\ndocker compose exec fowldata python manage.py migrate --fake  # Mark as applied\n```"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":3022,"cache_read_input_tokens":87911,"cache_creation":{"ephemeral_5m_input_tokens":3022,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"requestId":"req_011CSTpTz14T8eTEEyRfR4ka","type":"assistant","uuid":"6522fa1e-e48c-4c68-b104-8d1eefece902","timestamp":"2025-08-25T04:45:26.131Z"}
{"parentUuid":"6522fa1e-e48c-4c68-b104-8d1eefece902","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_017AJbALJCTcHntCWnFrmy7E","type":"tool_result","content":"The file /Users/markelmore/_code/fowldata/CLAUDE.md has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   412→# 3. Clear browser cookies and retry\n   413→# 4. Restart both containers: docker compose restart fowldata frontend\n   414→```\n   415→\n   416→### Database & Migration Issues  \n   417→```bash\n   418→# Database diagnostic\n   419→docker compose exec fowldata python manage.py check\n   420→docker compose exec fowldata python manage.py showmigrations  # Show status\n   421→\n   422→# Reset database (development only)\n   423→docker compose down -v                       # Destroy volumes\n   424→docker compose up -d                         # Recreate services\n   425→docker compose exec fowldata python manage.py migrate\n   426→\n   427→# Migration problems\n   428→docker compose exec fowldata python manage.py migrate --fake  # Mark as applied\n   429→```\n   430→\n   431→### Frontend Build & Runtime Issues\n   432→```bash\n   433→# Build diagnostics"}]},"uuid":"cde82e44-bd3a-4b7a-ba9c-cc9f24ba5f82","timestamp":"2025-08-25T04:45:26.184Z","toolUseResult":{"filePath":"/Users/markelmore/_code/fowldata/CLAUDE.md","oldString":"### Database & Migration Issues  \n```bash\n# Database diagnostic\ndocker compose exec fowldata python manage.py check\ndocker compose exec fowldata python manage.py dbshell\ndocker compose exec postgres psql -U postgres -d fowldata\n\n# Reset database (development only)\ndocker compose down -v                       # Destroy volumes\ndocker compose up -d                         # Recreate services\ndocker compose exec fowldata python manage.py migrate\n\n# Migration problems\ndocker compose exec fowldata python manage.py showmigrations  # Show status\ndocker compose exec fowldata python manage.py migrate --fake  # Mark as applied\n```","newString":"### Database & Migration Issues  \n```bash\n# Database diagnostic\ndocker compose exec fowldata python manage.py check\ndocker compose exec fowldata python manage.py showmigrations  # Show status\n\n# Reset database (development only)\ndocker compose down -v                       # Destroy volumes\ndocker compose up -d                         # Recreate services\ndocker compose exec fowldata python manage.py migrate\n\n# Migration problems\ndocker compose exec fowldata python manage.py migrate --fake  # Mark as applied\n```","originalFile":"# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## 🎯 Quick Reference\n\n### Critical Commands\n```bash\n# Essential Development\ndocker compose up -d && cd frontend && npm run dev  # Start full stack\n./testlint-quick           # Quick validation before commits\n./testlint                 # Full validation before PRs\n\n# Production Deployment\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# Emergency Troubleshooting\nnode auth-health-check.js  # Authentication issues\n./scripts/verify-e2e-setup.sh  # E2E test setup validation\n```\n\n### Key API Endpoints\n```bash\nGET /api/hunts/            # List user hunts\nPOST /api/hunts/           # Create hunt\nGET /api/users/me/         # Current user info  \nPOST /api/auth/sync/       # User synchronization\nGET /api/health/           # Backend health check\n```\n\n## ⚠️ CRITICAL: Docker Network Configuration - NEVER CHANGE\n**RECURRING ISSUE - ALWAYS CHECK THIS FIRST**\n\nThe frontend `.env.local` file MUST use the Docker service name for backend communication:\n```bash\n# CORRECT - Use Docker service name (this is in frontend/.env.local)\nBACKEND_URL=http://fowldata:8000\n\n# WRONG - Will cause ECONNREFUSED errors in Docker containers\nBACKEND_URL=http://localhost:8000\n```\n\n**Why**: Inside Docker containers, `localhost` refers to the container itself, not the host. Service names resolve to container IPs within the Docker network.\n\n**Symptoms**: NextAuth authentication fails, API calls fail with \"connect ECONNREFUSED ::1:8000\"\n\n**Fix**: Always use `fowldata:8000` (service name from docker-compose.yml) for inter-container communication.\n\n## ⚠️ CRITICAL: Mapbox GL JS v3+ with react-map-gl v8 Layer Rendering\n**RECURRING ISSUE - ESSENTIAL FOR LAYER VISIBILITY**\n\nWhen using Mapbox GL JS v3+ with react-map-gl v8, layers will NOT render without explicit `mapboxgl.accessToken` configuration:\n\n```typescript\nimport mapboxgl from 'mapbox-gl';\n\nconst MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;\n\n// CRITICAL: This is required for Mapbox GL JS v3+ with react-map-gl v8\nif (MAPBOX_TOKEN) {\n  mapboxgl.accessToken = MAPBOX_TOKEN;\n}\n```\n\n**Why**: react-map-gl v8 delegates to Mapbox GL JS v3+ which requires explicit token configuration. Previous versions handled this automatically.\n\n**Symptoms**: \n- Map loads successfully with satellite/custom styles\n- Source/Layer components appear to be configured correctly  \n- Debug panels show data is present\n- NO visual layers render (not even test layers with bright colors)\n- No console errors about authentication or tokens\n- Canvas element exists but shows no content\n\n**Additional react-map-gl v8 Requirements:**\n- Layer components must be **immediate children** of Source components (no React fragments `<>...</>`)\n- Do NOT add explicit `source` props to Layer components inside Source components\n- Remove conditional `mapStyleLoaded` wrappers - let react-map-gl handle timing internally\n\n**Fix Location**: Add the `mapboxgl.accessToken` configuration at the top level of your Map component file, after importing mapboxgl.\n\n**Debugging Signs This is the Issue**:\n- Mapbox canvas renders with proper classes (`mapboxgl-canvas-container`)\n- Map style loads successfully\n- Data processing works correctly\n- Visibility and layer management appears functional\n- Zero visual layer rendering despite all other systems working\n\n## ⚠️ CRITICAL: Production Environment Variable Loading\n**RECURRING DEPLOYMENT ISSUE - ESSENTIAL FOR PRODUCTION**\n\nDocker Compose production deployments REQUIRE explicit `--env-file` flag:\n\n```bash\n# REQUIRED for all production commands\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# WRONG - Will cause \"variable is not set\" warnings and startup failures\ndocker-compose -f docker-compose.prod.yaml up -d\n```\n\n**Why**: The `env_file:` setting in docker-compose.prod.yaml handles container environment variables, but Docker Compose variable substitution (${VARIABLE}) requires the explicit `--env-file` flag.\n\n**Symptoms**: \n- `WARN[0000] The \"DB_NAME\" variable is not set. Defaulting to a blank string.`\n- PostgreSQL container fails with \"superuser password not specified\"\n- Environment variables visible in some services but not others\n\n**Additional Production Requirements**:\n- All services need `env_file: - .env.production` in docker-compose.prod.yaml\n- Avoid special characters in passwords (`$`, `!`, etc.) - shell interprets them\n- Use clean file encoding (UTF-8 without BOM) for environment files\n\n## Architecture Overview\n\nFowlData is a production-ready full-stack waterfowl hunting tracking application:\n\n**Backend (Django)**: Located in `fowldata/` directory\n- Django 4.2 with Django REST Framework for API endpoints\n- PostgreSQL 16 with PostGIS 3.4 for geospatial data storage and spatial queries\n- JWT RS256 authentication integrated with NextAuth.js frontend\n- Two main apps: `accounts` (user management) and `hunts` (hunt tracking)\n- AWS S3 integration for photo storage with presigned URLs and CORS\n- Gunicorn WSGI server with production performance tuning\n\n**Frontend (Next.js)**: Located in `frontend/` directory  \n- Next.js 15.4.4 with React 19 and TypeScript\n- NextAuth.js v5 with Google OAuth and credentials authentication\n- Mapbox GL JS v3+ with react-map-gl v8 for interactive mapping\n- TailwindCSS for styling, React Hook Form for forms\n- Playwright for E2E testing, Jest for unit tests\n- Production-optimized standalone builds\n\n**Production Infrastructure**:\n- **Deployment**: Digital Ocean Droplets with Docker Compose orchestration\n- **Reverse Proxy**: Nginx with SSL/TLS termination via Let's Encrypt\n- **Caching**: Redis for sessions, query caching, and performance optimization\n- **Storage**: AWS S3 with CloudFront CDN for photo uploads and static assets\n- **Database**: PostgreSQL with PostGIS extensions, performance tuning, and automated backups\n- **Monitoring**: Docker health checks, database performance monitoring, and logging\n- **Security**: SSL enforcement, security headers, rate limiting, and firewall configuration\n\n## Development Commands\n\n### Backend Development\n```bash\n# Start services\ndocker compose up -d\n\n# Django management commands\ndocker compose exec fowldata python manage.py migrate\ndocker compose exec fowldata python manage.py createsuperuser\ndocker compose exec fowldata python manage.py shell\n\n# Run backend tests\ndocker compose exec fowldata python -m pytest\ndocker compose exec fowldata python -m pytest accounts/tests/ hunts/tests/ -v\n\n# Code formatting and linting\ndocker compose exec fowldata black .\ndocker compose exec fowldata flake8\n\n# Single test file\ndocker compose exec fowldata python -m pytest hunts/tests/test_weather_api.py -v\n```\n\n### Frontend Development\n```bash\ncd frontend\n\n# Development server (with Turbopack)\nnpm run dev\n\n# Build and type checking\nnpm run build\nnpm run lint\nnpx tsc --noEmit                # TypeScript checking without emit\n```\n\n### Testing & Validation\n\n#### Pre-Commit Validation\n```bash\n# Quick validation (run before commits)\n./testlint-quick               # Essential tests only (2-3 minutes)\n\n# Full validation (run before PRs)  \n./testlint                     # Complete validation with E2E tests (10-15 minutes)\n```\n\n#### Comprehensive Testing Commands\n```bash\n# Backend Testing\ndocker compose exec fowldata python -m pytest                    # All backend tests\ndocker compose exec fowldata python -m pytest -m \"not performance\"  # Skip slow tests\ndocker compose exec fowldata python -m pytest --cov=fowldata     # With coverage\ndocker compose exec fowldata python -m pytest -s --pdb          # Debug mode\n\n# Frontend Testing\ncd frontend\nnpm run test                           # Jest unit tests\nnpm run test -- --watchAll=false      # CI mode (run once)  \nnpm run test:e2e                      # Playwright E2E tests\nnpm run test:e2e -- --project chromium  # Specific browser\nnpm run test:e2e -- --debug           # Debug E2E tests\n\n# Specific Test Categories\ndocker compose exec fowldata python -m pytest -m \"auth\"      # Authentication tests\ndocker compose exec fowldata python -m pytest -m \"api\"       # API endpoint tests\nnpm test -- --testNamePattern=\"authentication\"               # Frontend auth tests\n```\n\n#### Test Debugging\n```bash\n# Backend Debug\ndocker compose exec fowldata python -m pytest -s --pdb hunts/tests/test_weather_api.py::test_function\ndocker compose exec fowldata python manage.py shell\n\n# Frontend Debug\nnpm run test:e2e -- --headed          # Show browser\nnpm run test:e2e -- --ui               # Playwright UI mode\nnpm test -- --no-coverage --verbose   # Detailed Jest output\n\n# E2E Test Environment Validation\n./scripts/verify-e2e-setup.sh         # Check E2E prerequisites\n```\n\n### Production Deployment\n```bash\n# Production validation and deployment\n./scripts/validate-production.sh\n\n# Production commands (ALWAYS use --env-file flag)\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production build\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production logs -f\n\n# Django production setup\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py migrate\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py createsuperuser\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py collectstatic --noinput\n```\n\n## Core Data Models\n\n**Hunt Model** (`hunts/models.py`):\n- Tracks hunting sessions with date, location (PostGIS Point), weather conditions\n- Links to multiple Bird harvests and HuntPhoto uploads\n- Weather data automatically fetched from external API based on coordinates\n\n**Bird Model**:\n- Individual waterfowl harvests within a hunt\n- Species selection from predefined WATERFOWL_CHOICES (Dabblers, Divers, Geese)\n- Includes harvest time, notes, and gender (Drake/Hen)\n\n**Authentication Integration**:\n- Django backend uses custom NextAuthBackend for JWT token validation\n- Frontend NextAuth.js providers: Google, Facebook, Credentials\n- Token synchronization between NextAuth and Django API client\n\n## Key Integration Points\n\n**Django-NextAuth Authentication Flow**:\n- NextAuth JWT tokens validated by Django via `accounts/nextauth_backend.py`  \n- API requests include NextAuth JWT in Authorization header\n- User creation/sync handled by Django signals in `accounts/signals.py`\n\n**Photo Upload System**:\n- S3 presigned URLs generated by Django `hunts/s3_manager.py`\n- Frontend uploads directly to S3, then registers with Django\n- HuntPhoto model tracks S3 URLs linked to Hunt instances\n\n**Geospatial Features**:\n- Hunt locations stored as PostGIS Points with lat/lng coordinates\n- Weather API integration fetches conditions based on hunt coordinates\n- Mapbox integration for location selection and visualization\n\n## Environment Configuration\n\n### Critical Environment Variables (MUST MATCH)\n**These variables must be identical in both backend and frontend:**\n```bash\n# Authentication (CRITICAL - must match exactly)\nAUTH_SECRET=your-nextauth-secret-key        # Both .env.local AND frontend/.env.local\n\n# Docker Network (CRITICAL - use service names)  \nBACKEND_URL=http://fowldata:8000            # frontend/.env.local ONLY\n```\n\n### Required Environment Files\n```bash\n# Development\n.env.local                  # Backend: Django database, secrets, S3 credentials  \nfrontend/.env.local         # Frontend: NextAuth secrets, API URLs\n\n# Production  \n.env.production            # Backend: Production settings\nfrontend/.env.production   # Frontend: Production URLs and secrets\n```\n\n### Essential Variables by Service\n```bash\n# Database (Backend .env.local)\nDB_HOST=localhost           # Development: localhost, Production: postgres\nDB_NAME=fowldata           # Database name\nDB_USER=postgres           # Database username\nDB_PASS=your_password      # No special characters in production\n\n# Authentication (Both files)\nAUTH_SECRET=your-secret    # Generate: openssl rand -base64 32\nSECRET_KEY=django-secret   # Django only\n\n# Mapbox (Frontend .env.local)\nNEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your-token  # REQUIRED for layer rendering\n\n# AWS S3 (Backend .env.local)\nAWS_ACCESS_KEY_ID=your-key\nAWS_SECRET_ACCESS_KEY=your-secret  \nAWS_S3_BUCKET_NAME=bucket-name\n\n# OAuth (Frontend .env.local)\nGOOGLE_CLIENT_ID=your-google-id\nGOOGLE_CLIENT_SECRET=your-google-secret\n```\n\n### Security & Performance Best Practices\n```bash\n# Production Security Checklist\n- Use strong AUTH_SECRET (32+ characters): openssl rand -base64 32\n- Avoid special characters in passwords (no $, !, etc.) - shell interprets them\n- Always use HTTPS for OAuth callbacks in production\n- Set proper CORS origins: CORS_ALLOWED_ORIGINS=https://yourdomain.com\n\n# Performance Optimization  \n- Use Redis for caching: REDIS_HOST=redis, REDIS_PASSWORD=your-password\n- Enable SSL redirect: SECURE_SSL_REDIRECT=True (production)\n- Configure proper headers: SECURE_HSTS_SECONDS=31536000\n\n# Environment File Best Practices\n- Use UTF-8 encoding without BOM\n- No spaces around = signs: VAR=value (not VAR = value)\n- Always backup production environment files\n```\n\n## Testing Patterns\n\n**Backend Tests** (pytest-django):\n- Database tests marked with `@pytest.mark.django_db`\n- API endpoint tests use Django's APIClient  \n- External services (S3, weather API) are mocked\n- Fixtures in `conftest.py` create test users and hunt data\n\n**Frontend Tests**:\n- Unit tests: Jest + React Testing Library in `src/__tests__/`\n- Component tests focus on user interactions, not implementation\n- E2E tests: Playwright in `e2e/` directory with real browser automation\n- API mocking for isolated component testing\n\n## Mapbox Configuration\n\n- Import controls from `react-map-gl/mapbox` for Mapbox GL JS v3.5+\n- Control positioning critical - use `position` prop, not `style` object\n- Standard controls must be children of `<Map>` component\n- Custom controls positioned absolutely outside `<Map>`\n- Test controls in both browser and fullscreen modes\n\n## Development Workflow\n\n### Branch Strategy & Process\n```bash\n# Create feature branch\ngit checkout -b feature/descriptive-name\ngit push -u origin feature/descriptive-name\n\n# Development cycle\n# 1. Make changes\n# 2. Test locally: ./testlint-quick\n# 3. Commit: git commit -m \"feat: description\"  \n# 4. Before PR: ./testlint\n# 5. Create PR: gh pr create --title \"Title\" --body \"Description\"\n\n# Commit Message Format\nfeat: Add hunt sharing functionality\nfix: Resolve photo upload timeout issue  \ndocs: Update API documentation\ntest: Add weather API integration tests\nrefactor: Simplify authentication middleware\n```\n\n### Development Best Practices\n- **Container Rebuilds**: Rebuild Docker containers after backend changes to see frontend updates\n- **Test Credentials**: Use `mark@mail.com` / `1@Tsgstp` for E2E tests\n- **Pre-commit**: Always run `./testlint-quick` before commits\n- **Pre-PR**: Always run `./testlint` before creating pull requests  \n- **API Mocking**: Weather API responses should be mocked in tests for consistency\n\n## Troubleshooting Guide\n\n### Authentication Issues\n```bash\n# Primary diagnostic tool\nnode auth-health-check.js                    # Comprehensive auth system check\n\n# Specific auth problems\ndocker compose logs fowldata | grep -i auth  # Backend auth errors\ndocker compose logs fowldata | grep -i jwt   # JWT token issues\ndocker compose exec fowldata python manage.py shell  # Manual user inspection\n\n# Common auth fixes\n# 1. Verify AUTH_SECRET matches in both .env files\n# 2. Check BACKEND_URL uses fowldata:8000 (not localhost)\n# 3. Clear browser cookies and retry\n# 4. Restart both containers: docker compose restart fowldata frontend\n```\n\n### Database & Migration Issues  \n```bash\n# Database diagnostic\ndocker compose exec fowldata python manage.py check\ndocker compose exec fowldata python manage.py dbshell\ndocker compose exec postgres psql -U postgres -d fowldata\n\n# Reset database (development only)\ndocker compose down -v                       # Destroy volumes\ndocker compose up -d                         # Recreate services\ndocker compose exec fowldata python manage.py migrate\n\n# Migration problems\ndocker compose exec fowldata python manage.py showmigrations  # Show status\ndocker compose exec fowldata python manage.py migrate --fake  # Mark as applied\n```\n\n### Frontend Build & Runtime Issues\n```bash\n# Build diagnostics\ncd frontend\nnpm run build                                # Check for build errors\nnpm run lint                                # TypeScript/ESLint issues\nrm -rf .next node_modules && npm install    # Clean reinstall\n\n# Runtime debugging\nnpm run dev                                  # Development server logs\ndocker compose logs frontend                # Container logs\n```\n\n### E2E Test Failures\n```bash\n# E2E test diagnostics\n./scripts/verify-e2e-setup.sh              # Check prerequisites\nnpm run test:e2e -- --headed               # Visual debugging  \nnpm run test:e2e -- --debug                # Step-by-step debugging\n\n# Common E2E fixes\n# 1. Ensure test user exists: mark@mail.com / 1@Tsgstp\n# 2. Check services are running: docker compose ps\n# 3. Verify ports: curl http://localhost:3000 && curl http://localhost:8000/api/\n# 4. Clear browser state: rm -rf test-results/\n```\n\n### Performance & Resource Issues\n```bash\n# System resource monitoring\ndocker stats                               # Container resource usage\ndocker system df                          # Disk space usage\ndocker system prune -f                    # Clean unused resources\n\n# Database performance\ndocker compose exec fowldata python manage.py dbshell\n# Then: EXPLAIN ANALYZE SELECT * FROM hunts_hunt WHERE location IS NOT NULL;\n\n# Memory issues\ndocker compose down && docker compose up -d  # Restart all services\n```\n\n### Production Deployment Issues\n```bash\n# Production diagnostics\n./scripts/validate-production.sh           # Pre-deployment validation\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production config  # Validate config\n\n# SSL/TLS issues  \nopenssl x509 -in ssl/fullchain.pem -text -noout  # Check certificate\nsudo certbot renew --dry-run               # Test renewal process\n\n# Environment variable issues\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata env | grep DB_\n```\n\n### Emergency Recovery\n```bash\n# Quick service restart\ndocker compose restart fowldata frontend postgres\n\n# Full environment reset (DESTRUCTIVE - development only)\ndocker compose down -v\ndocker system prune -f  \ngit checkout -- .env.local frontend/.env.local\ndocker compose up -d\n\n# Rollback production deployment\ngit checkout previous-working-commit\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d --force-recreate\n```\n\n## Database & Backup Management\n\n### Database Operations\n```bash\n# Database inspection\ndocker compose exec fowldata python manage.py dbshell\ndocker compose exec postgres psql -U postgres -d fowldata\n\n# Create database backup\ndocker compose exec postgres pg_dump -U postgres fowldata > backup_$(date +%Y%m%d_%H%M%S).sql\n\n# Restore database backup  \ncat backup_file.sql | docker compose exec -T postgres psql -U postgres -d fowldata\n\n# Check database size and connections\ndocker compose exec postgres psql -U postgres -d fowldata -c \"\\l+ fowldata\"\ndocker compose exec postgres psql -U postgres -d fowldata -c \"SELECT * FROM pg_stat_activity;\"\n```\n\n### Performance Monitoring\n```bash\n# Monitor container resources\ndocker stats fowldata postgres redis frontend\n\n# Database performance analysis\ndocker compose exec fowldata python manage.py shell\n# >>> from django.db import connection; print(len(connection.queries))\n\n# Check slow queries (PostgreSQL)\ndocker compose exec postgres psql -U postgres -d fowldata -c \"\nSELECT query, mean_exec_time, calls \nFROM pg_stat_statements \nORDER BY mean_exec_time DESC LIMIT 10;\"\n\n# Redis monitoring\ndocker compose exec redis redis-cli INFO memory\ndocker compose exec redis redis-cli INFO stats\n```\n\n## API Reference\n\n### Core Hunt API\n```bash\n# Hunt Management\nGET /api/hunts/                           # List user hunts (paginated)\nPOST /api/hunts/                          # Create new hunt\nGET /api/hunts/{id}/                      # Get specific hunt\nPUT /api/hunts/{id}/                      # Update hunt\nDELETE /api/hunts/{id}/                   # Delete hunt\n\n# Hunt Search & Filtering  \nGET /api/hunts/?date_after=2024-01-01     # Filter by date\nGET /api/hunts/?location=lat,lng,radius   # Geospatial search\nGET /api/hunts/?species=mallard           # Filter by species\n```\n\n### Photo & Media API\n```bash\n# Photo Management\nGET /api/hunts/{hunt_id}/photos/          # List hunt photos\nPOST /api/hunts/{hunt_id}/photos/         # Upload photo\nDELETE /api/photos/{photo_id}/            # Delete photo\n\n# S3 Upload Workflow\nPOST /api/photos/presigned-url/           # Get presigned upload URL\n# → Upload directly to S3 using presigned URL\nPOST /api/photos/confirm-upload/          # Confirm S3 upload success\n```\n\n### User & Authentication API\n```bash\n# User Management\nGET /api/users/me/                        # Current user profile\nPUT /api/users/me/                        # Update user profile  \nPOST /api/auth/sync/                      # Sync NextAuth user data\n\n# System Health\nGET /api/health/                          # Backend health check\nGET /health.json                          # Frontend health check (static)\n```","structuredPatch":[{"oldStart":417,"oldLines":8,"newStart":417,"newLines":7,"lines":[" ```bash"," # Database diagnostic"," docker compose exec fowldata python manage.py check","-docker compose exec fowldata python manage.py dbshell","-docker compose exec postgres psql -U postgres -d fowldata","+docker compose exec fowldata python manage.py showmigrations  # Show status"," "," # Reset database (development only)"," docker compose down -v                       # Destroy volumes"]},{"oldStart":426,"oldLines":7,"newStart":425,"newLines":6,"lines":[" docker compose exec fowldata python manage.py migrate"," "," # Migration problems","-docker compose exec fowldata python manage.py showmigrations  # Show status"," docker compose exec fowldata python manage.py migrate --fake  # Mark as applied"," ```"," "]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"cde82e44-bd3a-4b7a-ba9c-cc9f24ba5f82","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01BQgHoJZK9NMZ9PHkCEi7MX","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01KyAcp9jea92NRBZ5c62GsX","name":"Edit","input":{"file_path":"/Users/markelmore/_code/fowldata/CLAUDE.md","old_string":"### Database Operations\n```bash\n# Database inspection\ndocker compose exec fowldata python manage.py dbshell\ndocker compose exec postgres psql -U postgres -d fowldata\n\n# Create database backup\ndocker compose exec postgres pg_dump -U postgres fowldata > backup_$(date +%Y%m%d_%H%M%S).sql\n\n# Restore database backup  \ncat backup_file.sql | docker compose exec -T postgres psql -U postgres -d fowldata\n\n# Check database size and connections\ndocker compose exec postgres psql -U postgres -d fowldata -c \"\\l+ fowldata\"\ndocker compose exec postgres psql -U postgres -d fowldata -c \"SELECT * FROM pg_stat_activity;\"\n```","new_string":"### Database Operations\n```bash\n# Database access\ndocker compose exec fowldata python manage.py dbshell  # Django database shell\ndocker compose exec postgres psql -U postgres -d fowldata  # Direct PostgreSQL\n\n# Backup & Recovery\ndocker compose exec postgres pg_dump -U postgres fowldata > backup_$(date +%Y%m%d_%H%M%S).sql\ncat backup_file.sql | docker compose exec -T postgres psql -U postgres -d fowldata\n\n# Database status\ndocker compose exec postgres psql -U postgres -d fowldata -c \"\\l+ fowldata\"  # Size info\ndocker compose exec postgres psql -U postgres -d fowldata -c \"SELECT * FROM pg_stat_activity;\"  # Active connections\n```"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":676,"cache_read_input_tokens":90933,"cache_creation":{"ephemeral_5m_input_tokens":676,"ephemeral_1h_input_tokens":0},"output_tokens":24,"service_tier":"standard"}},"requestId":"req_011CSTpUVUbm2P2BYkmk1zvq","type":"assistant","uuid":"7cdc94cd-71f9-48f8-a677-70ace58bae2c","timestamp":"2025-08-25T04:45:32.911Z"}
{"parentUuid":"7cdc94cd-71f9-48f8-a677-70ace58bae2c","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01KyAcp9jea92NRBZ5c62GsX","type":"tool_result","content":"The file /Users/markelmore/_code/fowldata/CLAUDE.md has been updated. Here's the result of running `cat -n` on a snippet of the edited file:\n   501→```\n   502→\n   503→## Database & Backup Management\n   504→\n   505→### Database Operations\n   506→```bash\n   507→# Database access\n   508→docker compose exec fowldata python manage.py dbshell  # Django database shell\n   509→docker compose exec postgres psql -U postgres -d fowldata  # Direct PostgreSQL\n   510→\n   511→# Backup & Recovery\n   512→docker compose exec postgres pg_dump -U postgres fowldata > backup_$(date +%Y%m%d_%H%M%S).sql\n   513→cat backup_file.sql | docker compose exec -T postgres psql -U postgres -d fowldata\n   514→\n   515→# Database status\n   516→docker compose exec postgres psql -U postgres -d fowldata -c \"\\l+ fowldata\"  # Size info\n   517→docker compose exec postgres psql -U postgres -d fowldata -c \"SELECT * FROM pg_stat_activity;\"  # Active connections\n   518→```\n   519→\n   520→### Performance Monitoring\n   521→```bash\n   522→# Monitor container resources"}]},"uuid":"d3986935-83a2-4506-9d67-09207b59116d","timestamp":"2025-08-25T04:45:33.067Z","toolUseResult":{"filePath":"/Users/markelmore/_code/fowldata/CLAUDE.md","oldString":"### Database Operations\n```bash\n# Database inspection\ndocker compose exec fowldata python manage.py dbshell\ndocker compose exec postgres psql -U postgres -d fowldata\n\n# Create database backup\ndocker compose exec postgres pg_dump -U postgres fowldata > backup_$(date +%Y%m%d_%H%M%S).sql\n\n# Restore database backup  \ncat backup_file.sql | docker compose exec -T postgres psql -U postgres -d fowldata\n\n# Check database size and connections\ndocker compose exec postgres psql -U postgres -d fowldata -c \"\\l+ fowldata\"\ndocker compose exec postgres psql -U postgres -d fowldata -c \"SELECT * FROM pg_stat_activity;\"\n```","newString":"### Database Operations\n```bash\n# Database access\ndocker compose exec fowldata python manage.py dbshell  # Django database shell\ndocker compose exec postgres psql -U postgres -d fowldata  # Direct PostgreSQL\n\n# Backup & Recovery\ndocker compose exec postgres pg_dump -U postgres fowldata > backup_$(date +%Y%m%d_%H%M%S).sql\ncat backup_file.sql | docker compose exec -T postgres psql -U postgres -d fowldata\n\n# Database status\ndocker compose exec postgres psql -U postgres -d fowldata -c \"\\l+ fowldata\"  # Size info\ndocker compose exec postgres psql -U postgres -d fowldata -c \"SELECT * FROM pg_stat_activity;\"  # Active connections\n```","originalFile":"# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## 🎯 Quick Reference\n\n### Critical Commands\n```bash\n# Essential Development\ndocker compose up -d && cd frontend && npm run dev  # Start full stack\n./testlint-quick           # Quick validation before commits\n./testlint                 # Full validation before PRs\n\n# Production Deployment\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# Emergency Troubleshooting\nnode auth-health-check.js  # Authentication issues\n./scripts/verify-e2e-setup.sh  # E2E test setup validation\n```\n\n### Key API Endpoints\n```bash\nGET /api/hunts/            # List user hunts\nPOST /api/hunts/           # Create hunt\nGET /api/users/me/         # Current user info  \nPOST /api/auth/sync/       # User synchronization\nGET /api/health/           # Backend health check\n```\n\n## ⚠️ CRITICAL: Docker Network Configuration - NEVER CHANGE\n**RECURRING ISSUE - ALWAYS CHECK THIS FIRST**\n\nThe frontend `.env.local` file MUST use the Docker service name for backend communication:\n```bash\n# CORRECT - Use Docker service name (this is in frontend/.env.local)\nBACKEND_URL=http://fowldata:8000\n\n# WRONG - Will cause ECONNREFUSED errors in Docker containers\nBACKEND_URL=http://localhost:8000\n```\n\n**Why**: Inside Docker containers, `localhost` refers to the container itself, not the host. Service names resolve to container IPs within the Docker network.\n\n**Symptoms**: NextAuth authentication fails, API calls fail with \"connect ECONNREFUSED ::1:8000\"\n\n**Fix**: Always use `fowldata:8000` (service name from docker-compose.yml) for inter-container communication.\n\n## ⚠️ CRITICAL: Mapbox GL JS v3+ with react-map-gl v8 Layer Rendering\n**RECURRING ISSUE - ESSENTIAL FOR LAYER VISIBILITY**\n\nWhen using Mapbox GL JS v3+ with react-map-gl v8, layers will NOT render without explicit `mapboxgl.accessToken` configuration:\n\n```typescript\nimport mapboxgl from 'mapbox-gl';\n\nconst MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN;\n\n// CRITICAL: This is required for Mapbox GL JS v3+ with react-map-gl v8\nif (MAPBOX_TOKEN) {\n  mapboxgl.accessToken = MAPBOX_TOKEN;\n}\n```\n\n**Why**: react-map-gl v8 delegates to Mapbox GL JS v3+ which requires explicit token configuration. Previous versions handled this automatically.\n\n**Symptoms**: \n- Map loads successfully with satellite/custom styles\n- Source/Layer components appear to be configured correctly  \n- Debug panels show data is present\n- NO visual layers render (not even test layers with bright colors)\n- No console errors about authentication or tokens\n- Canvas element exists but shows no content\n\n**Additional react-map-gl v8 Requirements:**\n- Layer components must be **immediate children** of Source components (no React fragments `<>...</>`)\n- Do NOT add explicit `source` props to Layer components inside Source components\n- Remove conditional `mapStyleLoaded` wrappers - let react-map-gl handle timing internally\n\n**Fix Location**: Add the `mapboxgl.accessToken` configuration at the top level of your Map component file, after importing mapboxgl.\n\n**Debugging Signs This is the Issue**:\n- Mapbox canvas renders with proper classes (`mapboxgl-canvas-container`)\n- Map style loads successfully\n- Data processing works correctly\n- Visibility and layer management appears functional\n- Zero visual layer rendering despite all other systems working\n\n## ⚠️ CRITICAL: Production Environment Variable Loading\n**RECURRING DEPLOYMENT ISSUE - ESSENTIAL FOR PRODUCTION**\n\nDocker Compose production deployments REQUIRE explicit `--env-file` flag:\n\n```bash\n# REQUIRED for all production commands\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\n\n# WRONG - Will cause \"variable is not set\" warnings and startup failures\ndocker-compose -f docker-compose.prod.yaml up -d\n```\n\n**Why**: The `env_file:` setting in docker-compose.prod.yaml handles container environment variables, but Docker Compose variable substitution (${VARIABLE}) requires the explicit `--env-file` flag.\n\n**Symptoms**: \n- `WARN[0000] The \"DB_NAME\" variable is not set. Defaulting to a blank string.`\n- PostgreSQL container fails with \"superuser password not specified\"\n- Environment variables visible in some services but not others\n\n**Additional Production Requirements**:\n- All services need `env_file: - .env.production` in docker-compose.prod.yaml\n- Avoid special characters in passwords (`$`, `!`, etc.) - shell interprets them\n- Use clean file encoding (UTF-8 without BOM) for environment files\n\n## Architecture Overview\n\nFowlData is a production-ready full-stack waterfowl hunting tracking application:\n\n**Backend (Django)**: Located in `fowldata/` directory\n- Django 4.2 with Django REST Framework for API endpoints\n- PostgreSQL 16 with PostGIS 3.4 for geospatial data storage and spatial queries\n- JWT RS256 authentication integrated with NextAuth.js frontend\n- Two main apps: `accounts` (user management) and `hunts` (hunt tracking)\n- AWS S3 integration for photo storage with presigned URLs and CORS\n- Gunicorn WSGI server with production performance tuning\n\n**Frontend (Next.js)**: Located in `frontend/` directory  \n- Next.js 15.4.4 with React 19 and TypeScript\n- NextAuth.js v5 with Google OAuth and credentials authentication\n- Mapbox GL JS v3+ with react-map-gl v8 for interactive mapping\n- TailwindCSS for styling, React Hook Form for forms\n- Playwright for E2E testing, Jest for unit tests\n- Production-optimized standalone builds\n\n**Production Infrastructure**:\n- **Deployment**: Digital Ocean Droplets with Docker Compose orchestration\n- **Reverse Proxy**: Nginx with SSL/TLS termination via Let's Encrypt\n- **Caching**: Redis for sessions, query caching, and performance optimization\n- **Storage**: AWS S3 with CloudFront CDN for photo uploads and static assets\n- **Database**: PostgreSQL with PostGIS extensions, performance tuning, and automated backups\n- **Monitoring**: Docker health checks, database performance monitoring, and logging\n- **Security**: SSL enforcement, security headers, rate limiting, and firewall configuration\n\n## Development Commands\n\n### Backend Development\n```bash\n# Start services\ndocker compose up -d\n\n# Django management commands\ndocker compose exec fowldata python manage.py migrate\ndocker compose exec fowldata python manage.py createsuperuser\ndocker compose exec fowldata python manage.py shell\n\n# Run backend tests\ndocker compose exec fowldata python -m pytest\ndocker compose exec fowldata python -m pytest accounts/tests/ hunts/tests/ -v\n\n# Code formatting and linting\ndocker compose exec fowldata black .\ndocker compose exec fowldata flake8\n\n# Single test file\ndocker compose exec fowldata python -m pytest hunts/tests/test_weather_api.py -v\n```\n\n### Frontend Development\n```bash\ncd frontend\n\n# Development server (with Turbopack)\nnpm run dev\n\n# Build and type checking\nnpm run build\nnpm run lint\nnpx tsc --noEmit                # TypeScript checking without emit\n```\n\n### Testing & Validation\n\n#### Pre-Commit Validation\n```bash\n# Quick validation (run before commits)\n./testlint-quick               # Essential tests only (2-3 minutes)\n\n# Full validation (run before PRs)  \n./testlint                     # Complete validation with E2E tests (10-15 minutes)\n```\n\n#### Comprehensive Testing Commands\n```bash\n# Backend Testing\ndocker compose exec fowldata python -m pytest                    # All backend tests\ndocker compose exec fowldata python -m pytest -m \"not performance\"  # Skip slow tests\ndocker compose exec fowldata python -m pytest --cov=fowldata     # With coverage\ndocker compose exec fowldata python -m pytest -s --pdb          # Debug mode\n\n# Frontend Testing\ncd frontend\nnpm run test                           # Jest unit tests\nnpm run test -- --watchAll=false      # CI mode (run once)  \nnpm run test:e2e                      # Playwright E2E tests\nnpm run test:e2e -- --project chromium  # Specific browser\nnpm run test:e2e -- --debug           # Debug E2E tests\n\n# Specific Test Categories\ndocker compose exec fowldata python -m pytest -m \"auth\"      # Authentication tests\ndocker compose exec fowldata python -m pytest -m \"api\"       # API endpoint tests\nnpm test -- --testNamePattern=\"authentication\"               # Frontend auth tests\n```\n\n#### Test Debugging\n```bash\n# Backend Debug\ndocker compose exec fowldata python -m pytest -s --pdb hunts/tests/test_weather_api.py::test_function\ndocker compose exec fowldata python manage.py shell\n\n# Frontend Debug\nnpm run test:e2e -- --headed          # Show browser\nnpm run test:e2e -- --ui               # Playwright UI mode\nnpm test -- --no-coverage --verbose   # Detailed Jest output\n\n# E2E Test Environment Validation\n./scripts/verify-e2e-setup.sh         # Check E2E prerequisites\n```\n\n### Production Deployment\n```bash\n# Production validation and deployment\n./scripts/validate-production.sh\n\n# Production commands (ALWAYS use --env-file flag)\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production build\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production logs -f\n\n# Django production setup\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py migrate\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py createsuperuser\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata python manage.py collectstatic --noinput\n```\n\n## Core Data Models\n\n**Hunt Model** (`hunts/models.py`):\n- Tracks hunting sessions with date, location (PostGIS Point), weather conditions\n- Links to multiple Bird harvests and HuntPhoto uploads\n- Weather data automatically fetched from external API based on coordinates\n\n**Bird Model**:\n- Individual waterfowl harvests within a hunt\n- Species selection from predefined WATERFOWL_CHOICES (Dabblers, Divers, Geese)\n- Includes harvest time, notes, and gender (Drake/Hen)\n\n**Authentication Integration**:\n- Django backend uses custom NextAuthBackend for JWT token validation\n- Frontend NextAuth.js providers: Google, Facebook, Credentials\n- Token synchronization between NextAuth and Django API client\n\n## Key Integration Points\n\n**Django-NextAuth Authentication Flow**:\n- NextAuth JWT tokens validated by Django via `accounts/nextauth_backend.py`  \n- API requests include NextAuth JWT in Authorization header\n- User creation/sync handled by Django signals in `accounts/signals.py`\n\n**Photo Upload System**:\n- S3 presigned URLs generated by Django `hunts/s3_manager.py`\n- Frontend uploads directly to S3, then registers with Django\n- HuntPhoto model tracks S3 URLs linked to Hunt instances\n\n**Geospatial Features**:\n- Hunt locations stored as PostGIS Points with lat/lng coordinates\n- Weather API integration fetches conditions based on hunt coordinates\n- Mapbox integration for location selection and visualization\n\n## Environment Configuration\n\n### Critical Environment Variables (MUST MATCH)\n**These variables must be identical in both backend and frontend:**\n```bash\n# Authentication (CRITICAL - must match exactly)\nAUTH_SECRET=your-nextauth-secret-key        # Both .env.local AND frontend/.env.local\n\n# Docker Network (CRITICAL - use service names)  \nBACKEND_URL=http://fowldata:8000            # frontend/.env.local ONLY\n```\n\n### Required Environment Files\n```bash\n# Development\n.env.local                  # Backend: Django database, secrets, S3 credentials  \nfrontend/.env.local         # Frontend: NextAuth secrets, API URLs\n\n# Production  \n.env.production            # Backend: Production settings\nfrontend/.env.production   # Frontend: Production URLs and secrets\n```\n\n### Essential Variables by Service\n```bash\n# Database (Backend .env.local)\nDB_HOST=localhost           # Development: localhost, Production: postgres\nDB_NAME=fowldata           # Database name\nDB_USER=postgres           # Database username\nDB_PASS=your_password      # No special characters in production\n\n# Authentication (Both files)\nAUTH_SECRET=your-secret    # Generate: openssl rand -base64 32\nSECRET_KEY=django-secret   # Django only\n\n# Mapbox (Frontend .env.local)\nNEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=your-token  # REQUIRED for layer rendering\n\n# AWS S3 (Backend .env.local)\nAWS_ACCESS_KEY_ID=your-key\nAWS_SECRET_ACCESS_KEY=your-secret  \nAWS_S3_BUCKET_NAME=bucket-name\n\n# OAuth (Frontend .env.local)\nGOOGLE_CLIENT_ID=your-google-id\nGOOGLE_CLIENT_SECRET=your-google-secret\n```\n\n### Security & Performance Best Practices\n```bash\n# Production Security Checklist\n- Use strong AUTH_SECRET (32+ characters): openssl rand -base64 32\n- Avoid special characters in passwords (no $, !, etc.) - shell interprets them\n- Always use HTTPS for OAuth callbacks in production\n- Set proper CORS origins: CORS_ALLOWED_ORIGINS=https://yourdomain.com\n\n# Performance Optimization  \n- Use Redis for caching: REDIS_HOST=redis, REDIS_PASSWORD=your-password\n- Enable SSL redirect: SECURE_SSL_REDIRECT=True (production)\n- Configure proper headers: SECURE_HSTS_SECONDS=31536000\n\n# Environment File Best Practices\n- Use UTF-8 encoding without BOM\n- No spaces around = signs: VAR=value (not VAR = value)\n- Always backup production environment files\n```\n\n## Testing Patterns\n\n**Backend Tests** (pytest-django):\n- Database tests marked with `@pytest.mark.django_db`\n- API endpoint tests use Django's APIClient  \n- External services (S3, weather API) are mocked\n- Fixtures in `conftest.py` create test users and hunt data\n\n**Frontend Tests**:\n- Unit tests: Jest + React Testing Library in `src/__tests__/`\n- Component tests focus on user interactions, not implementation\n- E2E tests: Playwright in `e2e/` directory with real browser automation\n- API mocking for isolated component testing\n\n## Mapbox Configuration\n\n- Import controls from `react-map-gl/mapbox` for Mapbox GL JS v3.5+\n- Control positioning critical - use `position` prop, not `style` object\n- Standard controls must be children of `<Map>` component\n- Custom controls positioned absolutely outside `<Map>`\n- Test controls in both browser and fullscreen modes\n\n## Development Workflow\n\n### Branch Strategy & Process\n```bash\n# Create feature branch\ngit checkout -b feature/descriptive-name\ngit push -u origin feature/descriptive-name\n\n# Development cycle\n# 1. Make changes\n# 2. Test locally: ./testlint-quick\n# 3. Commit: git commit -m \"feat: description\"  \n# 4. Before PR: ./testlint\n# 5. Create PR: gh pr create --title \"Title\" --body \"Description\"\n\n# Commit Message Format\nfeat: Add hunt sharing functionality\nfix: Resolve photo upload timeout issue  \ndocs: Update API documentation\ntest: Add weather API integration tests\nrefactor: Simplify authentication middleware\n```\n\n### Development Best Practices\n- **Container Rebuilds**: Rebuild Docker containers after backend changes to see frontend updates\n- **Test Credentials**: Use `mark@mail.com` / `1@Tsgstp` for E2E tests\n- **Pre-commit**: Always run `./testlint-quick` before commits\n- **Pre-PR**: Always run `./testlint` before creating pull requests  \n- **API Mocking**: Weather API responses should be mocked in tests for consistency\n\n## Troubleshooting Guide\n\n### Authentication Issues\n```bash\n# Primary diagnostic tool\nnode auth-health-check.js                    # Comprehensive auth system check\n\n# Specific auth problems\ndocker compose logs fowldata | grep -i auth  # Backend auth errors\ndocker compose logs fowldata | grep -i jwt   # JWT token issues\ndocker compose exec fowldata python manage.py shell  # Manual user inspection\n\n# Common auth fixes\n# 1. Verify AUTH_SECRET matches in both .env files\n# 2. Check BACKEND_URL uses fowldata:8000 (not localhost)\n# 3. Clear browser cookies and retry\n# 4. Restart both containers: docker compose restart fowldata frontend\n```\n\n### Database & Migration Issues  \n```bash\n# Database diagnostic\ndocker compose exec fowldata python manage.py check\ndocker compose exec fowldata python manage.py showmigrations  # Show status\n\n# Reset database (development only)\ndocker compose down -v                       # Destroy volumes\ndocker compose up -d                         # Recreate services\ndocker compose exec fowldata python manage.py migrate\n\n# Migration problems\ndocker compose exec fowldata python manage.py migrate --fake  # Mark as applied\n```\n\n### Frontend Build & Runtime Issues\n```bash\n# Build diagnostics\ncd frontend\nnpm run build                                # Check for build errors\nnpm run lint                                # TypeScript/ESLint issues\nrm -rf .next node_modules && npm install    # Clean reinstall\n\n# Runtime debugging\nnpm run dev                                  # Development server logs\ndocker compose logs frontend                # Container logs\n```\n\n### E2E Test Failures\n```bash\n# E2E test diagnostics\n./scripts/verify-e2e-setup.sh              # Check prerequisites\nnpm run test:e2e -- --headed               # Visual debugging  \nnpm run test:e2e -- --debug                # Step-by-step debugging\n\n# Common E2E fixes\n# 1. Ensure test user exists: mark@mail.com / 1@Tsgstp\n# 2. Check services are running: docker compose ps\n# 3. Verify ports: curl http://localhost:3000 && curl http://localhost:8000/api/\n# 4. Clear browser state: rm -rf test-results/\n```\n\n### Performance & Resource Issues\n```bash\n# System resource monitoring\ndocker stats                               # Container resource usage\ndocker system df                          # Disk space usage\ndocker system prune -f                    # Clean unused resources\n\n# Database performance\ndocker compose exec fowldata python manage.py dbshell\n# Then: EXPLAIN ANALYZE SELECT * FROM hunts_hunt WHERE location IS NOT NULL;\n\n# Memory issues\ndocker compose down && docker compose up -d  # Restart all services\n```\n\n### Production Deployment Issues\n```bash\n# Production diagnostics\n./scripts/validate-production.sh           # Pre-deployment validation\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production config  # Validate config\n\n# SSL/TLS issues  \nopenssl x509 -in ssl/fullchain.pem -text -noout  # Check certificate\nsudo certbot renew --dry-run               # Test renewal process\n\n# Environment variable issues\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production exec fowldata env | grep DB_\n```\n\n### Emergency Recovery\n```bash\n# Quick service restart\ndocker compose restart fowldata frontend postgres\n\n# Full environment reset (DESTRUCTIVE - development only)\ndocker compose down -v\ndocker system prune -f  \ngit checkout -- .env.local frontend/.env.local\ndocker compose up -d\n\n# Rollback production deployment\ngit checkout previous-working-commit\ndocker-compose -f docker-compose.prod.yaml --env-file .env.production up -d --force-recreate\n```\n\n## Database & Backup Management\n\n### Database Operations\n```bash\n# Database inspection\ndocker compose exec fowldata python manage.py dbshell\ndocker compose exec postgres psql -U postgres -d fowldata\n\n# Create database backup\ndocker compose exec postgres pg_dump -U postgres fowldata > backup_$(date +%Y%m%d_%H%M%S).sql\n\n# Restore database backup  \ncat backup_file.sql | docker compose exec -T postgres psql -U postgres -d fowldata\n\n# Check database size and connections\ndocker compose exec postgres psql -U postgres -d fowldata -c \"\\l+ fowldata\"\ndocker compose exec postgres psql -U postgres -d fowldata -c \"SELECT * FROM pg_stat_activity;\"\n```\n\n### Performance Monitoring\n```bash\n# Monitor container resources\ndocker stats fowldata postgres redis frontend\n\n# Database performance analysis\ndocker compose exec fowldata python manage.py shell\n# >>> from django.db import connection; print(len(connection.queries))\n\n# Check slow queries (PostgreSQL)\ndocker compose exec postgres psql -U postgres -d fowldata -c \"\nSELECT query, mean_exec_time, calls \nFROM pg_stat_statements \nORDER BY mean_exec_time DESC LIMIT 10;\"\n\n# Redis monitoring\ndocker compose exec redis redis-cli INFO memory\ndocker compose exec redis redis-cli INFO stats\n```\n\n## API Reference\n\n### Core Hunt API\n```bash\n# Hunt Management\nGET /api/hunts/                           # List user hunts (paginated)\nPOST /api/hunts/                          # Create new hunt\nGET /api/hunts/{id}/                      # Get specific hunt\nPUT /api/hunts/{id}/                      # Update hunt\nDELETE /api/hunts/{id}/                   # Delete hunt\n\n# Hunt Search & Filtering  \nGET /api/hunts/?date_after=2024-01-01     # Filter by date\nGET /api/hunts/?location=lat,lng,radius   # Geospatial search\nGET /api/hunts/?species=mallard           # Filter by species\n```\n\n### Photo & Media API\n```bash\n# Photo Management\nGET /api/hunts/{hunt_id}/photos/          # List hunt photos\nPOST /api/hunts/{hunt_id}/photos/         # Upload photo\nDELETE /api/photos/{photo_id}/            # Delete photo\n\n# S3 Upload Workflow\nPOST /api/photos/presigned-url/           # Get presigned upload URL\n# → Upload directly to S3 using presigned URL\nPOST /api/photos/confirm-upload/          # Confirm S3 upload success\n```\n\n### User & Authentication API\n```bash\n# User Management\nGET /api/users/me/                        # Current user profile\nPUT /api/users/me/                        # Update user profile  \nPOST /api/auth/sync/                      # Sync NextAuth user data\n\n# System Health\nGET /api/health/                          # Backend health check\nGET /health.json                          # Frontend health check (static)\n```","structuredPatch":[{"oldStart":504,"oldLines":19,"newStart":504,"newLines":17,"lines":[" "," ### Database Operations"," ```bash","-# Database inspection","-docker compose exec fowldata python manage.py dbshell","-docker compose exec postgres psql -U postgres -d fowldata","+# Database access","+docker compose exec fowldata python manage.py dbshell  # Django database shell","+docker compose exec postgres psql -U postgres -d fowldata  # Direct PostgreSQL"," ","-# Create database backup","+# Backup & Recovery"," docker compose exec postgres pg_dump -U postgres fowldata > backup_$(date +%Y%m%d_%H%M%S).sql","-","-# Restore database backup  "," cat backup_file.sql | docker compose exec -T postgres psql -U postgres -d fowldata"," ","-# Check database size and connections","-docker compose exec postgres psql -U postgres -d fowldata -c \"\\l+ fowldata\"","-docker compose exec postgres psql -U postgres -d fowldata -c \"SELECT * FROM pg_stat_activity;\"","+# Database status","+docker compose exec postgres psql -U postgres -d fowldata -c \"\\l+ fowldata\"  # Size info","+docker compose exec postgres psql -U postgres -d fowldata -c \"SELECT * FROM pg_stat_activity;\"  # Active connections"," ```"," "," ### Performance Monitoring"]}],"userModified":false,"replaceAll":false}}
{"parentUuid":"d3986935-83a2-4506-9d67-09207b59116d","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01KUaooFTX7NpVaRYP57cRCb","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"tool_use","id":"toolu_01G6aRYM4scAzW4jbbm16HEy","name":"TodoWrite","input":{"todos":[{"content":"Analyze current CLAUDE.md structure and identify integration points","status":"completed","activeForm":"Analyzing current CLAUDE.md structure and identifying integration points"},{"content":"Enhance testing section with comprehensive commands","status":"completed","activeForm":"Enhancing testing section with comprehensive commands"},{"content":"Add security and performance best practices","status":"completed","activeForm":"Adding security and performance best practices"},{"content":"Expand troubleshooting section with consolidated patterns","status":"completed","activeForm":"Expanding troubleshooting section with consolidated patterns"},{"content":"Add development workflow improvements","status":"completed","activeForm":"Adding development workflow improvements"},{"content":"Include API reference and environment variables priority","status":"completed","activeForm":"Including API reference and environment variables priority"},{"content":"Review for redundancy and conflicts","status":"completed","activeForm":"Reviewing for redundancy and conflicts"}]}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":778,"cache_read_input_tokens":91609,"cache_creation":{"ephemeral_5m_input_tokens":778,"ephemeral_1h_input_tokens":0},"output_tokens":284,"service_tier":"standard"}},"requestId":"req_011CSTpUzzNDvEHhu3kBqmpd","type":"assistant","uuid":"a27aa19e-4dda-4c59-9abd-1ade39a188f6","timestamp":"2025-08-25T04:45:39.762Z"}
{"parentUuid":"a27aa19e-4dda-4c59-9abd-1ade39a188f6","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01G6aRYM4scAzW4jbbm16HEy","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"59fc3e55-14cb-4b64-b4f4-a273e7de29ae","timestamp":"2025-08-25T04:45:39.828Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Analyze current CLAUDE.md structure and identify integration points","status":"completed","activeForm":"Analyzing current CLAUDE.md structure and identifying integration points"},{"content":"Enhance testing section with comprehensive commands","status":"completed","activeForm":"Enhancing testing section with comprehensive commands"},{"content":"Add security and performance best practices","status":"completed","activeForm":"Adding security and performance best practices"},{"content":"Expand troubleshooting section with consolidated patterns","status":"completed","activeForm":"Expanding troubleshooting section with consolidated patterns"},{"content":"Add development workflow improvements","status":"completed","activeForm":"Adding development workflow improvements"},{"content":"Include API reference and environment variables priority","status":"completed","activeForm":"Including API reference and environment variables priority"},{"content":"Review for redundancy and conflicts","status":"completed","activeForm":"Reviewing for redundancy and conflicts"}]}}
{"parentUuid":"59fc3e55-14cb-4b64-b4f4-a273e7de29ae","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"assistant","uuid":"b90f06c4-0e5d-488b-bfce-340ca655d12d","timestamp":"2025-08-25T04:45:41.167Z","message":{"id":"de766e76-25b2-4bb7-9470-92bc932f772d","model":"<synthetic>","role":"assistant","stop_reason":"stop_sequence","stop_sequence":"","type":"message","usage":{"input_tokens":0,"output_tokens":0,"cache_creation_input_tokens":0,"cache_read_input_tokens":0,"server_tool_use":{"web_search_requests":0},"service_tier":null},"content":[{"type":"text","text":"5-hour limit reached ∙ resets 10pm"}]},"isApiErrorMessage":true}
{"parentUuid":"b90f06c4-0e5d-488b-bfce-340ca655d12d","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","type":"user","message":{"role":"user","content":"ok lets continue now that our limit reset"},"uuid":"32566383-a29f-4596-b517-1646e890af63","timestamp":"2025-08-25T05:12:05.677Z"}
{"parentUuid":"32566383-a29f-4596-b517-1646e890af63","isSidechain":false,"userType":"external","cwd":"/Users/markelmore/_code/fowldata","sessionId":"3a82775c-4d88-49b5-bfca-a3ea4e515867","version":"1.0.89","gitBranch":"docs-consolidation-update","message":{"id":"msg_01CyYVmHkFptEHZ4nheeWKuQ","type":"message","role":"assistant","model":"claude-sonnet-4-20250514","content":[{"type":"text","text":"Perfect! I've successfully enhanced the CLAUDE.md file with all the recommended improvements while carefully avoiding redundancy and conflicts. Here's a summary of what was accomplished:\n\n## ✅ Completed Enhancements\n\n### 1. **Quick Reference Section Added**\n- Critical commands for common tasks\n- Key API endpoints reference\n- Emergency troubleshooting commands\n\n### 2. **Enhanced Testing & Validation**\n- Comprehensive testing commands for both backend and frontend\n- Test debugging tools and strategies\n- Specific test categories (auth, api, performance)\n- E2E test environment validation\n\n### 3. **Security & Performance Best Practices**\n- Production security checklist\n- Environment file best practices\n- Performance optimization guidelines\n- Critical environment variables prioritized\n\n### 4. **Expanded Troubleshooting Guide**\n- Authentication issues with diagnostic tools\n- Database & migration problems\n- Frontend build & runtime issues\n- E2E test failures\n- Performance & resource issues\n- Production deployment problems\n- Emergency recovery procedures\n\n### 5. **Development Workflow Improvements**\n- Branch strategy and process\n- Commit message format standards\n- Development best practices consolidated\n\n### 6. **Database & Backup Management**\n- Database operations and access commands\n- Backup and recovery procedures\n- Performance monitoring tools\n\n### 7. **Comprehensive API Reference**\n- Core Hunt API endpoints\n- Photo & Media API workflows\n- User & Authentication API\n- System health checks\n\n## 🔍 Redundancy & Conflict Resolution\n\nI carefully reviewed and eliminated redundancies by:\n- Consolidating duplicate database commands\n- Removing redundant frontend testing commands\n- Merging similar troubleshooting patterns\n- Ensuring consistent command syntax throughout\n- Maintaining the existing critical sections while enhancing them\n\nThe file now provides comprehensive guidance for AI assistants working on the FowlData project, with clear section organization and no conflicting information. All the valuable insights from the extensive documentation directory have been integrated while preserving the existing critical issue warnings that were working well."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":92729,"cache_read_input_tokens":0,"cache_creation":{"ephemeral_5m_input_tokens":92729,"ephemeral_1h_input_tokens":0},"output_tokens":451,"service_tier":"standard"}},"requestId":"req_011CSTrWR2FKKeqxSjiopqtt","type":"assistant","uuid":"4fac2a90-11fc-4567-ae9d-c0e085cca338","timestamp":"2025-08-25T05:12:19.929Z"}
